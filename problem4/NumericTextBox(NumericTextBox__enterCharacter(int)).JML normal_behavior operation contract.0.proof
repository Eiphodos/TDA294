\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Oct 30 13:01:02 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:noRestriction
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=80000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Wed Oct 30 13:01:02 CET 2019
contract=NumericTextBox[NumericTextBox\\:\\:enterCharacter(int)].JML normal_behavior operation contract.0
name=NumericTextBox[NumericTextBox\\:\\:enterCharacter(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "David" ) (keyVersion "c934a1f554"))

(autoModeTime "2525")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "1,0,0,0") (newnames "input,self,exc,heapAtPre,o,f"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "polySimp_homoEq" (formula "9") (term "0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "9") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "assignment" (formula "9") (term "1"))
(rule "sequentialToParallel2" (formula "9"))
(rule "simplifyUpdate3" (formula "9") (term "1,0"))
(rule "polySimp_sepPosMonomial" (formula "9") (term "0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,0,0,0,1"))
(rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "5") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_0") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "3"))
(rule "eqSymm" (formula "5") (term "0,1"))
(rule "applyEqRigid" (formula "5") (term "1,0,1") (ifseqformula "6"))
(rule "inEqSimp_sepPosMonomial0" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1"))
(rule "polySimp_rightDist" (formula "7") (term "1"))
(rule "mul_literals" (formula "7") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1"))
(rule "elementOfUnion" (formula "10") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "10") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "1,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,0,0,0,0,0,1,0,1"))
(rule "boxToDiamond" (formula "5") (term "1"))
(rule "notLeft" (formula "5"))
(rule "Class_invariant_axiom_for_NumericTextBox" (formula "7") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "inInt" (formula "7") (term "1,0,0,1"))
   (rule "concrete_and_3" (formula "7") (term "0,0,1"))
   (rule "inInt" (formula "7") (term "1,0,0,1,0"))
   (rule "concrete_and_3" (formula "7") (term "0,0,1,0"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "7"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0,1,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,1,0"))
   (rule "mul_literals" (formula "9") (term "1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "6"))
   (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0"))
   (rule "qeq_literals" (formula "8") (term "0"))
   (rule "concrete_or_1" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
   (rule "times_zero_1" (formula "7") (term "0,0"))
   (rule "add_zero_left" (formula "7") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7"))
   (rule "mul_literals" (formula "7") (term "1"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "commute_and" (formula "9") (term "1,0"))
   (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_enterCharacter,savedHeapBefore_enterCharacter"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_isSingleDigit,savedHeapBefore_isSingleDigit"))
   (rule "simplifyUpdate2" (formula "12") (term "1"))
   (rule "cnf_rightDist" (formula "9") (term "0"))
   (rule "distr_forallAnd" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "x"))
   (rule "compound_assignment_2" (formula "15") (term "1") (inst "#v=x_1"))
   (rule "variableDeclarationAssign" (formula "15") (term "1"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
    (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_isSingleDigit_0,result,exc_0") (contract "NumericTextBox[NumericTextBox::isSingleDigit(int)].JML normal_behavior operation contract.0#NumericTextBox[NumericTextBox::isSingleDigit(int)].JML normal_behavior operation contract.1"))
   (branch "Post (isSingleDigit)"
      (rule "ifthenelse_true" (formula "12") (term "1,0,0,1,0,1,1,1"))
      (rule "ifthenelse_false" (formula "12") (term "1,0,0,1,1,1,1,1"))
      (rule "false_to_not_true" (formula "12") (term "0,0,1,1,1,1,1"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "andLeft" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "andLeft" (formula "13"))
      (rule "applyOnRigidFormula" (formula "14"))
      (rule "simplifyUpdate2" (formula "14") (term "1"))
      (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "12"))
      (rule "concrete_and_3" (formula "14") (term "1"))
      (rule "applyOnRigidFormula" (formula "13"))
      (rule "simplifyUpdate2" (formula "13") (term "1"))
      (rule "replace_known_left" (formula "13") (term "1,1") (ifseqformula "12"))
      (rule "concrete_and_3" (formula "13") (term "1"))
      (rule "applyOnRigidFormula" (formula "14") (term "0"))
      (rule "simplifyUpdate2" (formula "14") (term "1,0"))
      (rule "simplifyUpdate2" (formula "14") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "0"))
      (rule "simplifyUpdate2" (formula "13") (term "0,0"))
      (rule "simplifyUpdate2" (formula "13") (term "1,0"))
      (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
      (rule "applyOnPV" (formula "14") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,1,0"))
      (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,1,0"))
      (rule "applyOnPV" (formula "13") (term "0,1,0"))
      (rule "applyOnRigidFormula" (formula "14") (term "1,0,0"))
      (rule "applyOnPV" (formula "14") (term "0,1,0,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,1,0,0"))
      (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
      (rule "applyOnPV" (formula "14") (term "0,0,0,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "0,0,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,0,0,0"))
      (rule "applyOnPV" (formula "13") (term "0,0,0,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "1,0,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,1,0,0"))
      (rule "applyOnPV" (formula "13") (term "0,1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "14") (term "1,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
      (rule "assignment" (formula "18") (term "1"))
      (rule "sequentialToParallel2" (formula "18"))
      (rule "simplifyUpdate3" (formula "18") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
      (rule "mul_literals" (formula "14") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
      (rule "mul_literals" (formula "13") (term "1,1,0,0"))
      (rule "Class_invariant_axiom_for_NumericTextBox" (formula "14") (term "1,1") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_1") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "inInt" (formula "14") (term "1,0,0,1,1,1"))
         (rule "concrete_and_3" (formula "14") (term "0,0,1,1,1"))
         (rule "inInt" (formula "14") (term "1,0,0,1,0,1,1"))
         (rule "concrete_and_3" (formula "14") (term "0,0,1,0,1,1"))
         (rule "replace_known_left" (formula "14") (term "0,1,0,0,1,1") (ifseqformula "8"))
         (rule "concrete_and_1" (formula "14") (term "1,0,0,1,1"))
         (rule "replace_known_right" (formula "14") (term "0,0,0,0,1,1") (ifseqformula "15"))
         (rule "concrete_not_2" (formula "14") (term "0,0,0,1,1"))
         (rule "concrete_and_1" (formula "14") (term "0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0,1,0,1,1"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,1,0,1,1"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1,0,1,0,1,1"))
         (rule "mul_literals" (formula "14") (term "1,0,1,0,1,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,1"))
         (rule "inEqSimp_subsumption0" (formula "14") (term "0,0,1,1") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,0,1,1"))
         (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0,1,1"))
         (rule "add_literals" (formula "14") (term "1,1,0,0,0,0,1,1"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,1,1"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,1,1"))
         (rule "qeq_literals" (formula "14") (term "0,0,0,1,1"))
         (rule "concrete_or_1" (formula "14") (term "0,0,1,1"))
         (rule "concrete_and_1" (formula "14") (term "0,1,1"))
         (rule "nnf_imp2or" (formula "14") (term "0,1,1,1"))
         (rule "nnf_imp2or" (formula "14") (term "0,0,1,1"))
         (rule "nnf_notAnd" (formula "14") (term "0,0,1,1,1"))
         (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1,1"))
         (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,1,1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,1,1,1"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,1,1,1"))
         (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,1,1,1"))
         (rule "replace_known_left" (formula "14") (term "1,1,1") (ifseqformula "11"))
         (rule "concrete_and_3" (formula "14") (term "1,1"))
         (rule "nnf_notAnd" (formula "14") (term "0,0,1,1"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,1"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,1"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,1"))
         (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,1"))
         (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,1"))
         (rule "Class_invariant_axiom_for_NumericTextBox" (formula "13") (term "1,1") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_2") (ifseqformula "3"))
         (branch "Use Axiom"
            (rule "inInt" (formula "13") (term "1,0,0,1,1,1"))
            (rule "concrete_and_3" (formula "13") (term "0,0,1,1,1"))
            (rule "inInt" (formula "13") (term "1,0,0,1,0,1,1"))
            (rule "concrete_and_3" (formula "13") (term "0,0,1,0,1,1"))
            (rule "replace_known_right" (formula "13") (term "0,0,0,0,1,1") (ifseqformula "15"))
            (rule "concrete_not_2" (formula "13") (term "0,0,0,1,1"))
            (rule "concrete_and_1" (formula "13") (term "0,0,1,1"))
            (rule "replace_known_left" (formula "13") (term "0,0,0,1,1") (ifseqformula "8"))
            (rule "concrete_and_1" (formula "13") (term "0,0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,1,0,1,1"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,0,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,1,0,1,0,1,1"))
            (rule "mul_literals" (formula "13") (term "1,0,1,0,1,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1,1"))
            (rule "inEqSimp_subsumption0" (formula "13") (term "0,0,1,1") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,1,1"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0,1,1"))
            (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,1,1"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,1,1"))
            (rule "qeq_literals" (formula "13") (term "0,0,0,1,1"))
            (rule "concrete_or_1" (formula "13") (term "0,0,1,1"))
            (rule "concrete_and_1" (formula "13") (term "0,1,1"))
            (rule "nnf_imp2or" (formula "13") (term "0,1,1,1"))
            (rule "nnf_imp2or" (formula "13") (term "0,0,1,1"))
            (rule "nnf_notAnd" (formula "13") (term "0,0,1,1,1"))
            (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,1,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,1,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,1,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,1,1,1"))
            (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,1,1,1"))
            (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,1,1"))
            (rule "replace_known_left" (formula "13") (term "1,1,1") (ifseqformula "11"))
            (rule "concrete_and_3" (formula "13") (term "1,1"))
            (rule "nnf_notAnd" (formula "13") (term "0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,1"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,1"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,1"))
            (rule "Class_invariant_axiom_for_NumericTextBox" (formula "14") (term "1,0") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_3") (ifseqformula "3"))
            (branch "Use Axiom"
               (rule "inInt" (formula "14") (term "1,0,0,1,1,0"))
               (rule "concrete_and_3" (formula "14") (term "0,0,1,1,0"))
               (rule "inInt" (formula "14") (term "1,0,0,1,0,1,0"))
               (rule "concrete_and_3" (formula "14") (term "0,0,1,0,1,0"))
               (rule "replace_known_right" (formula "14") (term "0,0,0,0,1,0") (ifseqformula "15"))
               (rule "concrete_not_2" (formula "14") (term "0,0,0,1,0"))
               (rule "concrete_and_1" (formula "14") (term "0,0,1,0"))
               (rule "replace_known_left" (formula "14") (term "0,0,0,1,0") (ifseqformula "8"))
               (rule "concrete_and_1" (formula "14") (term "0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,1,0,1,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1,0,1,0,1,0"))
               (rule "mul_literals" (formula "14") (term "1,0,1,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,0"))
               (rule "inEqSimp_subsumption0" (formula "14") (term "0,0,1,0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0,1,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,1,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
               (rule "qeq_literals" (formula "14") (term "0,0,0,1,0"))
               (rule "concrete_or_1" (formula "14") (term "0,0,1,0"))
               (rule "concrete_and_1" (formula "14") (term "0,1,0"))
               (rule "nnf_imp2or" (formula "14") (term "0,1,1,0"))
               (rule "Class_invariant_axiom_for_NumericTextBox" (formula "13") (term "1,0") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_4") (ifseqformula "3"))
               (branch "Use Axiom"
                  (rule "inInt" (formula "13") (term "1,0,0,1,1,0"))
                  (rule "concrete_and_3" (formula "13") (term "0,0,1,1,0"))
                  (rule "inInt" (formula "13") (term "1,0,0,1,0,1,0"))
                  (rule "concrete_and_3" (formula "13") (term "0,0,1,0,1,0"))
                  (rule "replace_known_right" (formula "13") (term "0,0,0,0,1,0") (ifseqformula "15"))
                  (rule "concrete_not_2" (formula "13") (term "0,0,0,1,0"))
                  (rule "concrete_and_1" (formula "13") (term "0,0,1,0"))
                  (rule "replace_known_left" (formula "13") (term "0,0,0,1,0") (ifseqformula "8"))
                  (rule "concrete_and_1" (formula "13") (term "0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,1,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_subsumption0" (formula "13") (term "0,0,1,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0,1,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0"))
                  (rule "qeq_literals" (formula "13") (term "0,0,0,1,0"))
                  (rule "concrete_or_1" (formula "13") (term "0,0,1,0"))
                  (rule "concrete_and_1" (formula "13") (term "0,1,0"))
                  (rule "nnf_imp2or" (formula "14") (term "0,0,1,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0,1,1,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1,0"))
                  (rule "replace_known_left" (formula "14") (term "1,1,0") (ifseqformula "11"))
                  (rule "concrete_and_3" (formula "14") (term "1,0"))
                  (rule "nnf_imp2or" (formula "13") (term "0,1,1,0"))
                  (rule "nnf_imp2or" (formula "13") (term "0,0,1,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,1,1,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,1,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,1,0"))
                  (rule "replace_known_left" (formula "13") (term "1,1,0") (ifseqformula "11"))
                  (rule "concrete_and_3" (formula "13") (term "1,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0"))
                  (rule "compound_assignment_1_new" (formula "18") (term "1"))
                  (rule "sequentialToParallel2" (formula "18"))
                  (rule "simplifyUpdate2" (formula "18"))
                  (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                  (rule "applyOnElementary" (formula "18") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
                  (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x_2"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_2"))
                  (rule "arrayLengthIsAnInt" (formula "6") (term "1,1"))
                  (rule "inInt" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "arrayLengthNotNegative" (formula "6") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
                  (rule "leq_literals" (formula "6") (term "0"))
                  (rule "concrete_or_1" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "commute_and" (formula "14") (term "1,0,1,1"))
                  (rule "commute_and" (formula "13") (term "1,0,1,1"))
                  (rule "commute_and" (formula "14") (term "1,0,1,0"))
                  (rule "commute_and" (formula "13") (term "1,0,1,0"))
                  (rule "cnf_rightDist" (formula "14") (term "0,1,1"))
                  (rule "commute_or" (formula "14") (term "1,0,1,1"))
                  (rule "cnf_rightDist" (formula "13") (term "0,1,1"))
                  (rule "commute_or" (formula "13") (term "1,0,1,1"))
                  (rule "cnf_rightDist" (formula "14") (term "0,1,0"))
                  (rule "commute_or" (formula "14") (term "1,0,1,0"))
                  (rule "cnf_rightDist" (formula "13") (term "0,1,0"))
                  (rule "commute_or" (formula "13") (term "1,0,1,0"))
                  (rule "compound_assignment_3_nonsimple" (formula "16") (term "1"))
                  (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x_3"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_3"))
                  (rule "compound_assignment_2" (formula "16") (term "1") (inst "#v=x_4"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_4"))
                  (rule "greater_equal_than_comparison_simple" (formula "16") (term "1"))
                  (rule "sequentialToParallel2" (formula "16"))
                  (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                  (rule "applyOnElementary" (formula "16") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
                  (rule "compound_assignment_1_new" (formula "16") (term "1"))
                  (rule "sequentialToParallel2" (formula "16"))
                  (rule "simplifyUpdate2" (formula "16"))
                  (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                  (rule "applyOnElementary" (formula "16") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
                  (rule "ifthenelse_concrete3" (formula "16") (term "0,0,1,0"))
                  (rule "boolean_not_equal_2" (formula "16") (term "1,0,0,1,0"))
                  (rule "concrete_or_4" (formula "16") (term "0,0,1,0"))
                  (rule "ifElseSplit" (formula "18"))
                  (branch "if x true"
                     (rule "simplifyUpdate2" (formula "19"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1"))
                     (rule "concrete_or_4" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "replace_known_right" (formula "14") (term "0,0,1") (ifseqformula "15"))
                     (rule "concrete_not_2" (formula "14") (term "0,1"))
                     (rule "concrete_and_1" (formula "14") (term "1"))
                     (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "15"))
                     (rule "concrete_and_2" (formula "13") (term "1"))
                     (rule "concrete_impl_3" (formula "13"))
                     (rule "notLeft" (formula "13"))
                     (rule "blockThrow" (formula "19") (term "1"))
                     (rule "throwUnfold" (formula "19") (term "1") (inst "#v0=i"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "i"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0,1,1") (ifseqformula "1"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "17"))
                     (rule "concrete_or_2" (formula "6"))
                     (rule "ifElseSplit" (formula "18"))
                     (branch "if x_3 true"
                        (rule "simplifyUpdate2" (formula "19"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "ifElseSkipThen" (formula "19") (term "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "15"))
                        (rule "concrete_and_2" (formula "16") (term "0"))
                        (rule "concrete_and_2" (formula "16"))
                        (rule "false_right" (formula "16"))
                        (rule "inEqSimp_geqRight" (formula "15"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "assignment" (formula "18") (term "1"))
                        (rule "simplifyUpdate2" (formula "18") (term "1"))
                        (rule "blockReturn" (formula "18") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "1"))
                        (rule "concrete_or_1" (formula "15") (term "0,0"))
                        (rule "concrete_and_1" (formula "15") (term "0"))
                        (rule "eq_imp" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "methodCallReturn" (formula "17") (term "1"))
                        (rule "assignment" (formula "17") (term "1"))
                        (rule "sequentialToParallel2" (formula "17"))
                        (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                        (rule "methodCallEmpty" (formula "17") (term "1"))
                        (rule "simplifyUpdate2" (formula "17"))
                        (rule "emptyModality" (formula "17") (term "1"))
                        (rule "notRight" (formula "17"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_3 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "19"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "15"))
                        (rule "simplifyUpdate1" (formula "15") (term "1"))
                        (rule "applyOnPV" (formula "15") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "15"))
                        (rule "boolean_not_equal_2" (formula "15") (term "1"))
                        (rule "concrete_or_4" (formula "15"))
                        (rule "notRight" (formula "15"))
                        (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                        (rule "concrete_and_1" (formula "16") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "15") (term "0,0,0,0"))
                        (rule "concrete_and_2" (formula "15") (term "0,0,0"))
                        (rule "concrete_or_2" (formula "15") (term "0,0"))
                        (rule "less_than_comparison_simple" (formula "19") (term "1"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate2" (formula "19"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                        (rule "applyOnElementary" (formula "19") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0"))
                        (rule "blockEmpty" (formula "19") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,1,0"))
                        (rule "ifElseSplit" (formula "19"))
                        (branch "if x_2 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "20"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "ifthenelse_concrete3" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "17"))
                           (rule "allRight" (formula "17") (inst "sk=i_0_0"))
                           (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,1"))
                           (rule "blockReturn" (formula "20") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "16") (term "0,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "16") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "16") (term "0,0"))
                           (rule "concrete_and_2" (formula "16") (term "0"))
                           (rule "concrete_impl_2" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "methodCallReturn" (formula "19") (term "1"))
                           (rule "assignment" (formula "19") (term "1"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                           (rule "methodCallEmpty" (formula "19") (term "1"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "emptyModality" (formula "19") (term "1"))
                           (rule "notRight" (formula "19"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "instanceCreationAssignment" (formula "20") (term "1") (inst "#v0=i_1"))
                           (rule "variableDeclarationAssign" (formula "20") (term "1"))
                           (rule "variableDeclaration" (formula "20") (term "1") (newnames "i_1"))
                           (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "20") (term "1") (inst "#v0=i_2"))
                           (rule "variableDeclaration" (formula "20") (term "1") (newnames "i_2"))
                           (rule "methodBodyExpand" (formula "20") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                           (rule "simplifyUpdate2" (formula "20") (term "1"))
                           (rule "variableDeclaration" (formula "20") (term "1") (newnames "__NEW__"))
                           (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "20") (term "1") (inst "#v0=i_3"))
                           (rule "variableDeclaration" (formula "20") (term "1") (newnames "i_3"))
                           (rule "allocateInstance" (formula "20"))
                           (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
                           (rule "concrete_impl_1" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "blockEmpty" (formula "23") (term "1"))
                           (rule "assignment" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
                           (rule "methodCallWithinClass" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallSuper" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallSuper" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallSuper" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallSuper" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "blockEmpty" (formula "23") (term "1"))
                           (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
                           (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "blockEmpty" (formula "23") (term "1"))
                           (rule "methodCallReturnIgnoreResult" (formula "23") (term "1"))
                           (rule "methodCallReturn" (formula "23") (term "1"))
                           (rule "assignment" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "blockEmpty" (formula "23") (term "1"))
                           (rule "assignment" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,1,0"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallSuper" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallSuper" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallSuper" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallSuper" (formula "23") (term "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "blockEmpty" (formula "23") (term "1"))
                           (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
                           (rule "dropEffectlessStores" (formula "23") (term "0,1,0"))
                           (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
                           (rule "dropEffectlessStores" (formula "23") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "blockEmpty" (formula "23") (term "1"))
                           (rule "assignment_write_attribute" (formula "23") (term "1"))
                           (branch "Normal Execution (i_1 != null)"
                              (rule "simplifyUpdate2" (formula "23"))
                              (rule "sequentialToParallel2" (formula "24"))
                              (rule "simplifyUpdate2" (formula "24"))
                              (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                              (rule "applyOnElementary" (formula "24") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "23"))
                              (rule "simplifyUpdate1" (formula "23") (term "1"))
                              (rule "applyOnPV" (formula "23") (term "0"))
                              (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
                              (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                              (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
                              (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
                              (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
                              (rule "dropEffectlessStores" (formula "23") (term "0,1,0"))
                              (rule "assignment" (formula "23") (term "1"))
                              (rule "sequentialToParallel2" (formula "23"))
                              (rule "simplifyUpdate2" (formula "23"))
                              (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                              (rule "applyOnElementary" (formula "23") (term "1,0"))
                              (rule "applyOnPV" (formula "23") (term "0,1,0"))
                              (rule "tryCatchThrow" (formula "23") (term "1"))
                              (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x"))
                              (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_5"))
                              (rule "equality_comparison_simple" (formula "23") (term "1"))
                              (rule "sequentialToParallel2" (formula "23"))
                              (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                              (rule "applyOnElementary" (formula "23") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                              (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                              (rule "replace_known_right" (formula "23") (term "0,0,1,0") (ifseqformula "18"))
                              (rule "ifthenelse_false" (formula "23") (term "0,1,0"))
                              (rule "ifElseSplit" (formula "23"))
                              (branch "if x_5 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "24"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_5 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "24"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "applyOnPV" (formula "17") (term "0"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "17"))
                                 (rule "false_right" (formula "17"))
                                 (rule "ifElseSplit" (formula "23"))
                                 (branch "if i instanceof Exception true"
                                    (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                    (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                    (rule "concrete_or_4" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "17"))
                                    (rule "applyOnPV" (formula "17") (term "0"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1"))
                                    (rule "variableDeclaration" (formula "23") (term "1") (newnames "e"))
                                    (rule "delete_unnecessary_cast" (formula "23") (term "1"))
                                    (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                    (rule "boolean_equal" (formula "1") (term "1,1"))
                                    (rule "concrete_or_3" (formula "1") (term "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "sequentialToParallel2" (formula "23"))
                                    (rule "simplifyUpdate2" (formula "23"))
                                    (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                    (rule "applyOnElementary" (formula "23") (term "1,0"))
                                    (rule "applyOnPV" (formula "23") (term "0,1,0"))
                                    (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=x"))
                                    (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_6"))
                                    (rule "compound_inequality_comparison_1" (formula "23") (term "1") (inst "#v0=t"))
                                    (rule "variableDeclarationAssign" (formula "23") (term "1"))
                                    (rule "variableDeclaration" (formula "23") (term "1") (newnames "t"))
                                    (rule "assignment_read_attribute_this" (formula "23") (term "1"))
                                    (rule "sequentialToParallel2" (formula "23"))
                                    (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                    (rule "applyOnElementary" (formula "23") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                    (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                    (rule "dismissNonSelectedField" (formula "23") (term "0,1,0"))
                                    (rule "dismissNonSelectedField" (formula "23") (term "0,1,0"))
                                    (rule "dismissNonSelectedField" (formula "23") (term "0,1,0"))
                                    (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=NumericTextBox_textBoxRenderer_0"))
                                    (rule "simplifySelectOfCreate" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "1") (term "0"))
                                    (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "inequality_comparison_simple" (formula "23") (term "1"))
                                    (rule "sequentialToParallel2" (formula "23"))
                                    (rule "simplifyUpdate2" (formula "23"))
                                    (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                    (rule "applyOnElementary" (formula "23") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                                    (rule "ifSplit" (formula "23"))
                                    (branch "if x_6 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "24"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "ifthenelse_concrete4" (formula "1"))
                                       (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                       (rule "concrete_or_4" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "eval_order_access1" (formula "24") (term "1") (inst "#v0=t"))
                                       (rule "variableDeclarationAssign" (formula "24") (term "1"))
                                       (rule "variableDeclaration" (formula "24") (term "1") (newnames "t_1"))
                                       (rule "assignment_read_attribute_this" (formula "24") (term "1"))
                                       (rule "sequentialToParallel2" (formula "24"))
                                       (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                       (rule "applyOnElementary" (formula "24") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                       (rule "applyOnPV" (formula "24") (term "0,0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                                       (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                                       (rule "replaceKnownSelect_taclet010010000000_0" (formula "24") (term "0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet010010000000_1" (formula "24") (term "0,1,0"))
                                       (rule "assignment_write_attribute" (formula "24") (term "1"))
                                       (branch "Normal Execution (t_1 != null)"
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "sequentialToParallel2" (formula "25"))
                                          (rule "simplifyUpdate2" (formula "25"))
                                          (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                          (rule "applyOnElementary" (formula "25") (term "1,0"))
                                          (rule "applyOnRigidFormula" (formula "24"))
                                          (rule "applyOnPV" (formula "24") (term "0"))
                                          (rule "simplifyUpdate1" (formula "24") (term "1"))
                                          (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "24") (term "3,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "24") (term "0,0,1,0"))
                                          (rule "applyOnPV" (formula "24") (term "1,0,1,0"))
                                          (rule "applyOnPV" (formula "24") (term "0,0,1,0"))
                                          (rule "eval_order_access1" (formula "24") (term "1") (inst "#v0=t"))
                                          (rule "variableDeclarationAssign" (formula "24") (term "1"))
                                          (rule "variableDeclaration" (formula "24") (term "1") (newnames "t_2"))
                                          (rule "assignment_read_attribute_this" (formula "24") (term "1"))
                                          (rule "sequentialToParallel2" (formula "24"))
                                          (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                          (rule "applyOnElementary" (formula "24") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                          (rule "applyOnPV" (formula "24") (term "0,0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                                          (rule "replaceKnownSelect_taclet010010000000_0" (formula "24") (term "0,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet010010000000_1" (formula "24") (term "0,1,0"))
                                          (rule "assignment_write_attribute" (formula "24") (term "1"))
                                          (branch "Normal Execution (t_2 != null)"
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "sequentialToParallel2" (formula "25"))
                                             (rule "simplifyUpdate2" (formula "25"))
                                             (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                             (rule "applyOnElementary" (formula "25") (term "1,0"))
                                             (rule "applyOnRigidFormula" (formula "24"))
                                             (rule "applyOnPV" (formula "24") (term "0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "1"))
                                             (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "3,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                             (rule "applyOnPV" (formula "24") (term "0,0,1,0"))
                                             (rule "applyOnPV" (formula "24") (term "1,0,1,0"))
                                             (rule "blockEmpty" (formula "24") (term "1"))
                                             (rule "methodCallThrow" (formula "24") (term "1"))
                                             (rule "tryCatchThrow" (formula "24") (term "1"))
                                             (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=x"))
                                             (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_7"))
                                             (rule "equality_comparison_simple" (formula "24") (term "1"))
                                             (rule "sequentialToParallel2" (formula "24"))
                                             (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                             (rule "applyOnElementary" (formula "24") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                                             (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                                             (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "19"))
                                             (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                                             (rule "ifElseSplit" (formula "24"))
                                             (branch "if x_7 true"
                                                (rule "simplifyUpdate2" (formula "25"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                (rule "boolean_not_equal_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "if x_7 false"
                                                (rule "false_to_not_true" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "25"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "17"))
                                                (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                (rule "applyOnPV" (formula "17") (term "0"))
                                                (rule "boolean_not_equal_2" (formula "17"))
                                                (rule "false_right" (formula "17"))
                                                (rule "ifElseSplit" (formula "24"))
                                                (branch "if e instanceof java.lang.Throwable true"
                                                   (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                   (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                   (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                   (rule "concrete_or_4" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "17"))
                                                   (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                   (rule "applyOnPV" (formula "17") (term "0"))
                                                   (rule "variableDeclaration" (formula "24") (term "1") (newnames "e_1"))
                                                   (rule "delete_unnecessary_cast" (formula "24") (term "1"))
                                                   (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                   (rule "boolean_equal" (formula "1") (term "1,1"))
                                                   (rule "concrete_or_3" (formula "1") (term "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "sequentialToParallel2" (formula "24"))
                                                   (rule "simplifyUpdate2" (formula "24"))
                                                   (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                   (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                   (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                                   (rule "assignment" (formula "24") (term "1"))
                                                   (rule "sequentialToParallel2" (formula "24"))
                                                   (rule "simplifyUpdate2" (formula "24"))
                                                   (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                   (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                   (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                                   (rule "emptyModality" (formula "24") (term "1"))
                                                   (rule "applyOnRigidFormula" (formula "24"))
                                                   (rule "simplifyUpdate2" (formula "24") (term "1"))
                                                   (rule "applyOnRigidFormula" (formula "24") (term "0"))
                                                   (rule "simplifyUpdate2" (formula "24") (term "1,0"))
                                                   (rule "simplifyUpdate2" (formula "24") (term "0,0"))
                                                   (rule "applyOnRigidFormula" (formula "24") (term "1"))
                                                   (rule "applyOnRigidFormula" (formula "24") (term "1,0"))
                                                   (rule "simplifyUpdate1" (formula "24") (term "1,1,0"))
                                                   (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                                   (rule "replace_known_right" (formula "24") (term "1,0") (ifseqformula "19"))
                                                   (rule "concrete_and_4" (formula "24") (term "0"))
                                                   (rule "concrete_and_2" (formula "24"))
                                                   (rule "false_right" (formula "24"))
                                                   (rule "andRight" (formula "20"))
                                                   (branch "Case 1"
                                                      (rule "orRight" (formula "20"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "inEqSimp_geqRight" (formula "22"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_leqRight" (formula "22"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "inEqSimp_leqRight" (formula "22"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                      (rule "mul_literals" (formula "3") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                      (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                                      (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "17") (term "0,0,0"))
                                                      (rule "concrete_and_2" (formula "17") (term "0,0"))
                                                      (rule "concrete_or_2" (formula "17") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "17") (term "1") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "17") (term "0,1"))
                                                      (rule "concrete_and_2" (formula "17") (term "1"))
                                                      (rule "concrete_or_4" (formula "17"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "17"))
                                                      (rule "inEqSimp_homoInEq1" (formula "17"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                                      (rule "add_literals" (formula "17") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "17") (term "1,0"))
                                                      (rule "add_zero_right" (formula "17") (term "0"))
                                                      (rule "leq_literals" (formula "17"))
                                                      (rule "closeFalse" (formula "17"))
                                                   )
                                                   (branch "Case 2"
                                                      (rule "orRight" (formula "20"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "inEqSimp_leqRight" (formula "22"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_leqRight" (formula "22"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "inEqSimp_leqRight" (formula "22"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                      (rule "mul_literals" (formula "3") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                      (rule "allLeft" (formula "18") (inst "t=i_0_0"))
                                                      (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "4"))
                                                      (rule "qeq_literals" (formula "18") (term "0,1"))
                                                      (rule "concrete_and_2" (formula "18") (term "1"))
                                                      (rule "concrete_or_4" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                                      (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "18") (term "0,1"))
                                                      (rule "concrete_and_2" (formula "18") (term "1"))
                                                      (rule "concrete_or_4" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "18") (term "0"))
                                                      (rule "concrete_and_2" (formula "18"))
                                                      (rule "closeFalse" (formula "18"))
                                                   )
                                                )
                                                (branch "if e instanceof java.lang.Throwable false"
                                                   (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                   (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                   (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                   (rule "double_not" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "close" (formula "20") (ifseqformula "1"))
                                                )
                                             )
                                          )
                                          (branch "Null Reference (t_2 = null)"
                                             (rule "simplifyUpdate2" (formula "25"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "close" (formula "18") (ifseqformula "1"))
                                          )
                                       )
                                       (branch "Null Reference (t_1 = null)"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "25"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "close" (formula "18") (ifseqformula "1"))
                                       )
                                    )
                                    (branch "if x_6 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "24"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "17"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1"))
                                       (rule "applyOnPV" (formula "17") (term "0"))
                                       (rule "ifthenelse_concrete4" (formula "17"))
                                       (rule "boolean_not_equal_2" (formula "17") (term "1"))
                                       (rule "concrete_or_4" (formula "17"))
                                       (rule "notRight" (formula "17"))
                                       (rule "methodCallThrow" (formula "24") (term "1"))
                                       (rule "tryCatchThrow" (formula "24") (term "1"))
                                       (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=x"))
                                       (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_7"))
                                       (rule "equality_comparison_simple" (formula "24") (term "1"))
                                       (rule "sequentialToParallel2" (formula "24"))
                                       (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                       (rule "applyOnElementary" (formula "24") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                                       (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                                       (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "19"))
                                       (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                                       (rule "ifElseSplit" (formula "24"))
                                       (branch "if x_7 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "25"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if x_7 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "25"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "18"))
                                          (rule "applyOnPV" (formula "18") (term "0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1"))
                                          (rule "boolean_not_equal_2" (formula "18"))
                                          (rule "false_right" (formula "18"))
                                          (rule "ifElseSplit" (formula "24"))
                                          (branch "if e instanceof java.lang.Throwable true"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                             (rule "concrete_or_4" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "18"))
                                             (rule "applyOnPV" (formula "18") (term "0"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1"))
                                             (rule "variableDeclaration" (formula "24") (term "1") (newnames "e_1"))
                                             (rule "delete_unnecessary_cast" (formula "24") (term "1"))
                                             (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                             (rule "boolean_equal" (formula "1") (term "1,1"))
                                             (rule "concrete_or_3" (formula "1") (term "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "sequentialToParallel2" (formula "24"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                             (rule "applyOnElementary" (formula "24") (term "1,0"))
                                             (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                             (rule "assignment" (formula "24") (term "1"))
                                             (rule "sequentialToParallel2" (formula "24"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                             (rule "applyOnElementary" (formula "24") (term "1,0"))
                                             (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                             (rule "emptyModality" (formula "24") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "24"))
                                             (rule "simplifyUpdate2" (formula "24") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "24") (term "0"))
                                             (rule "simplifyUpdate2" (formula "24") (term "1,0"))
                                             (rule "simplifyUpdate2" (formula "24") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "24") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "24") (term "1,0"))
                                             (rule "simplifyUpdate1" (formula "24") (term "1,1,0"))
                                             (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                             (rule "replace_known_right" (formula "24") (term "1,0") (ifseqformula "19"))
                                             (rule "concrete_and_4" (formula "24") (term "0"))
                                             (rule "concrete_and_2" (formula "24"))
                                             (rule "false_right" (formula "24"))
                                             (rule "andRight" (formula "20"))
                                             (branch "Case 1"
                                                (rule "orRight" (formula "20"))
                                                (rule "orRight" (formula "20"))
                                                (rule "inEqSimp_geqRight" (formula "22"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_leqRight" (formula "21"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "22"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                (rule "mul_literals" (formula "3") (term "1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "14"))
                                                (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "allLeft" (formula "18") (inst "t=i_0_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "18") (term "1") (ifseqformula "4"))
                                                (rule "qeq_literals" (formula "18") (term "0,1"))
                                                (rule "concrete_and_2" (formula "18") (term "1"))
                                                (rule "concrete_or_4" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "18") (term "0,0"))
                                                (rule "concrete_and_2" (formula "18") (term "0"))
                                                (rule "concrete_or_2" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "inEqSimp_homoInEq1" (formula "18"))
                                                (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                                (rule "add_literals" (formula "18") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "18") (term "1,0"))
                                                (rule "add_zero_right" (formula "18") (term "0"))
                                                (rule "leq_literals" (formula "18"))
                                                (rule "closeFalse" (formula "18"))
                                             )
                                             (branch "Case 2"
                                                (rule "orRight" (formula "20"))
                                                (rule "orRight" (formula "20"))
                                                (rule "inEqSimp_leqRight" (formula "22"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_leqRight" (formula "21"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "22"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                (rule "mul_literals" (formula "3") (term "1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "14"))
                                                (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                                (rule "concrete_and_2" (formula "19") (term "0,0"))
                                                (rule "concrete_or_2" (formula "19") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "4"))
                                                (rule "qeq_literals" (formula "19") (term "0,1"))
                                                (rule "concrete_and_2" (formula "19") (term "1"))
                                                (rule "concrete_or_4" (formula "19"))
                                                (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                                                (rule "andLeft" (formula "19"))
                                                (rule "inEqSimp_homoInEq1" (formula "19"))
                                                (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                                                (rule "add_literals" (formula "19") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "19") (term "1,0"))
                                                (rule "add_zero_right" (formula "19") (term "0"))
                                                (rule "leq_literals" (formula "19"))
                                                (rule "closeFalse" (formula "19"))
                                             )
                                          )
                                          (branch "if e instanceof java.lang.Throwable false"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                             (rule "concrete_or_4" (formula "1") (term "0,1"))
                                             (rule "double_not" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "close" (formula "20") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "if i instanceof Exception false"
                                    (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                    (rule "concrete_or_4" (formula "1") (term "0,1"))
                                    (rule "double_not" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "close" (formula "19") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "Null Reference (i_1 = null)"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "close" (formula "19") (ifseqformula "1"))
                           )
                        )
                        (branch "if x_2 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "20"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "ifthenelse_concrete3" (formula "16"))
                           (rule "boolean_not_equal_2" (formula "16") (term "1"))
                           (rule "concrete_or_4" (formula "16"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
                           (rule "concrete_and_2" (formula "17"))
                           (rule "false_right" (formula "17"))
                           (rule "inEqSimp_leqRight" (formula "16"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "blockReturn" (formula "19") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "16") (term "0"))
                           (rule "eq_imp" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                           (rule "leq_literals" (formula "2") (term "0"))
                           (rule "concrete_or_1" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "methodCallReturn" (formula "17") (term "1"))
                           (rule "assignment" (formula "17") (term "1"))
                           (rule "sequentialToParallel2" (formula "17"))
                           (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                           (rule "methodCallEmpty" (formula "17") (term "1"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "emptyModality" (formula "17") (term "1"))
                           (rule "notRight" (formula "17"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "if x false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "19"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "15"))
                     (rule "simplifyUpdate1" (formula "15") (term "1"))
                     (rule "applyOnPV" (formula "15") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "15"))
                     (rule "boolean_not_equal_2" (formula "15") (term "1"))
                     (rule "concrete_or_4" (formula "15"))
                     (rule "notRight" (formula "15"))
                     (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "1"))
                     (rule "concrete_not_1" (formula "15") (term "0,1"))
                     (rule "concrete_and_2" (formula "15") (term "1"))
                     (rule "concrete_impl_3" (formula "15"))
                     (rule "notLeft" (formula "15"))
                     (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "1"))
                     (rule "concrete_and_1" (formula "14") (term "1"))
                     (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_5"))
                     (rule "compound_greater_equal_than_comparison_2" (formula "19") (term "1") (inst "#v1=x_7") (inst "#v0=x_6"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_6"))
                     (rule "assignment_read_attribute_this" (formula "19") (term "1"))
                     (rule "sequentialToParallel2" (formula "19"))
                     (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_7"))
                     (rule "eval_order_access2" (formula "19") (term "1") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_arr"))
                     (rule "assignment_read_attribute_this" (formula "19") (term "1"))
                     (rule "sequentialToParallel2" (formula "19"))
                     (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                     (rule "assignment_read_length" (formula "19") (term "1"))
                     (branch "Normal Execution (x_arr != null)"
                        (rule "simplifyUpdate2" (formula "19"))
                        (rule "sequentialToParallel2" (formula "20"))
                        (rule "simplifyUpdate2" (formula "20"))
                        (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                        (rule "applyOnElementary" (formula "20") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "19"))
                        (rule "simplifyUpdate1" (formula "19") (term "1"))
                        (rule "applyOnPV" (formula "19") (term "0"))
                        (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                        (rule "applyOnPV" (formula "19") (term "0,0,1,0"))
                        (rule "greater_equal_than_comparison_simple" (formula "19") (term "1"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate2" (formula "19"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                        (rule "applyOnElementary" (formula "19") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "0,0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                        (rule "applyOnPV" (formula "19") (term "1,0,0,1,0"))
                        (rule "inEqSimp_contradInEq0" (formula "19") (term "0,0,1,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0,1,0"))
                        (rule "add_literals" (formula "19") (term "1,1,0,0,0,0,1,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "19") (term "0,0,0,1,0"))
                        (rule "concrete_and_2" (formula "19") (term "0,0,1,0"))
                        (rule "ifthenelse_false" (formula "19") (term "0,1,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,1,1") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "17"))
                        (rule "concrete_or_2" (formula "7"))
                        (rule "ifElseSplit" (formula "18"))
                        (branch "if x_3 true"
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "ifElseSkipThen" (formula "19") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "ifthenelse_concrete4" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "replace_known_right" (formula "15") (term "0,0,0") (ifseqformula "16"))
                           (rule "concrete_and_2" (formula "15") (term "0,0"))
                           (rule "concrete_and_2" (formula "15") (term "0"))
                           (rule "concrete_impl_2" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "inEqSimp_geqRight" (formula "15"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "assignment" (formula "18") (term "1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1"))
                           (rule "blockReturn" (formula "18") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                           (rule "concrete_or_1" (formula "16") (term "0"))
                           (rule "concrete_and_1" (formula "16"))
                           (rule "allRight" (formula "16") (inst "sk=i_0_0"))
                           (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,1"))
                           (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0"))
                           (rule "methodCallReturn" (formula "18") (term "1"))
                           (rule "assignment" (formula "18") (term "1"))
                           (rule "sequentialToParallel2" (formula "18"))
                           (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "emptyModality" (formula "18") (term "1"))
                           (rule "notRight" (formula "18"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_3 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "ifthenelse_concrete4" (formula "16"))
                           (rule "boolean_not_equal_2" (formula "16") (term "1"))
                           (rule "concrete_or_4" (formula "16"))
                           (rule "notRight" (formula "16"))
                           (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "16") (term "0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "17") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "17") (term "0,0"))
                           (rule "concrete_or_2" (formula "17") (term "0"))
                           (rule "less_than_comparison_simple" (formula "19") (term "1"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                           (rule "applyOnElementary" (formula "19") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                           (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,1,0"))
                           (rule "blockEmpty" (formula "19") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,1,0"))
                           (rule "ifElseSplit" (formula "21"))
                           (branch "if x_5 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "22"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_5 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "22"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "17"))
                              (rule "applyOnPV" (formula "17") (term "0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1"))
                              (rule "boolean_not_equal_2" (formula "17"))
                              (rule "false_right" (formula "17"))
                              (rule "eval_order_array_access1" (formula "21") (term "1") (inst "#v0=x_arr"))
                              (rule "variableDeclarationAssign" (formula "21") (term "1"))
                              (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_arr_1"))
                              (rule "assignment_read_attribute_this" (formula "21") (term "1"))
                              (rule "sequentialToParallel2" (formula "21"))
                              (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                              (rule "eval_order_array_access2" (formula "21") (term "1") (inst "#v0=x") (inst "#ar1=x_arr_2"))
                              (rule "variableDeclarationAssign" (formula "21") (term "1"))
                              (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_arr_2"))
                              (rule "assignment" (formula "21") (term "1"))
                              (rule "sequentialToParallel2" (formula "21"))
                              (rule "simplifyUpdate2" (formula "21"))
                              (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                              (rule "applyOnElementary" (formula "21") (term "1,0"))
                              (rule "applyOnPV" (formula "21") (term "0,1,0"))
                              (rule "variableDeclarationAssign" (formula "21") (term "1"))
                              (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_8"))
                              (rule "assignment_read_attribute_this" (formula "21") (term "1"))
                              (rule "sequentialToParallel2" (formula "21"))
                              (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                              (rule "assignment_to_primitive_array_component" (formula "21") (term "1"))
                              (branch "Normal Execution (x_arr_2 != null)"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "2"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "24"))
                                 (rule "simplifyUpdate2" (formula "24"))
                                 (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                 (rule "applyOnElementary" (formula "24") (term "1,0"))
                                 (rule "applyOnRigidFormula" (formula "2"))
                                 (rule "simplifyUpdate1" (formula "2") (term "1"))
                                 (rule "applyOnPV" (formula "2") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "0"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "18"))
                                 (rule "simplifyUpdate1" (formula "18") (term "1"))
                                 (rule "applyOnPV" (formula "18") (term "0"))
                                 (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "22") (term "3,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "22") (term "0,0,1,0"))
                                 (rule "applyOnPV" (formula "22") (term "3,0,1,0"))
                                 (rule "applyOnPV" (formula "22") (term "1,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0,1"))
                                 (rule "applyOnRigidTerm" (formula "22") (term "2,0,1,0"))
                                 (rule "applyOnPV" (formula "22") (term "0,2,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "postincrement_attribute" (formula "21") (term "1") (inst "#v=n"))
                                 (rule "variableDeclarationAssign" (formula "21") (term "1"))
                                 (rule "variableDeclaration" (formula "21") (term "1") (newnames "n"))
                                 (rule "assignment" (formula "21") (term "1"))
                                 (rule "sequentialToParallel2" (formula "21"))
                                 (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                 (rule "eval_order_access4" (formula "21") (term "1") (inst "#v1=x") (inst "#v0=n_1"))
                                 (rule "variableDeclarationAssign" (formula "21") (term "1"))
                                 (rule "variableDeclaration" (formula "21") (term "1") (newnames "n_1"))
                                 (rule "assignment" (formula "21") (term "1"))
                                 (rule "sequentialToParallel2" (formula "21"))
                                 (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                 (rule "applyOnElementary" (formula "21") (term "1,0"))
                                 (rule "applyOnPV" (formula "21") (term "0,1,0"))
                                 (rule "variableDeclarationAssign" (formula "21") (term "1"))
                                 (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_9"))
                                 (rule "compound_int_cast_expression" (formula "21") (term "1") (inst "#v=x_10"))
                                 (rule "variableDeclarationAssign" (formula "21") (term "1"))
                                 (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_10"))
                                 (rule "remove_parentheses_right" (formula "21") (term "1"))
                                 (rule "compound_addition_1" (formula "21") (term "1") (inst "#v=x_11"))
                                 (rule "variableDeclarationAssign" (formula "21") (term "1"))
                                 (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_11"))
                                 (rule "assignment_read_attribute" (formula "21") (term "1"))
                                 (branch "Normal Execution (n != null)"
                                    (rule "simplifyUpdate2" (formula "21"))
                                    (rule "sequentialToParallel2" (formula "22"))
                                    (rule "simplifyUpdate2" (formula "22"))
                                    (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                    (rule "applyOnElementary" (formula "22") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "21"))
                                    (rule "simplifyUpdate1" (formula "21") (term "1"))
                                    (rule "applyOnPV" (formula "21") (term "0"))
                                    (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "21") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "21") (term "1,0,1,0"))
                                    (rule "applyOnPV" (formula "21") (term "0,0,1,0"))
                                    (rule "dismissNonSelectedField" (formula "21") (term "0,1,0"))
                                    (rule "assignmentAdditionInt" (formula "21") (term "1"))
                                    (rule "translateJavaAddInt" (formula "21") (term "0,0,1"))
                                    (rule "sequentialToParallel2" (formula "21"))
                                    (rule "simplifyUpdate2" (formula "21"))
                                    (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                    (rule "applyOnElementary" (formula "21") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "21") (term "1,0,1,0"))
                                    (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                    (rule "applyOnPV" (formula "21") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "21") (term "0,0,1,0"))
                                    (rule "widening_identity_cast_5" (formula "21") (term "1"))
                                    (rule "assignment" (formula "21") (term "1"))
                                    (rule "sequentialToParallel2" (formula "21"))
                                    (rule "simplifyUpdate2" (formula "21"))
                                    (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                    (rule "applyOnElementary" (formula "21") (term "1,0"))
                                    (rule "applyOnPV" (formula "21") (term "0,1,0"))
                                    (rule "assignment_write_attribute" (formula "21") (term "1"))
                                    (branch "Normal Execution (n_1 != null)"
                                       (rule "simplifyUpdate2" (formula "21"))
                                       (rule "sequentialToParallel2" (formula "22"))
                                       (rule "simplifyUpdate2" (formula "22"))
                                       (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                       (rule "applyOnElementary" (formula "22") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "21"))
                                       (rule "simplifyUpdate1" (formula "21") (term "1"))
                                       (rule "applyOnPV" (formula "21") (term "0"))
                                       (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "21") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "21") (term "3,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                       (rule "applyOnPV" (formula "21") (term "0,0,1,0"))
                                       (rule "applyOnPV" (formula "21") (term "1,0,1,0"))
                                       (rule "applyOnPV" (formula "21") (term "3,0,1,0"))
                                       (rule "ifElseSplit" (formula "19"))
                                       (branch "if x_2 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "20"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "ifthenelse_concrete3" (formula "1"))
                                          (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                          (rule "concrete_or_4" (formula "1"))
                                          (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                          (rule "concrete_and_1" (formula "17") (term "0"))
                                          (rule "eq_imp" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "blockReturn" (formula "19") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "17") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "17") (term "0,0"))
                                          (rule "concrete_and_2" (formula "17") (term "0"))
                                          (rule "concrete_and_2" (formula "17"))
                                          (rule "false_right" (formula "17"))
                                          (rule "methodCallReturn" (formula "18") (term "1"))
                                          (rule "assignment" (formula "18") (term "1"))
                                          (rule "sequentialToParallel2" (formula "18"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                                          (rule "methodCallEmpty" (formula "18") (term "1"))
                                          (rule "simplifyUpdate2" (formula "18"))
                                          (rule "emptyModality" (formula "18") (term "1"))
                                          (rule "notRight" (formula "18"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "boolean_equal" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=x"))
                                          (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_12"))
                                          (rule "compound_inequality_comparison_1" (formula "19") (term "1") (inst "#v0=t"))
                                          (rule "variableDeclarationAssign" (formula "19") (term "1"))
                                          (rule "variableDeclaration" (formula "19") (term "1") (newnames "t"))
                                          (rule "assignment_read_attribute_this" (formula "19") (term "1"))
                                          (rule "sequentialToParallel2" (formula "19"))
                                          (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                          (rule "applyOnElementary" (formula "19") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                                          (rule "applyOnPV" (formula "19") (term "0,0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "19") (term "0,1,0"))
                                          (rule "dismissNonSelectedField" (formula "19") (term "0,1,0"))
                                          (rule "inequality_comparison_simple" (formula "19") (term "1"))
                                          (rule "sequentialToParallel2" (formula "19"))
                                          (rule "simplifyUpdate2" (formula "19"))
                                          (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                          (rule "applyOnElementary" (formula "19") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                                          (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                                          (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                                          (rule "ifSplit" (formula "19"))
                                          (branch "if x_12 true"
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "20"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "ifthenelse_concrete4" (formula "1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                             (rule "concrete_or_4" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "eval_order_access1" (formula "20") (term "1") (inst "#v0=t"))
                                             (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                             (rule "variableDeclaration" (formula "20") (term "1") (newnames "t_1"))
                                             (rule "assignment_read_attribute_this" (formula "20") (term "1"))
                                             (rule "sequentialToParallel2" (formula "20"))
                                             (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                                             (rule "applyOnElementary" (formula "20") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "0,1,0"))
                                             (rule "assignment_write_attribute" (formula "20") (term "1"))
                                             (branch "Normal Execution (t_1 != null)"
                                                (rule "simplifyUpdate2" (formula "20"))
                                                (rule "sequentialToParallel2" (formula "21"))
                                                (rule "simplifyUpdate2" (formula "21"))
                                                (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                (rule "applyOnRigidFormula" (formula "20"))
                                                (rule "applyOnPV" (formula "20") (term "0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "3,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,0,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "1,0,1,0"))
                                                (rule "tryEmpty" (formula "20") (term "1"))
                                                (rule "methodCallEmpty" (formula "20") (term "1"))
                                                (rule "tryEmpty" (formula "20") (term "1"))
                                                (rule "emptyModality" (formula "20") (term "1"))
                                                (rule "applyOnRigidFormula" (formula "20"))
                                                (rule "simplifyUpdate2" (formula "20") (term "1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0"))
                                                (rule "simplifyUpdate2" (formula "20") (term "1,0"))
                                                (rule "simplifyUpdate2" (formula "20") (term "0,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,0"))
                                                (rule "eqClose" (formula "20") (term "1,0"))
                                                (rule "concrete_and_3" (formula "20") (term "0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0,1"))
                                                (rule "simplifyUpdate2" (formula "20") (term "0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,0"))
                                                (rule "simplifyUpdate2" (formula "20") (term "1,1,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,1"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "0,0,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "0,0,0,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,0,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,0,0,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,0,0,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,1,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,1,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,1,1,0,0,1"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,1,0,0,1"))
                                                (rule "eqSymm" (formula "20") (term "1,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,1"))
                                                (rule "simplifyUpdate2" (formula "20") (term "0,1,0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,1"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,0,0,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,0,0,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "2,0,0,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "0,1,0,1,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "0,0,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,0,0,1,0"))
                                                (rule "polySimp_homoEq" (formula "20") (term "0,1,0"))
                                                (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,1,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,1,1,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,1,1,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,1,1,0,0,1"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,1,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,1,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,1,0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,1"))
                                                (rule "simplifyUpdate2" (formula "20") (term "1,1,0,0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,1"))
                                                (rule "simplifyUpdate2" (formula "20") (term "1,0,0,0,0,0,1"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "0,2,0,0,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,0,2,0,0,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,2,0,0,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,0,2,0,0,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,0,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,1,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0,1,1,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,1,1,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,1,1,0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,1,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0,0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,1"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,1,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "0,1,0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,1,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,0,1,0,1,1,0"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,0,0,1,1,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "0,0,1,1,0,0,0,1"))
                                                (rule "applyOnPV" (formula "20") (term "0,0,0,1,1,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,1,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,0,0,1,1,0,0,0,1"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,0,0,0,0,1"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,0,1,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0,0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,0,0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "0,0,0,0,0,0,0,0,1"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0,1,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,0,1,0,1,1,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "0,0,0,0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,0,0,0,1,1,0"))
                                                (rule "applyOnPV" (formula "20") (term "0,0,0,0,0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,0,0,0,0,1,1,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,0,0,0,0,1"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "1,0,0,0,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,0,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,0,0,0,0,0,1"))
                                                (rule "applyOnPV" (formula "20") (term "0,1,0,0,0,0,0,0,0,1"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,1,1,0"))
                                                (rule "applyOnRigidTerm" (formula "20") (term "0,1,1,0,0,0,0,0,0,1"))
                                                (rule "applyOnPV" (formula "20") (term "0,0,1,1,0,0,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "1,0,1,1,0,0,0,0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "20") (term "2,0,1,1,0,0,0,0,0,0,1"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,1,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,1,1,0"))
                                                (rule "replace_known_right" (formula "20") (term "0,0,0,1,1,0") (ifseqformula "17"))
                                                (rule "concrete_not_2" (formula "20") (term "0,0,1,1,0"))
                                                (rule "concrete_impl_1" (formula "20") (term "0,1,1,0"))
                                                (rule "polySimp_sepPosMonomial" (formula "20") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,0"))
                                                (rule "pullOutSelect" (formula "20") (term "0,0,0") (inst "selectSK=arr_0"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                                (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                                (rule "equalUnique" (formula "1") (term "0,0,0"))
                                                (rule "eqClose" (formula "1") (term "0,0,0"))
                                                (rule "concrete_and_1" (formula "1") (term "0,0"))
                                                (rule "equalUnique" (formula "1") (term "0,0,0"))
                                                (rule "concrete_not_2" (formula "1") (term "0,0"))
                                                (rule "ifthenelse_true" (formula "1") (term "0"))
                                                (rule "castDel" (formula "1") (term "0"))
                                                (rule "applyEqReverse" (formula "21") (term "0,0,0") (ifseqformula "1"))
                                                (rule "eqClose" (formula "21") (term "0,0"))
                                                (rule "concrete_and_1" (formula "21") (term "0"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "pullOutSelect" (formula "20") (term "0,0,0") (inst "selectSK=NumericTextBox_cursorPosition_0"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                (rule "eqClose" (formula "1") (term "1,0,0"))
                                                (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                (rule "eqClose" (formula "1") (term "0,0"))
                                                (rule "ifthenelse_true" (formula "1") (term "0"))
                                                (rule "castDel" (formula "1") (term "0"))
                                                (rule "applyEqReverse" (formula "21") (term "0,0,0") (ifseqformula "1"))
                                                (rule "eqClose" (formula "21") (term "0,0"))
                                                (rule "concrete_and_1" (formula "21") (term "0"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "pullOutSelect" (formula "20") (term "0,0,0") (inst "selectSK=TextBoxRenderer_contentChanged_0"))
                                                (rule "simplifySelectOfStore" (formula "1"))
                                                (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                (rule "eqClose" (formula "1") (term "1,0,0"))
                                                (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                (rule "eqClose" (formula "1") (term "0,0"))
                                                (rule "ifthenelse_true" (formula "1") (term "0"))
                                                (rule "castDel" (formula "1") (term "0"))
                                                (rule "applyEqReverse" (formula "21") (term "0,0,0") (ifseqformula "1"))
                                                (rule "boolean_equal" (formula "21") (term "0,0"))
                                                (rule "concrete_and_1" (formula "21") (term "0"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "Class_invariant_axiom_for_NumericTextBox" (formula "20") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_5") (ifseqformula "6"))
                                                (branch "Use Axiom"
                                                   (rule "inInt" (formula "20") (term "1,0,0,1,0"))
                                                   (rule "concrete_and_3" (formula "20") (term "0,0,1,0"))
                                                   (rule "inInt" (formula "20") (term "1,0,0,1,0,0"))
                                                   (rule "concrete_and_3" (formula "20") (term "0,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,1,0,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,1,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,0,1,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet0000001101000000_2" (formula "20") (term "0,0,1,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet0000001101000000_3" (formula "20") (term "0,0,1,0,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,0,0,0"))
                                                   (rule "replaceKnownSelect_taclet0000001101000000_2" (formula "20") (term "0,1,1,0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet0000001101000000_3" (formula "20") (term "0,1,1,0,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,1,0,0,1,0"))
                                                   (rule "replaceKnownSelect_taclet0000001101000000_2" (formula "20") (term "1,1,0,0,1,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet0000001101000000_3" (formula "20") (term "1,1,0,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,0,0,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,1,0,0,1,0,0"))
                                                   (rule "replaceKnownSelect_taclet0000001101000000_2" (formula "20") (term "1,1,0,0,1,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet0000001101000000_3" (formula "20") (term "1,1,0,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,1,0,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,1,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,0,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,0,0,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,1,0,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,0,0"))
                                                   (rule "replace_known_right" (formula "20") (term "0,0,0,0,0") (ifseqformula "18"))
                                                   (rule "concrete_not_2" (formula "20") (term "0,0,0,0"))
                                                   (rule "concrete_and_1" (formula "20") (term "0,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,1,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,0,0,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0,0"))
                                                   (rule "dismissNonSelectedField" (formula "20") (term "0,0,1,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,1,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0,1,0,0"))
                                                   (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,0,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "20") (term "1,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,0,1,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0,0"))
                                                   (rule "polySimp_addComm0" (formula "20") (term "0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,1,0,1,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "1,0,1,0,1,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,0"))
                                                   (rule "replace_known_left" (formula "20") (term "1,0,0,0") (ifseqformula "10"))
                                                   (rule "concrete_and_3" (formula "20") (term "0,0,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "20") (term "0,0,0") (ifseqformula "12"))
                                                   (rule "leq_literals" (formula "20") (term "0,0,0,0"))
                                                   (rule "concrete_or_1" (formula "20") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "20") (term "0,0"))
                                                   (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
                                                   (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                                   (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
                                                   (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,1,0"))
                                                   (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,1,0"))
                                                   (rule "add_zero_left" (formula "20") (term "0,0,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
                                                   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
                                                   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                                   (rule "andRight" (formula "20"))
                                                   (branch "Case 1"
                                                      (rule "andRight" (formula "20"))
                                                      (branch "Case 1"
                                                         (rule "allRight" (formula "20") (inst "sk=i_0_0"))
                                                         (rule "orRight" (formula "20"))
                                                         (rule "orRight" (formula "20"))
                                                         (rule "inEqSimp_leqRight" (formula "20"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_geqRight" (formula "21"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                         (rule "pullOutSelect" (formula "22") (term "0,1") (inst "selectSK=arr_1"))
                                                         (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "1"))
                                                         (rule "simplifySelectOfStore" (formula "1"))
                                                         (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                                         (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                                         (rule "equalUnique" (formula "1") (term "0,0,0"))
                                                         (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                         (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                         (rule "castDel" (formula "1") (term "1,0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                         (rule "mul_literals" (formula "2") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                         (rule "commute_and" (formula "24"))
                                                         (rule "ifthenelse_split" (formula "1") (term "0"))
                                                         (branch "self.cursorPosition = i_0_0 TRUE"
                                                            (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "2"))
                                                            (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "5"))
                                                            (rule "concrete_and_3" (formula "24"))
                                                            (rule "close" (formula "24") (ifseqformula "6"))
                                                         )
                                                         (branch "self.cursorPosition = i_0_0 FALSE"
                                                            (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "1"))
                                                            (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "1"))
                                                            (rule "hideAuxiliaryEq" (formula "1"))
                                                            (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "20"))
                                                            (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "2"))
                                                            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0"))
                                                            (rule "add_literals" (formula "20") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "20") (term "1,0,0"))
                                                            (rule "add_zero_right" (formula "20") (term "0,0"))
                                                            (rule "leq_literals" (formula "20") (term "0"))
                                                            (rule "concrete_and_2" (formula "20"))
                                                            (rule "false_right" (formula "20"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                            (rule "mul_literals" (formula "2") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                                                            (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                                            (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                            (rule "add_zero_right" (formula "1") (term "0,0"))
                                                            (rule "qeq_literals" (formula "1") (term "0"))
                                                            (rule "concrete_or_1" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                                            (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "17") (term "0,0,0"))
                                                            (rule "concrete_and_2" (formula "17") (term "0,0"))
                                                            (rule "concrete_or_2" (formula "17") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                                                            (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                                                            (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                                                            (rule "add_zero_right" (formula "17") (term "0,0,0"))
                                                            (rule "leq_literals" (formula "17") (term "0,0"))
                                                            (rule "concrete_and_2" (formula "17") (term "0"))
                                                            (rule "concrete_or_2" (formula "17"))
                                                            (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "17"))
                                                            (rule "concrete_and_3" (formula "24"))
                                                            (rule "inEqSimp_geqRight" (formula "24"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "mul_literals" (formula "1") (term "1"))
                                                            (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "1"))
                                                            (rule "leq_literals" (formula "18") (term "0"))
                                                            (rule "concrete_or_1" (formula "18"))
                                                            (rule "true_left" (formula "18"))
                                                            (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                                            (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "17") (term "1") (ifseqformula "1"))
                                                            (rule "qeq_literals" (formula "17") (term "0,1"))
                                                            (rule "concrete_and_2" (formula "17") (term "1"))
                                                            (rule "concrete_or_4" (formula "17"))
                                                            (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "3"))
                                                            (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                                            (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "17") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "17") (term "0,1"))
                                                            (rule "concrete_and_2" (formula "17") (term "1"))
                                                            (rule "concrete_or_4" (formula "17"))
                                                            (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "4"))
                                                            (rule "qeq_literals" (formula "17") (term "0"))
                                                            (rule "concrete_and_2" (formula "17"))
                                                            (rule "closeFalse" (formula "17"))
                                                         )
                                                      )
                                                      (branch "Case 2"
                                                         (rule "allRight" (formula "20") (inst "sk=i_0"))
                                                         (rule "orRight" (formula "20"))
                                                         (rule "orRight" (formula "20"))
                                                         (rule "inEqSimp_leqRight" (formula "21"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                         (rule "inEqSimp_geqRight" (formula "21"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                         (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=arr_1"))
                                                         (rule "simplifySelectOfStore" (formula "1"))
                                                         (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                                         (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                                         (rule "equalUnique" (formula "1") (term "0,0,0"))
                                                         (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                         (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                         (rule "castDel" (formula "1") (term "1,0"))
                                                         (rule "eqSymm" (formula "23"))
                                                         (rule "inEqSimp_contradEq3" (formula "1") (term "0,0") (ifseqformula "3"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                                         (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                                         (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                                         (rule "concrete_and_2" (formula "1") (term "0,0"))
                                                         (rule "ifthenelse_false" (formula "1") (term "0"))
                                                         (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "eqSymm" (formula "22"))
                                                         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "2"))
                                                         (rule "mul_literals" (formula "14") (term "0,0"))
                                                         (rule "add_zero_left" (formula "14") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                         (rule "mul_literals" (formula "14") (term "1"))
                                                         (rule "allLeft" (formula "18") (inst "t=i_0"))
                                                         (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "24"))
                                                         (rule "concrete_or_4" (formula "18"))
                                                         (rule "inEqSimp_commuteGeq" (formula "18") (term "0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                                                         (rule "polySimp_addComm1" (formula "18") (term "0,1"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1"))
                                                         (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
                                                         (rule "polySimp_rightDist" (formula "18") (term "1,1"))
                                                         (rule "mul_literals" (formula "18") (term "0,1,1"))
                                                         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
                                                         (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "18") (term "1") (ifseqformula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                                         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                                         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                                                         (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                                                         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1"))
                                                         (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1"))
                                                         (rule "add_literals" (formula "18") (term "0,0,0,0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                                         (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "18") (term "0,1"))
                                                         (rule "concrete_and_2" (formula "18") (term "1"))
                                                         (rule "concrete_or_4" (formula "18"))
                                                         (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                                                         (rule "andLeft" (formula "18"))
                                                         (rule "inEqSimp_homoInEq1" (formula "18"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                                         (rule "add_literals" (formula "18") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "18") (term "1,0"))
                                                         (rule "add_zero_right" (formula "18") (term "0"))
                                                         (rule "leq_literals" (formula "18"))
                                                         (rule "closeFalse" (formula "18"))
                                                      )
                                                   )
                                                   (branch "Case 2"
                                                      (rule "allRight" (formula "20") (inst "sk=f_0"))
                                                      (rule "allRight" (formula "20") (inst "sk=o_0"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                      (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "25"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
                                                      (rule "ifthenelse_false" (formula "1") (term "0"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                      (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                                                      (rule "ifthenelse_false" (formula "1") (term "0"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                      (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "21"))
                                                      (rule "ifthenelse_false" (formula "1") (term "0"))
                                                      (rule "close" (formula "25") (ifseqformula "1"))
                                                   )
                                                )
                                                (branch "Show Axiom Satisfiability"
                                                   (rule "concrete_eq_2" (formula "20") (term "1"))
                                                   (rule "concrete_eq_1" (formula "20") (term "0"))
                                                   (rule "neq_or" (formula "20"))
                                                   (rule "closeTrue" (formula "20"))
                                                )
                                             )
                                             (branch "Null Reference (t_1 = null)"
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "21"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                (rule "close" (formula "18") (ifseqformula "1"))
                                             )
                                          )
                                          (branch "if x_12 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "20"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "17"))
                                             (rule "simplifyUpdate1" (formula "17") (term "1"))
                                             (rule "applyOnPV" (formula "17") (term "0"))
                                             (rule "ifthenelse_concrete4" (formula "17"))
                                             (rule "boolean_not_equal_2" (formula "17") (term "1"))
                                             (rule "concrete_or_4" (formula "17"))
                                             (rule "notRight" (formula "17"))
                                             (rule "tryEmpty" (formula "20") (term "1"))
                                             (rule "methodCallEmpty" (formula "20") (term "1"))
                                             (rule "tryEmpty" (formula "20") (term "1"))
                                             (rule "emptyModality" (formula "20") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "20"))
                                             (rule "simplifyUpdate2" (formula "20") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0"))
                                             (rule "simplifyUpdate2" (formula "20") (term "1,0"))
                                             (rule "simplifyUpdate2" (formula "20") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,0"))
                                             (rule "eqClose" (formula "20") (term "1,0"))
                                             (rule "concrete_and_3" (formula "20") (term "0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0,1"))
                                             (rule "simplifyUpdate2" (formula "20") (term "0,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,0"))
                                             (rule "simplifyUpdate2" (formula "20") (term "1,1,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,1"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,0,0,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,0,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,1,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0,1"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,1,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,0,1"))
                                             (rule "eqSymm" (formula "20") (term "1,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,1"))
                                             (rule "simplifyUpdate2" (formula "20") (term "0,1,0,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,1"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "2,0,0,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "1,0,0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,1,0,0,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,1,0,1,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,0,1,0"))
                                             (rule "polySimp_homoEq" (formula "20") (term "0,1,0"))
                                             (rule "polySimp_addComm1" (formula "20") (term "0,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,1,1,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,1,1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,1,1,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,1,1,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0,1"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,1,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,1,0,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,1"))
                                             (rule "simplifyUpdate2" (formula "20") (term "1,0,0,0,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,1"))
                                             (rule "simplifyUpdate2" (formula "20") (term "1,1,0,0,0,0,1"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,2,0,0,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,2,0,0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,2,0,0,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,2,0,0,0"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "1,0,0,1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,1,0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,0,1,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,1,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0,1,1,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,1,1,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,1,1,0,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,1,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,0,1,0,0,0,0,1"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "0,0,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,1,0,1,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,1,1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,1,0,1,1,0"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,1,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,0,0,1,1,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,0,1,1,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,1,0,0,0,1"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,0,1,1,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,0,1,1,0,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,0,0,0,0,0,0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,0,0,0,0,1"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0,0,0,0,1"))
                                             (rule "applyOnPV" (formula "20") (term "0,1,0,1,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0,0,0,0,1"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0,1,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0,1,1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,1,0,1,0,1,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,0,1,1,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,0,0,0,1,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,0,0,0,1,1,0"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,0,0,0,1,1,0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,0,0,0,1,1,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "1,0,0,0,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,0,0,0,0,0,1"))
                                             (rule "applyOnPV" (formula "20") (term "0,1,0,0,0,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,0,0,0,0,0,1"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,0,0,0,0,1"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,1,0"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,1,1,0"))
                                             (rule "applyOnRigidTerm" (formula "20") (term "0,1,1,0,0,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1,0,1,1,0,0,0,0,0,0,1"))
                                             (rule "applyOnPV" (formula "20") (term "0,0,1,1,0,0,0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "20") (term "2,0,1,1,0,0,0,0,0,0,1"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,1,0"))
                                             (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,1,1,0"))
                                             (rule "replace_known_left" (formula "20") (term "0,0,0,1,1,0") (ifseqformula "1"))
                                             (rule "concrete_not_1" (formula "20") (term "0,0,1,1,0"))
                                             (rule "concrete_impl_2" (formula "20") (term "0,1,1,0"))
                                             (rule "concrete_and_1" (formula "20") (term "1,1,0"))
                                             (rule "applyEq" (formula "20") (term "1,0,1,0,0,0,0,1") (ifseqformula "1"))
                                             (rule "polySimp_sepPosMonomial" (formula "20") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,0"))
                                             (rule "pullOutSelect" (formula "20") (term "0,0,0") (inst "selectSK=arr_0"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (rule "eqClose" (formula "1") (term "1,0,0,0"))
                                             (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                             (rule "eqClose" (formula "1") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0"))
                                             (rule "equalUnique" (formula "1") (term "0,0,0"))
                                             (rule "concrete_not_2" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_true" (formula "1") (term "0"))
                                             (rule "castDel" (formula "1") (term "0"))
                                             (rule "applyEqReverse" (formula "21") (term "0,0,0") (ifseqformula "1"))
                                             (rule "eqClose" (formula "21") (term "0,0"))
                                             (rule "concrete_and_1" (formula "21") (term "0"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "20") (term "0,0,0") (inst "selectSK=NumericTextBox_cursorPosition_0"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "1") (term "0,0"))
                                             (rule "eqClose" (formula "1") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0"))
                                             (rule "eqClose" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_true" (formula "1") (term "0"))
                                             (rule "castDel" (formula "1") (term "0"))
                                             (rule "applyEqReverse" (formula "21") (term "0,0,0") (ifseqformula "1"))
                                             (rule "eqClose" (formula "21") (term "0,0"))
                                             (rule "concrete_and_1" (formula "21") (term "0"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "Class_invariant_axiom_for_NumericTextBox" (formula "20") (term "0") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_5") (ifseqformula "7"))
                                             (branch "Use Axiom"
                                                (rule "inInt" (formula "20") (term "1,0,0,1,0"))
                                                (rule "concrete_and_3" (formula "20") (term "0,0,1,0"))
                                                (rule "replaceKnownSelect_taclet100001101000000_2" (formula "20") (term "0,1,1,0,0,0"))
                                                (rule "replaceKnownSelect_taclet100001101000000_2" (formula "20") (term "0,0,1,0,0,0"))
                                                (rule "inInt" (formula "20") (term "1,0,0,1,0,0"))
                                                (rule "concrete_and_3" (formula "20") (term "0,0,1,0,0"))
                                                (rule "replaceKnownSelect_taclet100001101000000_2" (formula "20") (term "1,1,0,0,1,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet100001101000000_3" (formula "20") (term "0,1,1,0,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet100001101000000_3" (formula "20") (term "0,0,1,0,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet100001101000000_3" (formula "20") (term "1,1,0,0,1,0"))
                                                (rule "replaceKnownSelect_taclet100001101000000_2" (formula "20") (term "1,1,0,0,1,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet100001101000000_3" (formula "20") (term "1,1,0,0,1,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,1,0,1,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,1,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,1,0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,0,1,0,1,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,1,0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,1,0,0,0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,0,1,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,1,1,1,0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,1,0,1,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,1,0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,0,0,0,0,0"))
                                                (rule "replace_known_right" (formula "20") (term "0,0,0,0,0") (ifseqformula "18"))
                                                (rule "concrete_not_2" (formula "20") (term "0,0,0,0"))
                                                (rule "concrete_and_1" (formula "20") (term "0,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "0,1,0,0,0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,1,0,1,0,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,1,0,1,0"))
                                                (rule "dismissNonSelectedField" (formula "20") (term "1,0,0,1,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,0,1,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0,1,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "20") (term "1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "20") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,1,0,1,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,1,0,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "0,1,0,0,0"))
                                                (rule "replace_known_left" (formula "20") (term "1,0,0,0") (ifseqformula "11"))
                                                (rule "concrete_and_3" (formula "20") (term "0,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "20") (term "0,0,0") (ifseqformula "13"))
                                                (rule "leq_literals" (formula "20") (term "0,0,0,0"))
                                                (rule "concrete_or_1" (formula "20") (term "0,0,0"))
                                                (rule "concrete_and_1" (formula "20") (term "0,0"))
                                                (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
                                                (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                                (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,1,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,1,0"))
                                                (rule "add_zero_left" (formula "20") (term "0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0"))
                                                (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                                                (rule "andRight" (formula "20"))
                                                (branch "Case 1"
                                                   (rule "andRight" (formula "20"))
                                                   (branch "Case 1"
                                                      (rule "allRight" (formula "20") (inst "sk=i_0_0"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "inEqSimp_leqRight" (formula "20"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_geqRight" (formula "21"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "pullOutSelect" (formula "22") (term "0,1") (inst "selectSK=arr_1"))
                                                      (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                                      (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                                      (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                                      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                      (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                      (rule "commute_and" (formula "24"))
                                                      (rule "ifthenelse_split" (formula "1") (term "0"))
                                                      (branch "self.cursorPosition = i_0_0 TRUE"
                                                         (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "2"))
                                                         (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "6"))
                                                         (rule "concrete_and_3" (formula "24"))
                                                         (rule "close" (formula "24") (ifseqformula "7"))
                                                      )
                                                      (branch "self.cursorPosition = i_0_0 FALSE"
                                                         (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "1"))
                                                         (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "21"))
                                                         (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "2"))
                                                         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                                                         (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "21") (term "0,0"))
                                                         (rule "leq_literals" (formula "21") (term "0"))
                                                         (rule "concrete_and_2" (formula "21"))
                                                         (rule "false_right" (formula "21"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                         (rule "mul_literals" (formula "2") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                                                         (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "1") (term "0,0"))
                                                         (rule "qeq_literals" (formula "1") (term "0"))
                                                         (rule "concrete_or_1" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                                         (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "3"))
                                                         (rule "qeq_literals" (formula "17") (term "0,0,0"))
                                                         (rule "concrete_and_2" (formula "17") (term "0,0"))
                                                         (rule "concrete_or_2" (formula "17") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                                                         (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                                                         (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                                                         (rule "add_zero_right" (formula "17") (term "0,0,0"))
                                                         (rule "leq_literals" (formula "17") (term "0,0"))
                                                         (rule "concrete_and_2" (formula "17") (term "0"))
                                                         (rule "concrete_or_2" (formula "17"))
                                                         (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "17"))
                                                         (rule "concrete_and_1" (formula "24"))
                                                         (rule "inEqSimp_leqRight" (formula "24"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                         (rule "mul_literals" (formula "1") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "1"))
                                                         (rule "leq_literals" (formula "18") (term "0"))
                                                         (rule "concrete_or_1" (formula "18"))
                                                         (rule "true_left" (formula "18"))
                                                         (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                                                         (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "1"))
                                                         (rule "qeq_literals" (formula "19") (term "0,1"))
                                                         (rule "concrete_and_2" (formula "19") (term "1"))
                                                         (rule "concrete_or_4" (formula "19"))
                                                         (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                                         (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "19") (term "0,1"))
                                                         (rule "concrete_and_2" (formula "19") (term "1"))
                                                         (rule "concrete_or_4" (formula "19"))
                                                         (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "4"))
                                                         (rule "qeq_literals" (formula "19") (term "0"))
                                                         (rule "concrete_and_2" (formula "19"))
                                                         (rule "closeFalse" (formula "19"))
                                                      )
                                                   )
                                                   (branch "Case 2"
                                                      (rule "allRight" (formula "20") (inst "sk=i_0"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "orRight" (formula "20"))
                                                      (rule "inEqSimp_geqRight" (formula "20"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "21"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=arr_1"))
                                                      (rule "simplifySelectOfStore" (formula "1"))
                                                      (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                                      (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                                      (rule "equalUnique" (formula "1") (term "0,0,0"))
                                                      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                      (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                      (rule "castDel" (formula "1") (term "1,0"))
                                                      (rule "eqSymm" (formula "23"))
                                                      (rule "inEqSimp_contradEq3" (formula "1") (term "0,0") (ifseqformula "2"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                                      (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                                      (rule "concrete_and_2" (formula "1") (term "0,0"))
                                                      (rule "ifthenelse_false" (formula "1") (term "0"))
                                                      (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "eqSymm" (formula "22"))
                                                      (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                                                      (rule "mul_literals" (formula "15") (term "0,0"))
                                                      (rule "add_zero_left" (formula "15") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                      (rule "mul_literals" (formula "15") (term "1"))
                                                      (rule "allLeft" (formula "19") (inst "t=i_0"))
                                                      (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "24"))
                                                      (rule "concrete_or_4" (formula "19"))
                                                      (rule "inEqSimp_commuteGeq" (formula "19") (term "0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "19") (term "1"))
                                                      (rule "polySimp_addComm1" (formula "19") (term "0,1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1"))
                                                      (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
                                                      (rule "polySimp_rightDist" (formula "19") (term "1,1"))
                                                      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
                                                      (rule "mul_literals" (formula "19") (term "0,1,1"))
                                                      (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "19") (term "1") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                                      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                                      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                                                      (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                                                      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                                                      (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1"))
                                                      (rule "add_literals" (formula "19") (term "0,0,0,0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                                      (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "19") (term "0,1"))
                                                      (rule "concrete_and_2" (formula "19") (term "1"))
                                                      (rule "concrete_or_4" (formula "19"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "19"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_literals" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                )
                                                (branch "Case 2"
                                                   (rule "allRight" (formula "20") (inst "sk=f_0"))
                                                   (rule "allRight" (formula "20") (inst "sk=o_0"))
                                                   (rule "orRight" (formula "20"))
                                                   (rule "orRight" (formula "20"))
                                                   (rule "orRight" (formula "20"))
                                                   (rule "orRight" (formula "20"))
                                                   (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "castDel" (formula "1") (term "1,0"))
                                                   (rule "eqSymm" (formula "25"))
                                                   (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                   (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "1"))
                                                   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "1") (term "0,0"))
                                                   (rule "castDel" (formula "1") (term "1,0"))
                                                   (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "21"))
                                                   (rule "ifthenelse_false" (formula "1") (term "0"))
                                                   (rule "close" (formula "25") (ifseqformula "1"))
                                                )
                                             )
                                             (branch "Show Axiom Satisfiability"
                                                (rule "concrete_eq_1" (formula "20") (term "0"))
                                                (rule "concrete_eq_2" (formula "20") (term "1"))
                                                (rule "neq_or" (formula "20"))
                                                (rule "closeTrue" (formula "20"))
                                             )
                                          )
                                       )
                                       (branch "if x_2 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "20"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "17"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1"))
                                          (rule "applyOnPV" (formula "17") (term "0"))
                                          (rule "ifthenelse_concrete3" (formula "17"))
                                          (rule "boolean_not_equal_2" (formula "17") (term "1"))
                                          (rule "concrete_or_4" (formula "17"))
                                          (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "17"))
                                          (rule "concrete_and_2" (formula "16") (term "0"))
                                          (rule "concrete_impl_2" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "inEqSimp_leqRight" (formula "16"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "blockReturn" (formula "19") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
                                          (rule "concrete_and_1" (formula "17"))
                                          (rule "allRight" (formula "17") (inst "sk=i_0_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "2") (term "0"))
                                          (rule "concrete_or_1" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "methodCallReturn" (formula "18") (term "1"))
                                          (rule "assignment" (formula "18") (term "1"))
                                          (rule "sequentialToParallel2" (formula "18"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                                          (rule "methodCallEmpty" (formula "18") (term "1"))
                                          (rule "simplifyUpdate2" (formula "18"))
                                          (rule "emptyModality" (formula "18") (term "1"))
                                          (rule "notRight" (formula "18"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "Null Reference (n_1 = null)"
                                       (rule "simplifyUpdate2" (formula "22"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "close" (formula "21") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "Null Reference (n = null)"
                                    (rule "simplifyUpdate2" (formula "22"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "close" (formula "21") (ifseqformula "1"))
                                 )
                              )
                              (branch "Null Reference (x_arr_2 = null)"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "22"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "close" (formula "19") (ifseqformula "1"))
                              )
                              (branch "Index Out of Bounds (x_arr_2 != null, but x_8 Out of Bounds!)"
                                 (rule "simplifyUpdate2" (formula "22"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "18"))
                                 (rule "applyOnPV" (formula "18") (term "0"))
                                 (rule "simplifyUpdate1" (formula "18") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                                 (rule "applyOnPV" (formula "1") (term "1,0"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,1"))
                                 (rule "applyOnPV" (formula "1") (term "0,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                                 (rule "applyOnPV" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (rule "concrete_and_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                     )
                     (branch "Null Reference (x_arr = null)"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "20"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "close" (formula "17") (ifseqformula "1"))
                     )
                  )
               )
               (branch "Show Axiom Satisfiability"
                  (rule "concrete_eq_2" (formula "15") (term "1"))
                  (rule "concrete_eq_1" (formula "15") (term "0"))
                  (rule "neq_or" (formula "15"))
                  (rule "closeTrue" (formula "15"))
               )
            )
            (branch "Show Axiom Satisfiability"
               (rule "concrete_eq_2" (formula "15") (term "1"))
               (rule "concrete_eq_1" (formula "15") (term "0"))
               (rule "neq_or" (formula "15"))
               (rule "closeTrue" (formula "15"))
            )
         )
         (branch "Show Axiom Satisfiability"
            (rule "concrete_eq_2" (formula "15") (term "1"))
            (rule "concrete_eq_1" (formula "15") (term "0"))
            (rule "neq_or" (formula "15"))
            (rule "closeTrue" (formula "15"))
         )
      )
      (branch "Show Axiom Satisfiability"
         (rule "concrete_eq_1" (formula "15") (term "0"))
         (rule "concrete_eq_2" (formula "15") (term "1"))
         (rule "neq_or" (formula "15"))
         (rule "closeTrue" (formula "15"))
      )
   )
   (branch "Exceptional Post (isSingleDigit)"
      (rule "ifthenelse_false" (formula "12") (term "1,0,0,1,1,1,1,1"))
      (rule "false_to_not_true" (formula "12") (term "0,0,1,1,1,1,1"))
      (rule "ifthenelse_true" (formula "12") (term "1,0,0,1,0,1,1,1"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "andLeft" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "12"))
      (rule "notLeft" (formula "12"))
      (rule "applyOnRigidFormula" (formula "13"))
      (rule "simplifyUpdate2" (formula "13") (term "1"))
      (rule "replace_known_right" (formula "13") (term "1,1") (ifseqformula "15"))
      (rule "concrete_and_4" (formula "13") (term "1"))
      (rule "concrete_impl_3" (formula "13"))
      (rule "notLeft" (formula "13"))
      (rule "applyOnRigidFormula" (formula "13"))
      (rule "simplifyUpdate2" (formula "13") (term "1"))
      (rule "replace_known_right" (formula "13") (term "1,1") (ifseqformula "15"))
      (rule "concrete_and_4" (formula "13") (term "1"))
      (rule "concrete_impl_3" (formula "13"))
      (rule "notLeft" (formula "13"))
      (rule "applyOnRigidFormula" (formula "14"))
      (rule "simplifyUpdate2" (formula "14") (term "0"))
      (rule "simplifyUpdate2" (formula "14") (term "1"))
      (rule "applyOnRigidFormula" (formula "13"))
      (rule "simplifyUpdate2" (formula "13") (term "0"))
      (rule "simplifyUpdate2" (formula "13") (term "1"))
      (rule "applyOnRigidFormula" (formula "14") (term "0"))
      (rule "applyOnRigidFormula" (formula "14") (term "1"))
      (rule "simplifyUpdate1" (formula "14") (term "1,1"))
      (rule "applyOnPV" (formula "14") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "13") (term "0"))
      (rule "applyOnRigidFormula" (formula "13") (term "1"))
      (rule "applyOnPV" (formula "13") (term "0,1"))
      (rule "simplifyUpdate1" (formula "13") (term "1,1"))
      (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,1,0"))
      (rule "applyOnPV" (formula "14") (term "0,1,0"))
      (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,0,0"))
      (rule "applyOnPV" (formula "14") (term "0,0,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,1,0"))
      (rule "applyOnPV" (formula "13") (term "0,1,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "0,0"))
      (rule "applyOnPV" (formula "13") (term "0,0,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,1,0"))
      (rule "inEqSimp_gtToGeq" (formula "13") (term "1,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0"))
      (rule "mul_literals" (formula "14") (term "1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0"))
      (rule "mul_literals" (formula "13") (term "1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0"))
      (rule "Class_invariant_axiom_for_NumericTextBox" (formula "13") (term "1") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_1") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "inInt" (formula "13") (term "1,0,0,1,1"))
         (rule "concrete_and_3" (formula "13") (term "0,0,1,1"))
         (rule "inInt" (formula "13") (term "1,0,0,1,0,1"))
         (rule "concrete_and_3" (formula "13") (term "0,0,1,0,1"))
         (rule "replace_known_left" (formula "13") (term "0,1,0,0,1") (ifseqformula "8"))
         (rule "concrete_and_1" (formula "13") (term "1,0,0,1"))
         (rule "replace_known_right" (formula "13") (term "0,0,0,0,1") (ifseqformula "16"))
         (rule "concrete_not_2" (formula "13") (term "0,0,0,1"))
         (rule "concrete_and_1" (formula "13") (term "0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,1,0,1"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,0,1"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,1,0,1,0,1"))
         (rule "mul_literals" (formula "13") (term "1,0,1,0,1,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1"))
         (rule "inEqSimp_subsumption0" (formula "13") (term "0,0,1") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,1"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0,1"))
         (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,1"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,1"))
         (rule "qeq_literals" (formula "13") (term "0,0,0,1"))
         (rule "concrete_or_1" (formula "13") (term "0,0,1"))
         (rule "concrete_and_1" (formula "13") (term "0,1"))
         (rule "nnf_imp2or" (formula "13") (term "0,1,1"))
         (rule "nnf_imp2or" (formula "13") (term "0,0,1"))
         (rule "nnf_notAnd" (formula "13") (term "0,0,1,1"))
         (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,1,1"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,1,1"))
         (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,1,1"))
         (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,1"))
         (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,1"))
         (rule "replace_known_left" (formula "13") (term "1,1") (ifseqformula "11"))
         (rule "concrete_and_3" (formula "13") (term "1"))
         (rule "nnf_notAnd" (formula "13") (term "0,0,1"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1"))
         (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1"))
         (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1"))
         (rule "Class_invariant_axiom_for_NumericTextBox" (formula "14") (term "1") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_2") (ifseqformula "3"))
         (branch "Use Axiom"
            (rule "inInt" (formula "14") (term "1,0,0,1,1"))
            (rule "concrete_and_3" (formula "14") (term "0,0,1,1"))
            (rule "inInt" (formula "14") (term "1,0,0,1,0,1"))
            (rule "concrete_and_3" (formula "14") (term "0,0,1,0,1"))
            (rule "replace_known_right" (formula "14") (term "0,0,0,0,1") (ifseqformula "16"))
            (rule "concrete_not_2" (formula "14") (term "0,0,0,1"))
            (rule "concrete_and_1" (formula "14") (term "0,0,1"))
            (rule "replace_known_left" (formula "14") (term "0,0,0,1") (ifseqformula "8"))
            (rule "concrete_and_1" (formula "14") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0,1,0,1"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,1,0,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1,0,1,0,1"))
            (rule "mul_literals" (formula "14") (term "1,0,1,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1"))
            (rule "inEqSimp_subsumption0" (formula "14") (term "0,0,1") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0,1"))
            (rule "add_literals" (formula "14") (term "1,1,0,0,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,0,1"))
            (rule "qeq_literals" (formula "14") (term "0,0,0,1"))
            (rule "concrete_or_1" (formula "14") (term "0,0,1"))
            (rule "concrete_and_1" (formula "14") (term "0,1"))
            (rule "nnf_imp2or" (formula "14") (term "0,1,1"))
            (rule "nnf_imp2or" (formula "14") (term "0,0,1"))
            (rule "nnf_notAnd" (formula "14") (term "0,0,1,1"))
            (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,1,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,1,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,1,1"))
            (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1"))
            (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "11"))
            (rule "concrete_and_3" (formula "14") (term "1"))
            (rule "nnf_notAnd" (formula "14") (term "0,0,1"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1"))
            (rule "tryCatchThrow" (formula "19") (term "1"))
            (rule "simplifyUpdate2" (formula "19"))
            (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x_2"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_2"))
            (rule "arrayLengthNotNegative" (formula "6") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
            (rule "leq_literals" (formula "6") (term "0"))
            (rule "concrete_or_1" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "arrayLengthIsAnInt" (formula "6") (term "1,1"))
            (rule "inInt" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "compound_assignment_3_nonsimple" (formula "17") (term "1"))
            (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_3"))
            (rule "equality_comparison_simple" (formula "19") (term "1"))
            (rule "sequentialToParallel2" (formula "19"))
            (rule "simplifyUpdate3" (formula "19") (term "1,0"))
            (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "15"))
            (rule "ifthenelse_false" (formula "19") (term "0,1,0"))
            (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x_3"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_4"))
            (rule "compound_assignment_2" (formula "17") (term "1") (inst "#v=x_5"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_5"))
            (rule "greater_equal_than_comparison_simple" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "applyOnElementary" (formula "17") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
            (rule "compound_assignment_1_new" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "applyOnElementary" (formula "17") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
            (rule "ifthenelse_concrete3" (formula "17") (term "0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "17") (term "1,0,0,1,0"))
            (rule "concrete_or_4" (formula "17") (term "0,0,1,0"))
            (rule "ifElseSplit" (formula "19"))
            (branch "if x_3 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "20"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_3 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "20"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "13"))
               (rule "applyOnPV" (formula "13") (term "0"))
               (rule "simplifyUpdate1" (formula "13") (term "1"))
               (rule "boolean_not_equal_2" (formula "13"))
               (rule "false_right" (formula "13"))
               (rule "ifElseSplit" (formula "17"))
               (branch "if x_4 true"
                  (rule "simplifyUpdate2" (formula "18"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "ifElseSkipThen" (formula "18") (term "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "ifthenelse_concrete4" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "1"))
                  (rule "concrete_or_4" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "13"))
                  (rule "concrete_and_2" (formula "15") (term "0"))
                  (rule "concrete_and_2" (formula "15"))
                  (rule "false_right" (formula "15"))
                  (rule "inEqSimp_geqRight" (formula "13"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "assignment" (formula "17") (term "1"))
                  (rule "simplifyUpdate2" (formula "17") (term "1"))
                  (rule "blockReturn" (formula "17") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
                  (rule "concrete_or_1" (formula "14") (term "0"))
                  (rule "concrete_and_1" (formula "14"))
                  (rule "allRight" (formula "14") (inst "sk=i_0_0"))
                  (rule "orRight" (formula "14"))
                  (rule "orRight" (formula "14"))
                  (rule "inEqSimp_geqRight" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "15"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "commute_and" (formula "17"))
                  (rule "methodCallReturn" (formula "20") (term "1"))
                  (rule "assignment" (formula "20") (term "1"))
                  (rule "sequentialToParallel2" (formula "20"))
                  (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                  (rule "methodCallEmpty" (formula "20") (term "1"))
                  (rule "simplifyUpdate2" (formula "20"))
                  (rule "emptyModality" (formula "20") (term "1"))
                  (rule "notRight" (formula "20"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_4 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "18"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "13"))
                  (rule "applyOnPV" (formula "13") (term "0"))
                  (rule "simplifyUpdate1" (formula "13") (term "1"))
                  (rule "ifthenelse_concrete4" (formula "13"))
                  (rule "boolean_not_equal_2" (formula "13") (term "1"))
                  (rule "concrete_or_4" (formula "13"))
                  (rule "notRight" (formula "13"))
                  (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "1"))
                  (rule "concrete_and_1" (formula "15") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "14") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "14") (term "0,0"))
                  (rule "concrete_or_2" (formula "14") (term "0"))
                  (rule "less_than_comparison_simple" (formula "18") (term "1"))
                  (rule "sequentialToParallel2" (formula "18"))
                  (rule "simplifyUpdate2" (formula "18"))
                  (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                  (rule "applyOnElementary" (formula "18") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,0,1,0"))
                  (rule "blockEmpty" (formula "18") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,1,0"))
                  (rule "ifElseSplit" (formula "20"))
                  (branch "if exc_0 instanceof Exception true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "e"))
                     (rule "reference_type_cast" (formula "21") (term "1"))
                     (branch "Normal Execution (exc_0 instanceof Exception)"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,1,1") (ifseqformula "3"))
                        (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "19"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "ifUnfold" (formula "22") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_6"))
                        (rule "compound_inequality_comparison_1" (formula "22") (term "1") (inst "#v0=t"))
                        (rule "variableDeclarationAssign" (formula "22") (term "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "t"))
                        (rule "assignment_read_attribute_this" (formula "22") (term "1"))
                        (rule "sequentialToParallel2" (formula "22"))
                        (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                        (rule "inequality_comparison_simple" (formula "22") (term "1"))
                        (rule "sequentialToParallel2" (formula "22"))
                        (rule "simplifyUpdate2" (formula "22"))
                        (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                        (rule "applyOnElementary" (formula "22") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
                        (rule "ifElseSplit" (formula "20"))
                        (branch "if x_2 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "ifthenelse_concrete3" (formula "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "18"))
                           (rule "allRight" (formula "18") (inst "sk=i_0_0"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "inEqSimp_leqRight" (formula "18"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "blockReturn" (formula "23") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "19") (term "0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "19") (term "0,0"))
                           (rule "concrete_and_2" (formula "19") (term "0"))
                           (rule "concrete_and_2" (formula "19"))
                           (rule "false_right" (formula "19"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "commute_and" (formula "20"))
                           (rule "methodCallReturn" (formula "23") (term "1"))
                           (rule "assignment" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "methodCallEmpty" (formula "23") (term "1"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "emptyModality" (formula "23") (term "1"))
                           (rule "notRight" (formula "23"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifSplit" (formula "24"))
                           (branch "if x_6 true"
                              (rule "simplifyUpdate2" (formula "25"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "ifthenelse_concrete4" (formula "1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "1"))
                              (rule "concrete_or_4" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "eval_order_access1" (formula "25") (term "1") (inst "#v0=t"))
                              (rule "variableDeclarationAssign" (formula "25") (term "1"))
                              (rule "variableDeclaration" (formula "25") (term "1") (newnames "t_1"))
                              (rule "assignment_read_attribute_this" (formula "25") (term "1"))
                              (rule "sequentialToParallel2" (formula "25"))
                              (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                              (rule "assignment_write_attribute" (formula "25") (term "1"))
                              (branch "Normal Execution (t_1 != null)"
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "sequentialToParallel2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                 (rule "applyOnElementary" (formula "26") (term "1,0"))
                                 (rule "applyOnRigidFormula" (formula "25"))
                                 (rule "applyOnPV" (formula "25") (term "0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1"))
                                 (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                 (rule "applyOnPV" (formula "25") (term "1,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "3,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "0,0,1,0"))
                                 (rule "eval_order_access1" (formula "25") (term "1") (inst "#v0=t"))
                                 (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                 (rule "variableDeclaration" (formula "25") (term "1") (newnames "t_2"))
                                 (rule "assignment_read_attribute_this" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "applyOnElementary" (formula "25") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                 (rule "applyOnPV" (formula "25") (term "0,0,1,0"))
                                 (rule "dismissNonSelectedField" (formula "25") (term "0,1,0"))
                                 (rule "assignment_write_attribute" (formula "25") (term "1"))
                                 (branch "Normal Execution (t_2 != null)"
                                    (rule "simplifyUpdate2" (formula "25"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "25"))
                                    (rule "applyOnPV" (formula "25") (term "0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1"))
                                    (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "3,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "25") (term "1,0,1,0"))
                                    (rule "applyOnPV" (formula "25") (term "0,0,1,0"))
                                    (rule "blockEmpty" (formula "25") (term "1"))
                                    (rule "methodCallThrow" (formula "25") (term "1"))
                                    (rule "tryCatchThrow" (formula "25") (term "1"))
                                    (rule "allLeft" (formula "16") (inst "t=i_0_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "16") (term "0,1,0"))
                                    (rule "concrete_and_2" (formula "16") (term "1,0"))
                                    (rule "concrete_or_4" (formula "16") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "16") (term "0,0"))
                                    (rule "concrete_and_2" (formula "16") (term "0"))
                                    (rule "concrete_or_2" (formula "16"))
                                    (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "16"))
                                    (rule "concrete_and_1" (formula "22"))
                                    (rule "inEqSimp_leqRight" (formula "22"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "17") (term "0"))
                                    (rule "concrete_or_1" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "allLeft" (formula "18") (inst "t=i_0_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                    (rule "concrete_and_2" (formula "18") (term "0,0"))
                                    (rule "concrete_or_2" (formula "18") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "18") (term "0,1"))
                                    (rule "concrete_and_2" (formula "18") (term "1"))
                                    (rule "concrete_or_4" (formula "18"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "18"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "3"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0"))
                                    (rule "add_literals" (formula "3") (term "0"))
                                    (rule "leq_literals" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                                 (branch "Null Reference (t_2 = null)"
                                    (rule "simplifyUpdate2" (formula "26"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "close" (formula "21") (ifseqformula "1"))
                                 )
                              )
                              (branch "Null Reference (t_1 = null)"
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "close" (formula "21") (ifseqformula "1"))
                              )
                           )
                           (branch "if x_6 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "25"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "20"))
                              (rule "applyOnPV" (formula "20") (term "0"))
                              (rule "simplifyUpdate1" (formula "20") (term "1"))
                              (rule "ifthenelse_concrete4" (formula "20"))
                              (rule "boolean_not_equal_2" (formula "20") (term "1"))
                              (rule "concrete_or_4" (formula "20"))
                              (rule "notRight" (formula "20"))
                              (rule "methodCallThrow" (formula "25") (term "1"))
                              (rule "tryCatchThrow" (formula "25") (term "1"))
                              (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                              (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
                              (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
                              (rule "add_literals" (formula "17") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "17") (term "0,1,0"))
                              (rule "concrete_and_2" (formula "17") (term "1,0"))
                              (rule "concrete_or_4" (formula "17") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "17") (term "0,0"))
                              (rule "concrete_and_2" (formula "17") (term "0"))
                              (rule "concrete_or_2" (formula "17"))
                              (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "17"))
                              (rule "concrete_and_1" (formula "22"))
                              (rule "inEqSimp_leqRight" (formula "22"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "1"))
                              (rule "leq_literals" (formula "18") (term "0"))
                              (rule "concrete_or_1" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                              (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "19") (term "0,1"))
                              (rule "concrete_and_2" (formula "19") (term "1"))
                              (rule "concrete_or_4" (formula "19"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "19") (term "0,0"))
                              (rule "concrete_and_2" (formula "19") (term "0"))
                              (rule "concrete_or_2" (formula "19"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "4"))
                              (rule "andLeft" (formula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "19"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                              (rule "add_literals" (formula "19") (term "1,1,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0"))
                              (rule "add_zero_right" (formula "19") (term "0"))
                              (rule "leq_literals" (formula "19"))
                              (rule "closeFalse" (formula "19"))
                           )
                        )
                        (branch "if x_2 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "ifthenelse_concrete3" (formula "16"))
                           (rule "boolean_not_equal_2" (formula "16") (term "1"))
                           (rule "concrete_or_4" (formula "16"))
                           (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "16"))
                           (rule "concrete_and_2" (formula "18"))
                           (rule "false_right" (formula "18"))
                           (rule "inEqSimp_leqRight" (formula "16"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "blockReturn" (formula "20") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "17"))
                           (rule "allRight" (formula "17") (inst "sk=i_0_0"))
                           (rule "orRight" (formula "17"))
                           (rule "orRight" (formula "17"))
                           (rule "inEqSimp_leqRight" (formula "17"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "3"))
                           (rule "leq_literals" (formula "5") (term "0"))
                           (rule "concrete_or_1" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "11"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "commute_and" (formula "19"))
                           (rule "methodCallReturn" (formula "22") (term "1"))
                           (rule "assignment" (formula "22") (term "1"))
                           (rule "sequentialToParallel2" (formula "22"))
                           (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                           (rule "methodCallEmpty" (formula "22") (term "1"))
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "emptyModality" (formula "22") (term "1"))
                           (rule "notRight" (formula "22"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "ClassCastException (!(exc_0 instanceof Exception))"
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "orRight" (formula "21"))
                        (rule "closeType" (formula "1") (ifseqformula "21"))
                     )
                  )
                  (branch "if exc_0 instanceof Exception false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "14") (term "0"))
                     (rule "blockThrow" (formula "21") (term "1"))
                     (rule "methodCallThrow" (formula "21") (term "1"))
                     (rule "tryCatchThrow" (formula "21") (term "1"))
                     (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_6"))
                     (rule "equality_comparison_simple" (formula "21") (term "1"))
                     (rule "sequentialToParallel2" (formula "21"))
                     (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                     (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "17"))
                     (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,1,1") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
                     (rule "concrete_or_2" (formula "7"))
                     (rule "ifElseSplit" (formula "20"))
                     (branch "if x_2 true"
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "ifthenelse_concrete3" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                        (rule "concrete_and_1" (formula "18"))
                        (rule "allRight" (formula "18") (inst "sk=i_0_0"))
                        (rule "orRight" (formula "18"))
                        (rule "orRight" (formula "18"))
                        (rule "inEqSimp_leqRight" (formula "18"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "blockReturn" (formula "23") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "19") (term "0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "19") (term "0,0"))
                        (rule "concrete_and_2" (formula "19") (term "0"))
                        (rule "concrete_and_2" (formula "19"))
                        (rule "false_right" (formula "19"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "11"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "commute_and" (formula "20"))
                        (rule "methodCallReturn" (formula "23") (term "1"))
                        (rule "assignment" (formula "23") (term "1"))
                        (rule "sequentialToParallel2" (formula "23"))
                        (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                        (rule "methodCallEmpty" (formula "23") (term "1"))
                        (rule "simplifyUpdate2" (formula "23"))
                        (rule "emptyModality" (formula "23") (term "1"))
                        (rule "notRight" (formula "23"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_equal" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifElseSplit" (formula "24"))
                        (branch "if x_6 true"
                           (rule "simplifyUpdate2" (formula "25"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_6 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "25"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "19"))
                           (rule "simplifyUpdate1" (formula "19") (term "1"))
                           (rule "applyOnPV" (formula "19") (term "0"))
                           (rule "boolean_not_equal_2" (formula "19"))
                           (rule "false_right" (formula "19"))
                           (rule "allLeft" (formula "16") (inst "t=i_0_0"))
                           (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "16") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "16") (term "0,0"))
                           (rule "concrete_or_2" (formula "16") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,0"))
                           (rule "leq_literals" (formula "16") (term "0,0"))
                           (rule "concrete_and_2" (formula "16") (term "0"))
                           (rule "concrete_or_2" (formula "16"))
                           (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "16"))
                           (rule "concrete_and_3" (formula "21"))
                           (rule "inEqSimp_geqRight" (formula "21"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "1"))
                           (rule "leq_literals" (formula "17") (term "0"))
                           (rule "concrete_or_1" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "allLeft" (formula "16") (inst "t=i_0_0"))
                           (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                           (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "16") (term "0,1"))
                           (rule "concrete_and_2" (formula "16") (term "1"))
                           (rule "concrete_or_4" (formula "16"))
                           (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "16") (term "0,0"))
                           (rule "concrete_and_2" (formula "16") (term "0"))
                           (rule "concrete_or_2" (formula "16"))
                           (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "3"))
                           (rule "andLeft" (formula "16"))
                           (rule "inEqSimp_homoInEq1" (formula "16"))
                           (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                           (rule "add_literals" (formula "16") (term "1,1,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0"))
                           (rule "add_literals" (formula "16") (term "0"))
                           (rule "leq_literals" (formula "16"))
                           (rule "closeFalse" (formula "16"))
                        )
                     )
                     (branch "if x_2 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "15"))
                        (rule "simplifyUpdate1" (formula "15") (term "1"))
                        (rule "applyOnPV" (formula "15") (term "0"))
                        (rule "ifthenelse_concrete3" (formula "15"))
                        (rule "boolean_not_equal_2" (formula "15") (term "1"))
                        (rule "concrete_or_4" (formula "15"))
                        (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "15"))
                        (rule "concrete_and_2" (formula "18"))
                        (rule "false_right" (formula "18"))
                        (rule "inEqSimp_leqRight" (formula "15"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "blockReturn" (formula "20") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
                        (rule "concrete_and_1" (formula "17"))
                        (rule "allRight" (formula "17") (inst "sk=i_0_0"))
                        (rule "orRight" (formula "17"))
                        (rule "orRight" (formula "17"))
                        (rule "inEqSimp_leqRight" (formula "17"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "3"))
                        (rule "leq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_1" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "10"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "commute_and" (formula "19"))
                        (rule "methodCallReturn" (formula "22") (term "1"))
                        (rule "assignment" (formula "22") (term "1"))
                        (rule "sequentialToParallel2" (formula "22"))
                        (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                        (rule "methodCallEmpty" (formula "22") (term "1"))
                        (rule "simplifyUpdate2" (formula "22"))
                        (rule "emptyModality" (formula "22") (term "1"))
                        (rule "notRight" (formula "22"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
         )
         (branch "Show Axiom Satisfiability"
            (rule "concrete_eq_1" (formula "14") (term "0"))
            (rule "concrete_eq_2" (formula "14") (term "1"))
            (rule "neq_or" (formula "14"))
            (rule "closeTrue" (formula "14"))
         )
      )
      (branch "Show Axiom Satisfiability"
         (rule "concrete_eq_2" (formula "13") (term "1"))
         (rule "concrete_eq_1" (formula "13") (term "0"))
         (rule "neq_or" (formula "13"))
         (rule "closeTrue" (formula "13"))
      )
   )
   (branch "Pre (isSingleDigit)"
      (rule "inInt" (formula "15") (term "1,1,1,1"))
      (rule "concrete_and_3" (formula "15") (term "1,1,1"))
      (rule "simplifyUpdate2" (formula "15"))
      (rule "simplifyUpdate2" (formula "15") (term "1"))
      (rule "applyOnRigidFormula" (formula "15"))
      (rule "simplifyUpdate2" (formula "15") (term "1"))
      (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "1"))
      (rule "concrete_and_3" (formula "15"))
      (rule "orRight" (formula "15"))
      (rule "applyOnRigidFormula" (formula "16"))
      (rule "simplifyUpdate2" (formula "16") (term "1"))
      (rule "applyOnRigidFormula" (formula "15"))
      (rule "simplifyUpdate2" (formula "15") (term "1"))
      (rule "applyOnRigidFormula" (formula "16") (term "0"))
      (rule "applyOnRigidFormula" (formula "15") (term "0"))
      (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
      (rule "simplifyUpdate1" (formula "16") (term "1,1,0"))
      (rule "applyOnPV" (formula "16") (term "0,1,0"))
      (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
      (rule "simplifyUpdate1" (formula "16") (term "1,0,0"))
      (rule "applyOnPV" (formula "16") (term "0,0,0"))
      (rule "applyOnRigidFormula" (formula "15") (term "1,0"))
      (rule "simplifyUpdate1" (formula "15") (term "1,1,0"))
      (rule "applyOnPV" (formula "15") (term "0,1,0"))
      (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
      (rule "applyOnPV" (formula "15") (term "0,0,0"))
      (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "16") (term "1,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,1,0"))
      (rule "add_literals" (formula "16") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,1,0"))
      (rule "add_literals" (formula "15") (term "0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0"))
      (rule "mul_literals" (formula "16") (term "1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0"))
      (rule "mul_literals" (formula "15") (term "1,1,0"))
      (rule "Class_invariant_axiom_for_NumericTextBox" (formula "15") (term "1") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_1") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "inInt" (formula "15") (term "1,0,0,1,1"))
         (rule "concrete_and_3" (formula "15") (term "0,0,1,1"))
         (rule "inInt" (formula "15") (term "1,0,0,1,0,1"))
         (rule "concrete_and_3" (formula "15") (term "0,0,1,0,1"))
         (rule "replace_known_right" (formula "15") (term "0,0,0,0,1") (ifseqformula "12"))
         (rule "concrete_not_2" (formula "15") (term "0,0,0,1"))
         (rule "concrete_and_1" (formula "15") (term "0,0,1"))
         (rule "replace_known_left" (formula "15") (term "0,0,0,1") (ifseqformula "8"))
         (rule "concrete_and_1" (formula "15") (term "0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,1,0,1"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,1,0,1"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,1,0,1,0,1"))
         (rule "mul_literals" (formula "15") (term "1,0,1,0,1,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1"))
         (rule "inEqSimp_subsumption0" (formula "15") (term "0,0,1") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,1"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,1"))
         (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0,1"))
         (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,1"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,1"))
         (rule "qeq_literals" (formula "15") (term "0,0,0,1"))
         (rule "concrete_or_1" (formula "15") (term "0,0,1"))
         (rule "concrete_and_1" (formula "15") (term "0,1"))
         (rule "nnf_imp2or" (formula "15") (term "0,1,1"))
         (rule "nnf_imp2or" (formula "15") (term "0,0,1"))
         (rule "nnf_notAnd" (formula "15") (term "0,0,1,1"))
         (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,1,1"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,1,1"))
         (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,1,1"))
         (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1"))
         (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "11"))
         (rule "concrete_and_3" (formula "15") (term "1"))
         (rule "nnf_notAnd" (formula "15") (term "0,0,1"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,1"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,1"))
         (rule "Class_invariant_axiom_for_NumericTextBox" (formula "16") (term "1") (inst "i=i") (inst "i_0=i_0") (inst "sk=sk_2") (ifseqformula "3"))
         (branch "Use Axiom"
            (rule "inInt" (formula "16") (term "1,0,0,1,1"))
            (rule "concrete_and_3" (formula "16") (term "0,0,1,1"))
            (rule "inInt" (formula "16") (term "1,0,0,1,0,1"))
            (rule "concrete_and_3" (formula "16") (term "0,0,1,0,1"))
            (rule "replace_known_right" (formula "16") (term "0,0,0,0,1") (ifseqformula "12"))
            (rule "concrete_not_2" (formula "16") (term "0,0,0,1"))
            (rule "concrete_and_1" (formula "16") (term "0,0,1"))
            (rule "replace_known_left" (formula "16") (term "0,0,0,1") (ifseqformula "8"))
            (rule "concrete_and_1" (formula "16") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,0,1,0,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,1,0,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,1,1"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,1,0,1,0,1"))
            (rule "mul_literals" (formula "16") (term "1,0,1,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1"))
            (rule "inEqSimp_subsumption0" (formula "16") (term "0,0,1") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0,0,1"))
            (rule "add_literals" (formula "16") (term "1,1,0,0,0,0,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0,1"))
            (rule "qeq_literals" (formula "16") (term "0,0,0,1"))
            (rule "concrete_or_1" (formula "16") (term "0,0,1"))
            (rule "concrete_and_1" (formula "16") (term "0,1"))
            (rule "nnf_imp2or" (formula "16") (term "0,1,1"))
            (rule "nnf_imp2or" (formula "16") (term "0,0,1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,1"))
            (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,1,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,1,1"))
            (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "11"))
            (rule "concrete_and_3" (formula "16") (term "1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
            (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x_2"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
            (rule "arrayLengthNotNegative" (formula "6") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
            (rule "leq_literals" (formula "6") (term "0"))
            (rule "concrete_or_1" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "arrayLengthIsAnInt" (formula "6") (term "1,1"))
            (rule "inInt" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "compound_assignment_3_nonsimple" (formula "13") (term "1"))
            (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x_3"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
            (rule "compound_assignment_2" (formula "13") (term "1") (inst "#v=x_4"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_4"))
            (rule "greater_equal_than_comparison_simple" (formula "13") (term "1"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "applyOnElementary" (formula "13") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0"))
            (rule "compound_assignment_1_new" (formula "13") (term "1"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "applyOnElementary" (formula "13") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0"))
            (rule "ifthenelse_concrete3" (formula "13") (term "0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "13") (term "1,0,0,1,0"))
            (rule "concrete_or_4" (formula "13") (term "0,0,1,0"))
            (rule "ifElseSplit" (formula "13"))
            (branch "if x_3 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "14"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "ifthenelse_concrete4" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "1"))
               (rule "concrete_or_4" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "12"))
               (rule "concrete_and_2" (formula "16") (term "0"))
               (rule "concrete_and_2" (formula "16"))
               (rule "false_right" (formula "16"))
               (rule "ifElseSkipThen" (formula "14") (term "1"))
               (rule "inEqSimp_geqRight" (formula "12"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "assignment" (formula "14") (term "1"))
               (rule "simplifyUpdate2" (formula "14") (term "1"))
               (rule "blockReturn" (formula "14") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
               (rule "concrete_or_1" (formula "16") (term "0"))
               (rule "concrete_and_1" (formula "16"))
               (rule "allRight" (formula "16") (inst "sk=i_0_0"))
               (rule "orRight" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "inEqSimp_leqRight" (formula "16"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "17"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "commute_and" (formula "19"))
               (rule "methodCallReturn" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "emptyModality" (formula "17") (term "1"))
               (rule "notRight" (formula "17"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_3 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "14"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "12"))
               (rule "simplifyUpdate1" (formula "12") (term "1"))
               (rule "applyOnPV" (formula "12") (term "0"))
               (rule "ifthenelse_concrete4" (formula "12"))
               (rule "boolean_not_equal_2" (formula "12") (term "1"))
               (rule "concrete_or_4" (formula "12"))
               (rule "notRight" (formula "12"))
               (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
               (rule "concrete_and_1" (formula "16") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "17") (term "0,0,0"))
               (rule "concrete_and_2" (formula "17") (term "0,0"))
               (rule "concrete_or_2" (formula "17") (term "0"))
               (rule "less_than_comparison_simple" (formula "14") (term "1"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "simplifyUpdate2" (formula "14"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0"))
               (rule "applyOnElementary" (formula "14") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
               (rule "blockEmpty" (formula "14") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,1,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,1,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,1,1") (ifseqformula "2"))
               (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "14"))
               (rule "concrete_or_2" (formula "7"))
               (rule "ifElseSplit" (formula "15"))
               (branch "if x_2 true"
                  (rule "simplifyUpdate2" (formula "16"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "ifthenelse_concrete3" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "1"))
                  (rule "concrete_or_4" (formula "1"))
                  (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                  (rule "concrete_and_1" (formula "18"))
                  (rule "allRight" (formula "18") (inst "sk=i_0_0"))
                  (rule "orRight" (formula "18"))
                  (rule "orRight" (formula "18"))
                  (rule "inEqSimp_leqRight" (formula "18"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "blockReturn" (formula "18") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "21") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "21") (term "0,0"))
                  (rule "concrete_and_2" (formula "21") (term "0"))
                  (rule "concrete_and_2" (formula "21"))
                  (rule "false_right" (formula "21"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "11"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "commute_and" (formula "21"))
                  (rule "methodCallReturn" (formula "19") (term "1"))
                  (rule "assignment" (formula "19") (term "1"))
                  (rule "sequentialToParallel2" (formula "19"))
                  (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "simplifyUpdate2" (formula "19"))
                  (rule "emptyModality" (formula "19") (term "1"))
                  (rule "notRight" (formula "19"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_equal" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "allLeft" (formula "16") (inst "t=i_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "16") (term "0,1,0"))
                  (rule "concrete_and_2" (formula "16") (term "1,0"))
                  (rule "concrete_or_4" (formula "16") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "16") (term "0,0"))
                  (rule "concrete_and_2" (formula "16") (term "0"))
                  (rule "concrete_or_2" (formula "16"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "16"))
                  (rule "concrete_and_3" (formula "21"))
                  (rule "inEqSimp_geqRight" (formula "21"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "1"))
                  (rule "leq_literals" (formula "17") (term "0"))
                  (rule "concrete_or_1" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "allLeft" (formula "16") (inst "t=i_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "16") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "16") (term "0,0"))
                  (rule "concrete_or_2" (formula "16") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "16") (term "0,1"))
                  (rule "concrete_and_2" (formula "16") (term "1"))
                  (rule "concrete_or_4" (formula "16"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "3"))
                  (rule "andLeft" (formula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "16"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "1,1,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0"))
                  (rule "add_zero_right" (formula "16") (term "0"))
                  (rule "leq_literals" (formula "16"))
                  (rule "closeFalse" (formula "16"))
               )
               (branch "if x_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "16"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "14"))
                  (rule "simplifyUpdate1" (formula "14") (term "1"))
                  (rule "applyOnPV" (formula "14") (term "0"))
                  (rule "ifthenelse_concrete3" (formula "14"))
                  (rule "boolean_not_equal_2" (formula "14") (term "1"))
                  (rule "concrete_or_4" (formula "14"))
                  (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "14"))
                  (rule "concrete_and_2" (formula "18"))
                  (rule "false_right" (formula "18"))
                  (rule "inEqSimp_leqRight" (formula "14"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "blockReturn" (formula "16") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                  (rule "concrete_and_1" (formula "18"))
                  (rule "allRight" (formula "18") (inst "sk=i_0_0"))
                  (rule "orRight" (formula "18"))
                  (rule "orRight" (formula "18"))
                  (rule "inEqSimp_geqRight" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "19"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "3"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (rule "concrete_or_1" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "commute_and" (formula "20"))
                  (rule "methodCallReturn" (formula "18") (term "1"))
                  (rule "assignment" (formula "18") (term "1"))
                  (rule "sequentialToParallel2" (formula "18"))
                  (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "simplifyUpdate2" (formula "18"))
                  (rule "emptyModality" (formula "18") (term "1"))
                  (rule "notRight" (formula "18"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Show Axiom Satisfiability"
            (rule "concrete_eq_2" (formula "16") (term "1"))
            (rule "concrete_eq_1" (formula "16") (term "0"))
            (rule "neq_or" (formula "16"))
            (rule "closeTrue" (formula "16"))
         )
      )
      (branch "Show Axiom Satisfiability"
         (rule "concrete_eq_1" (formula "15") (term "0"))
         (rule "concrete_eq_2" (formula "15") (term "1"))
         (rule "neq_or" (formula "15"))
         (rule "closeTrue" (formula "15"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (rule "concrete_eq_1" (formula "8") (term "0"))
   (rule "concrete_eq_2" (formula "8") (term "1"))
   (rule "neq_or" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
)
}
