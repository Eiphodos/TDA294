\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Oct 27 02:00:36 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:noRestriction
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=80000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Sun Oct 27 02:00:36 CEST 2019
contract=BinarySearch[BinarySearch\\:\\:performBinarySearch()].JML normal_behavior operation contract.0
name=BinarySearch[BinarySearch\\:\\:performBinarySearch()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "a" ) (keyVersion "c934a1f554"))

(autoModeTime "18718")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "1,0,0,0,0,1,1,0") (newnames "self,result,exc,heapAtPre,o,f"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,1,1,0"))
(rule "inInt" (formula "1") (term "1,0,0,0,1,1,1,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,1,1,1,0"))
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "inInt" (formula "1") (term "1,0,0,0,0,1,1,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0,0,1,1,0"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "exLeft" (formula "6") (inst "sk=q_0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "assignment" (formula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,0"))
(rule "all_unused" (formula "12") (term "1,0,1"))
(rule "all_unused" (formula "12") (term "1,0,1"))
(rule "concrete_and_3" (formula "12") (term "0,1"))
(rule "nnf_imp2or" (formula "5") (term "0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
(rule "Class_invariant_axiom_for_BinarySearch" (formula "9") (ifseqformula "3"))
(rule "true_left" (formula "9"))
(rule "commute_or_2" (formula "5") (term "0,0,0"))
(rule "commute_or" (formula "5") (term "0,0,0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_performBinarySearch,savedHeapBefore_performBinarySearch"))
(rule "simplifyUpdate2" (formula "11") (term "1"))
(rule "methodCallUnfoldArguments" (formula "11") (term "1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "var"))
(rule "stringAssignment" (formula "11") (term "1"))
(rule "simplifyUpdate2" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "notLeft" (formula "1"))
(rule "sequentialToParallel2" (formula "13"))
(rule "simplifyUpdate3" (formula "13") (term "1,0"))
(rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "2"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
(rule "concrete_or_2" (formula "1"))
(rule "methodCallWithinClass" (formula "14") (term "1") (userinteraction))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "message"))
(rule "assignment" (formula "14") (term "1"))
(rule "sequentialToParallel2" (formula "14"))
(rule "simplifyUpdate2" (formula "14"))
(rule "simplifyUpdate3" (formula "14") (term "1,0"))
(rule "applyOnElementary" (formula "14") (term "1,0"))
(rule "applyOnPV" (formula "14") (term "0,1,0"))
(rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_report,savedHeapBefore_report"))
(rule "simplifyUpdate2" (formula "14"))
(rule "simplifyUpdate2" (formula "14") (term "1"))
(rule "methodCallEmptyReturn" (formula "14") (term "1"))
(rule "blockEmpty" (formula "14") (term "1"))
(rule "methodCallUnfoldArguments" (formula "14") (term "1"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
(rule "assignment_read_attribute_this" (formula "14"))
(rule "sequentialToParallel2" (formula "14"))
(rule "simplifyUpdate3" (formula "14") (term "1,0"))
 (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_eliminateDuplicates,exc_0,heapAfter_eliminateDuplicates,anon_heap_eliminateDuplicates") (contract "BinarySearch[BinarySearch::eliminateDuplicates([I)].JML exceptional_behavior operation contract.0#BinarySearch[BinarySearch::eliminateDuplicates([I)].JML normal_behavior operation contract.0"))
(branch "Post (eliminateDuplicates)"
   (rule "instanceof_static_type" (formula "12") (term "0,0,1,0,1,1,0,1,1,1,1,1"))
   (rule "boolean_equal" (formula "12") (term "0,1,0,1,1,0,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "12") (term "1,0,1,1,0,1,1,1,1,1"))
   (rule "inInt" (formula "12") (term "0,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "12") (term "0,0,0,1,1,1,1,1,1,1"))
   (rule "inInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "inInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
   (rule "inInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "inInt" (formula "12") (term "1,0,0,1,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,1,0,0,0,1,1,1,1,1,1,1"))
   (rule "inInt" (formula "12") (term "1,0,0,0,0,0,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,0,0,1,1,1,1,1,1,1"))
   (rule "inInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "andLeft" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "andLeft" (formula "13"))
   (rule "typeEqDerived" (formula "14") (term "0,1,1,1,0,1") (ifseqformula "13"))
   (rule "typeEqDerived" (formula "14") (term "0,0,0,0,1,1,0,1") (ifseqformula "13"))
   (rule "boolean_equal" (formula "14") (term "1,1,1,0,1"))
   (rule "boolean_equal" (formula "14") (term "0,0,0,1,1,0,1"))
   (rule "concrete_and_3" (formula "14") (term "1,1,0,1"))
   (rule "concrete_impl_1" (formula "14") (term "0,1,1,0,1"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1"))
   (rule "replace_known_left" (formula "14") (term "0,0,1") (ifseqformula "13"))
   (rule "concrete_not_1" (formula "14") (term "0,1"))
   (rule "concrete_and_2" (formula "14") (term "1"))
   (rule "concrete_impl_3" (formula "14"))
   (rule "notLeft" (formula "14"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1"))
   (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "13"))
   (rule "concrete_and_3" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "1,1"))
   (rule "simplifyUpdate2" (formula "15") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1,1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,0,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "14") (term "0,0"))
   (rule "concrete_and_1" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1"))
   (rule "applyOnPV" (formula "15") (term "0,0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
   (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
   (rule "replace_known_right" (formula "15") (term "0,1,1") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "15") (term "1,1"))
   (rule "concrete_and_3" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,1,0"))
   (rule "replace_known_right" (formula "15") (term "0,1,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "15") (term "1,0"))
   (rule "concrete_and_3" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1,0"))
   (rule "replace_known_right" (formula "14") (term "0,1,1,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "14") (term "1,1,0"))
   (rule "concrete_and_3" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "15") (term "0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,1,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,1,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,0,1,1,1"))
   (rule "replace_known_right" (formula "14") (term "0,0,1,1,1") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "14") (term "0,1,1,1"))
   (rule "concrete_and_1" (formula "14") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0,1,1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,0,1,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "1,1,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,1,0,0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,1,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,1,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,1,0,0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "1,1,1,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,1,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,0,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,1,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0,0,1,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,0,1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,0,0,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1,0,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "pullOutSelect" (formula "14") (term "1,1,0,0,0,0,0,1") (inst "selectSK=BinarySearch_size_0"))
   (rule "applyEq" (formula "15") (term "1,1,0,0,0,0,1,1") (ifseqformula "14"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "12"))
   (rule "elementOfFreshLocs" (formula "14") (term "1,0,0"))
   (rule "equalUnique" (formula "14") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "14") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "14") (term "0,0,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,1,0,0") (ifseqformula "18"))
   (rule "concrete_not_2" (formula "14") (term "0,1,0,0"))
   (rule "concrete_and_1" (formula "14") (term "1,0,0"))
   (rule "replace_known_left" (formula "14") (term "0,1,0,0") (ifseqformula "4"))
   (rule "concrete_not_1" (formula "14") (term "1,0,0"))
   (rule "concrete_or_4" (formula "14") (term "0,0"))
   (rule "elementOfSingleton" (formula "14") (term "0,0"))
   (rule "equalUnique" (formula "14") (term "1,0,0"))
   (rule "concrete_and_3" (formula "14") (term "0,0"))
   (rule "eqClose" (formula "14") (term "0,0"))
   (rule "ifthenelse_true" (formula "14") (term "0"))
   (rule "applyEqReverse" (formula "15") (term "1,1,0,0,0,0,0,1") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "1,1,0,0,0,0,1,1") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "nnf_imp2or" (formula "14") (term "0,0,0,0"))
   (rule "nnf_imp2or" (formula "14") (term "0,0,0,1,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0,1,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,0,0,1,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0,0,1,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0,0,1,1"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0,1,1"))
   (rule "commute_and" (formula "15"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "14") (term "1,1,1") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "14") (term "1,1"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "14") (term "1,0") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "14") (term "0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "15") (term "0") (ifseqformula "5"))
   (rule "concrete_and_1" (formula "15"))
   (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "14") (term "0,0,0,1,1"))
   (rule "arrayLengthNotNegative" (formula "15") (term "0"))
   (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "16"))
   (rule "add_literals" (formula "1") (term "1"))
   (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "1"))
   (rule "mul_literals" (formula "16") (term "1,0,0"))
   (rule "add_literals" (formula "16") (term "0,0"))
   (rule "leq_literals" (formula "16") (term "0"))
   (rule "concrete_and_2" (formula "16"))
   (rule "false_right" (formula "16"))
   (rule "arrayLengthIsAShort" (formula "1") (term "0"))
   (rule "inShort" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "simplifyUpdate2" (formula "19"))
   (rule "sequentialToParallel2" (formula "19"))
   (rule "simplifyUpdate3" (formula "19") (term "1,0"))
   (rule "blockEmpty" (formula "19") (term "1"))
   (rule "methodCallUnfoldArguments" (formula "19") (term "1"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "var_2"))
   (rule "compound_addition_2" (formula "19") (term "1") (inst "#v1=x") (inst "#v0=s"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "s"))
   (rule "stringAssignment" (formula "19") (term "1"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "sequentialToParallel2" (formula "21"))
   (rule "simplifyUpdate3" (formula "21") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "2,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0"))
   (rule "applyOnPV" (formula "1") (term "0,0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (ifseqformula "14"))
   (rule "variableDeclarationAssign" (formula "21") (term "1"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "x"))
   (rule "assignment_read_attribute_this" (formula "21"))
   (rule "sequentialToParallel2" (formula "21"))
   (rule "simplifyUpdate3" (formula "21") (term "1,0"))
   (rule "applyOnElementary" (formula "21") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
   (rule "applyOnPV" (formula "21") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
   (rule "pullOutSelect" (formula "21") (term "0,1,0") (inst "selectSK=BinarySearch_query_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
   (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "7"))
   (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "1,0,0"))
   (rule "concrete_or_4" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "stringConcatIntExpRight" (formula "21") (term "1") (inst "sk=sk_0"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "simplifyUpdate2" (formula "22"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "0"))
   (rule "eqSymm" (formula "1"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnPV" (formula "1") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
   (rule "applyOnPV" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1"))
   (rule "poolKeyIsContentOfValue" (formula "1") (term "0,1"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "1") (inst "iv=iv"))
   (rule "andLeft" (formula "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "1,1,0,1"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,1,0,1"))
   (rule "add_literals" (formula "1") (term "1,0,1"))
   (rule "add_literals" (formula "1") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
   (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "3"))
   (rule "lenOfSeqConcat" (formula "1") (term "0"))
   (rule "polySimp_homoEq" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "1,0,1,0"))
   (rule "lenOfSeqSingleton" (formula "1") (term "0,0,1,0"))
   (rule "add_literals" (formula "1") (term "0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,0"))
   (rule "add_literals" (formula "1") (term "0"))
   (rule "eqClose" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "2"))
   (rule "eqClose" (formula "1") (term "1,0"))
   (rule "concrete_impl_4" (formula "1") (term "0"))
   (rule "all_unused" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "methodCallWithinClass" (formula "23") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "message_1"))
   (rule "assignment" (formula "23") (term "1"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_report_0,savedHeapBefore_report_0"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23") (term "1"))
   (rule "methodCallEmptyReturn" (formula "23") (term "1"))
   (rule "blockEmpty" (formula "23") (term "1"))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "searchResult"))
   (rule "impLeft" (formula "17") (userinteraction))
   (branch "Case 1"
      (rule "allRight" (formula "17") (inst "sk=j_0") (userinteraction))
      (rule "allRight" (formula "17") (inst "sk=i_0") (userinteraction))
      (rule "allLeftHide" (formula "10") (inst "t=j_0") (userinteraction))
      (rule "allLeftHide" (formula "10") (inst "t=i_0") (userinteraction))
      (rule "commute_or" (formula "10") (term "0,0") (userinteraction))
      (rule "geq_to_leq" (formula "10") (term "1,0") (userinteraction))
      (rule "leq_to_geq" (formula "10") (term "1") (userinteraction))
      (rule "closeAntec" (formula "10") (ifseqformula "17") (userinteraction))
   )
   (branch "Case 2"
      (rule "andLeft" (formula "17") (userinteraction))
      (rule "allLeftHide" (formula "17") (inst "t=int::select(heap, self, BinarySearch::$query)") (userinteraction))
       (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_search,result_0,exc_1,heapAfter_search,anon_heap_search") (contract "BinarySearch[BinarySearch::search()].JML exceptional_behavior operation contract.0#BinarySearch[BinarySearch::search()].JML normal_behavior operation contract.0#BinarySearch[BinarySearch::search()].JML normal_behavior operation contract.1"))
      (branch "Post (search)"
         (rule "instanceof_static_type" (formula "20") (term "0,0,0,1,1,0,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,1,1,1,1"))
         (rule "eqClose" (formula "20") (term "0,0,1,1,0,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,0,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,0,1,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,1,0,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,1,0,1,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,0,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,0,1,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,1,0,1,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,1,1,0,1,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,1,0,1,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,1,1,0,1,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,1,0,1,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,1,0,1,0,1,1,1,1,1"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "eqSymm" (formula "20") (term "1,1,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "sequentialToParallel2" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "concrete_impl_1" (formula "21") (term "0,1,1,0,0,1,1,1"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "applyOnSkip" (formula "20") (term "1,0"))
         (rule "parallelWithSkip2" (formula "20") (term "0"))
         (rule "applyOnElementary" (formula "21") (term "1,0"))
         (rule "applyOnPV" (formula "21") (term "0,1,0"))
         (rule "sequentialToParallel2" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "simplifyUpdate3" (formula "21") (term "1,0"))
         (rule "andLeft" (formula "21"))
         (rule "typeEqDerived" (formula "22") (term "0,1,1,1,0,0,1") (ifseqformula "21"))
         (rule "boolean_equal" (formula "22") (term "1,1,1,0,0,1"))
         (rule "concrete_and_3" (formula "22") (term "1,1,0,0,1"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "applyOnRigidFormula" (formula "20"))
         (rule "simplifyUpdate1" (formula "20") (term "1"))
         (rule "applyOnRigidFormula" (formula "24"))
         (rule "simplifyUpdate2" (formula "24") (term "1"))
         (rule "simplifyUpdate2" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "22"))
         (rule "simplifyUpdate2" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "0"))
         (rule "applyOnRigidFormula" (formula "23"))
         (rule "simplifyUpdate2" (formula "23") (term "1"))
         (rule "simplifyUpdate2" (formula "23") (term "0"))
         (rule "applyOnRigidTerm" (formula "20") (term "0"))
         (rule "simplifyUpdate1" (formula "20") (term "2,0"))
         (rule "simplifyUpdate1" (formula "20") (term "1,0"))
         (rule "applyOnPV" (formula "20") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1"))
         (rule "simplifyUpdate2" (formula "24") (term "1,1"))
         (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "21"))
         (rule "concrete_and_3" (formula "24") (term "1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "0,1"))
         (rule "replace_known_left" (formula "22") (term "0,0,1") (ifseqformula "21"))
         (rule "concrete_not_1" (formula "22") (term "0,1"))
         (rule "concrete_and_2" (formula "22") (term "1"))
         (rule "concrete_impl_3" (formula "22"))
         (rule "notLeft" (formula "22"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "1,1"))
         (rule "replace_known_left" (formula "22") (term "1,1") (ifseqformula "21"))
         (rule "concrete_and_3" (formula "22") (term "1"))
         (rule "applyOnRigidFormula" (formula "22") (term "0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1"))
         (rule "simplifyUpdate2" (formula "23") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "24"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1"))
         (rule "applyOnPV" (formula "24") (term "0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,1"))
         (rule "applyOnPV" (formula "22") (term "0,1,1"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,1"))
         (rule "simplifyUpdate2" (formula "22") (term "0,0,1"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0,1"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,1,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,1,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,1,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,1,0"))
         (rule "simplifyUpdate2" (formula "23") (term "0,0,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0"))
         (rule "simplifyUpdate2" (formula "23") (term "0,0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,0,1"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,0,1"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,0,1"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,0,1"))
         (rule "applyOnRigidTerm" (formula "22") (term "0,1,0,1"))
         (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0,1"))
         (rule "applyOnPV" (formula "22") (term "0,0,1,0,1"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0,0,0,0"))
         (rule "applyOnPV" (formula "23") (term "0,0,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0,0,0"))
         (rule "simplifyUpdate2" (formula "24") (term "0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,0,1,0,1"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,0,1,0,1"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,0,1,0,1"))
         (rule "applyOnPV" (formula "22") (term "0,1,0,1,0,1"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,0,0,1,0"))
         (rule "simplifyUpdate2" (formula "22") (term "0,0,0,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0,0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0,0,1,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,0,1,1,0"))
         (rule "simplifyUpdate2" (formula "22") (term "0,0,0,0,1,1,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,0,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,0,1,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,0,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "0,0,0,1,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,0,0,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,0,0,0,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,0,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "0,1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "0,1,0,0,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "0,1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0,0,0,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,0,1,0,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,0,0,0,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,0,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "0,1,0,0,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0,0,1,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,0,1,0,0,1,1,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,0,0,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,0,0,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,0,0,1,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,0,0,1,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0,0,0,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1,0,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "0,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,0,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,0,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "0,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,0,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,0,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,0,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,0,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,0,0,0,0,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,0,0,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,0,1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,0,1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,0,1,0,0,0,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0,1,0,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,1,0,0,0,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,1,0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,1,0,0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,0,1,0,0,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,0,1,0,0,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,0,1,0,0,1,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,0,0,0,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,0,0,0,1,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,0,0,0,1,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,0,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0,1,1,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,0,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,0,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,1,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_gtToGeq" (formula "24") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0,0,0,1,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "24") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0,0,0"))
         (rule "pullOutSelect" (formula "22") (term "0,0,0,0") (inst "selectSK=BinarySearch_numbers_0"))
         (rule "applyEq" (formula "25") (term "1,0,0,1,0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "25") (term "1,0,1,1,0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "24") (term "1,1,1,1,0,0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "1,1,1,1,0,0,0,1,0") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "1,0,1,0,0,0,1,0") (ifseqformula "22"))
         (rule "applyEq" (formula "25") (term "1,1,1,0,1,0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "25") (term "1,1,1,1,0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "24") (term "1,0,0,1,0,0,1,0") (ifseqformula "22"))
         (rule "applyEq" (formula "24") (term "1,0,1,0,0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "1,0,1,0,0,1,1,0") (ifseqformula "22"))
         (rule "simplifySelectOfCreate" (formula "22"))
         (rule "equalUnique" (formula "22") (term "1,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "15"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "equalUnique" (formula "22") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "22") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0,0"))
         (rule "replace_known_right" (formula "22") (term "0,0,1,0,0") (ifseqformula "28"))
         (rule "concrete_not_2" (formula "22") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "22") (term "1,0,0"))
         (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "7"))
         (rule "concrete_not_1" (formula "22") (term "1,0,0"))
         (rule "concrete_or_4" (formula "22") (term "0,0"))
         (rule "elementOfSingleton" (formula "22") (term "0,0"))
         (rule "eqClose" (formula "22") (term "0,0,0"))
         (rule "concrete_and_1" (formula "22") (term "0,0"))
         (rule "equalUnique" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "0,0,0,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "25") (term "1,0,1,1,0,0,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "24") (term "1,0,1,0,0,0,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "25") (term "1,1,1,1,0,0,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "25") (term "1,1,1,0,1,0,0,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "1,0,1,0,0,1,1,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0,0,1,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "1,1,1,1,0,0,0,1,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "24") (term "1,1,1,1,0,0,0,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0,0,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "1,0,1,0,0,0,1,0") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "28"))
         (rule "concrete_not_2" (formula "22") (term "0,0"))
         (rule "concrete_and_1" (formula "22") (term "0"))
         (rule "pullOutSelect" (formula "22") (term "1,1,0,1") (inst "selectSK=BinarySearch_query_1"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "20"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "elementOfEmpty" (formula "22") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "22") (term "0,0,0"))
         (rule "concrete_or_2" (formula "22") (term "0,0"))
         (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "28"))
         (rule "concrete_not_2" (formula "22") (term "0,0,0"))
         (rule "concrete_and_1" (formula "22") (term "0,0"))
         (rule "ifthenelse_negated" (formula "22") (term "0"))
         (rule "pullOutSelect" (formula "23") (term "0,1,0,1") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
         (rule "elementOfFreshLocs" (formula "23") (term "1,0,0"))
         (rule "elementOfEmpty" (formula "23") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "23") (term "0,0,0"))
         (rule "concrete_or_2" (formula "23") (term "0,0"))
         (rule "pullOutSelect" (formula "25") (term "1,1,0,0,0,1,0") (inst "selectSK=BinarySearch_size_1"))
         (rule "applyEq" (formula "24") (term "1,1,0,0,0,0,0") (ifseqformula "25"))
         (rule "applyEq" (formula "24") (term "1,1,0,0,0,1,0") (ifseqformula "25"))
         (rule "applyEq" (formula "27") (term "1,1,0,0,0,0") (ifseqformula "25"))
         (rule "applyEq" (formula "26") (term "1,1,0,0,0,0,0") (ifseqformula "25"))
         (rule "simplifySelectOfCreate" (formula "25"))
         (rule "replaceKnownSelect_taclet0_0" (formula "25") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "25") (term "2,0"))
         (rule "equalUnique" (formula "25") (term "1,0,0"))
         (rule "concrete_and_4" (formula "25") (term "0,0"))
         (rule "ifthenelse_false" (formula "25") (term "0"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,0,0,1,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "24") (term "1,1,0,0,0,0,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "24") (term "1,1,0,0,0,1,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "27") (term "1,1,0,0,0,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,0,0,0,0") (ifseqformula "25"))
         (rule "hideAuxiliaryEq" (formula "25"))
         (rule "pullOutSelect" (formula "25") (term "1,0,1,0,0,1,0") (inst "selectSK=BinarySearch_query_2"))
         (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "25"))
         (rule "applyEq" (formula "24") (term "1,1,0,0,1,0") (ifseqformula "25"))
         (rule "simplifySelectOfCreate" (formula "25"))
         (rule "replaceKnownSelect_taclet0_2" (formula "25") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "25") (term "2,0"))
         (rule "equalUnique" (formula "25") (term "1,0,0"))
         (rule "concrete_and_4" (formula "25") (term "0,0"))
         (rule "ifthenelse_false" (formula "25") (term "0"))
         (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "24") (term "1,1,0,0,1,0") (ifseqformula "25"))
         (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,1,0") (ifseqformula "25"))
         (rule "hideAuxiliaryEq" (formula "25"))
         (rule "pullOutSelect" (formula "22") (term "0,0,0") (inst "selectSK=java_lang_Object_created__0"))
         (rule "simplifySelectOfCreate" (formula "22"))
         (rule "equalUnique" (formula "22") (term "1,0,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0"))
         (rule "castDel" (formula "22") (term "1,0"))
         (rule "eqSymm" (formula "22") (term "0,0,0"))
         (rule "replace_known_right" (formula "22") (term "0,1,0,0") (ifseqformula "32"))
         (rule "concrete_not_2" (formula "22") (term "1,0,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0"))
         (rule "sortsDisjointModuloNull" (formula "22") (term "0,0"))
         (rule "replace_known_right" (formula "22") (term "1,0,0") (ifseqformula "32"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "15"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "equalUnique" (formula "22") (term "0,1,0,0,0"))
         (rule "concrete_not_1" (formula "22") (term "1,0,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0,0"))
         (rule "concrete_or_2" (formula "22") (term "0,0"))
         (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "7"))
         (rule "concrete_not_1" (formula "22") (term "1,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "0,0,0") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "7"))
         (rule "ifthenelse_true" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "24") (term "1,1,0,1") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "eqSymm" (formula "23") (term "1,0,1"))
         (rule "pullOutSelect" (formula "22") (term "1,2,0") (inst "selectSK=BinarySearch_numbers_1"))
         (rule "applyEq" (formula "23") (term "0,0,0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "1,0,0,1,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "22"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "20"))
         (rule "replaceKnownSelect_taclet010_5" (formula "22") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet010_7" (formula "22") (term "2,0"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "elementOfEmpty" (formula "22") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "22") (term "0,0,0"))
         (rule "concrete_or_2" (formula "22") (term "0,0"))
         (rule "replaceKnownSelect_taclet010_14" (formula "22") (term "0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet010_16" (formula "22") (term "0,0,1,0,0"))
         (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "29"))
         (rule "concrete_not_2" (formula "22") (term "0,0,0"))
         (rule "concrete_and_1" (formula "22") (term "0,0"))
         (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "7"))
         (rule "concrete_not_1" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "1,0,0,1,0,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "1,1,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "1,2,0") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "29"))
         (rule "concrete_not_2" (formula "22") (term "0,0,0"))
         (rule "concrete_and_1" (formula "22") (term "0,0"))
         (rule "ifthenelse_negated" (formula "22") (term "0"))
         (rule "pullOutSelect" (formula "22") (term "1,0") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfCreate" (formula "22"))
         (rule "equalUnique" (formula "22") (term "1,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "15"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "equalUnique" (formula "22") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "22") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0,0"))
         (rule "replace_known_right" (formula "22") (term "0,0,1,0,0") (ifseqformula "30"))
         (rule "concrete_not_2" (formula "22") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "22") (term "1,0,0"))
         (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "4"))
         (rule "concrete_not_1" (formula "22") (term "1,0,0"))
         (rule "concrete_or_4" (formula "22") (term "0,0"))
         (rule "elementOfSingleton" (formula "22") (term "0,0"))
         (rule "equalUnique" (formula "22") (term "1,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "pullOutSelect" (formula "22") (term "0,0,0") (inst "selectSK=java_lang_Object_created__1"))
         (rule "simplifySelectOfCreate" (formula "22"))
         (rule "equalUnique" (formula "22") (term "1,0,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0"))
         (rule "castDel" (formula "22") (term "1,0"))
         (rule "eqSymm" (formula "22") (term "0,0,0"))
         (rule "replace_known_right" (formula "22") (term "0,1,0,0") (ifseqformula "31"))
         (rule "concrete_not_2" (formula "22") (term "1,0,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0"))
         (rule "sortsDisjointModuloNull" (formula "22") (term "0,0"))
         (rule "replace_known_right" (formula "22") (term "1,0,0") (ifseqformula "31"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "15"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "equalUnique" (formula "22") (term "0,1,0,0,0"))
         (rule "concrete_not_1" (formula "22") (term "1,0,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0,0"))
         (rule "concrete_or_2" (formula "22") (term "0,0"))
         (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "4"))
         (rule "concrete_not_1" (formula "22") (term "1,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "0,0,0") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "4"))
         (rule "ifthenelse_true" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "1,1,0,1") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "eqSymm" (formula "22") (term "1,0,1"))
         (rule "inEqSimp_or_weaken0" (formula "24") (term "1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "1,0,1,0,0,0"))
         (rule "add_literals" (formula "24") (term "0,1,0,1,0,0,0"))
         (rule "add_zero_left" (formula "24") (term "1,0,1,0,0,0"))
         (rule "eqClose" (formula "24") (term "0,1,0,0,0"))
         (rule "ifthenelse_true_for" (formula "24") (term "1,0,0,0"))
         (rule "commute_and" (formula "23") (term "1"))
         (rule "nnf_imp2or" (formula "22") (term "0,0,0,0"))
         (rule "nnf_imp2or" (formula "23") (term "0,0,0,0"))
         (rule "nnf_imp2or" (formula "23") (term "0,0,1,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,1,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "24") (term "1") (ifseqformula "8"))
         (rule "concrete_and_3" (formula "24"))
         (rule "nnf_ex2all" (formula "24"))
         (rule "nnf_notEx" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
         (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
         (rule "concrete_and_1" (formula "24") (term "0"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "23") (term "1,1") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "23") (term "1"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "23") (term "1,1,0") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "23") (term "1,0"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "24") (term "0,1") (ifseqformula "9"))
         (rule "concrete_and_1" (formula "24") (term "1"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "24") (term "1,0") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "24") (term "0"))
         (rule "commute_or_2" (formula "23") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "1") (term "0,0,0"))
         (rule "commute_or" (formula "23") (term "0,0,0,0,0,0"))
         (rule "sequentialToParallel2" (formula "30"))
         (rule "simplifyUpdate2" (formula "30"))
         (rule "simplifyUpdate3" (formula "30") (term "1,0"))
         (rule "assignment" (formula "30") (term "1"))
         (rule "sequentialToParallel2" (formula "30"))
         (rule "simplifyUpdate3" (formula "30") (term "1,0"))
         (rule "methodCallReturn" (formula "30") (term "1"))
         (rule "assignment" (formula "30") (term "1"))
         (rule "sequentialToParallel2" (formula "30"))
         (rule "simplifyUpdate2" (formula "30"))
         (rule "simplifyUpdate3" (formula "30") (term "1,0"))
         (rule "applyOnElementary" (formula "30") (term "1,0"))
         (rule "applyOnPV" (formula "30") (term "0,1,0"))
         (rule "methodCallEmpty" (formula "30") (term "1"))
         (rule "tryEmpty" (formula "30") (term "1"))
         (rule "emptyModality" (formula "30") (term "1"))
         (rule "applyOnRigidFormula" (formula "30"))
         (rule "simplifyUpdate2" (formula "30") (term "1"))
         (rule "simplifyUpdate2" (formula "30") (term "0"))
         (rule "applyOnRigidFormula" (formula "30") (term "1"))
         (rule "simplifyUpdate1" (formula "30") (term "1,1"))
         (rule "applyOnPV" (formula "30") (term "0,1"))
         (rule "eqClose" (formula "30") (term "1"))
         (rule "concrete_and_3" (formula "30"))
         (rule "applyOnRigidFormula" (formula "30"))
         (rule "simplifyUpdate2" (formula "30") (term "1"))
         (rule "applyOnRigidFormula" (formula "30") (term "0"))
         (rule "simplifyUpdate2" (formula "30") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "30") (term "1,0"))
         (rule "simplifyUpdate1" (formula "30") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "30") (term "0,0"))
         (rule "applyOnRigidTerm" (formula "30") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "30") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "30") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "30") (term "0,0,1,0"))
         (rule "applyOnRigidFormula" (formula "30") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "30") (term "1,0,0,0"))
         (rule "applyOnPV" (formula "30") (term "0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "30") (term "2,0,1,0"))
         (rule "applyOnPV" (formula "30") (term "0,2,0,1,0"))
         (rule "pullOutSelect" (formula "30") (term "0,1,0") (inst "selectSK=arr_2"))
         (rule "applyOnPV" (formula "1") (term "0,0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
         (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
         (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "1") (term "0,0,0"))
         (rule "concrete_or_2" (formula "1") (term "0,0"))
         (rule "eqSymm" (formula "31") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "2,1,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,1,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,1,1,0"))
         (rule "replaceKnownSelect_taclet010_18" (formula "1") (term "1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet010_19" (formula "1") (term "1,1,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
         (rule "applyOnPV" (formula "1") (term "0,1,2,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,1,2,0"))
         (rule "simplifyUpdate1" (formula "1") (term "2,1,2,0"))
         (rule "replaceKnownSelect_taclet010_18" (formula "1") (term "1,2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet010_19" (formula "1") (term "1,2,0"))
         (rule "replaceKnownSelect_taclet010_20" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet010_22" (formula "1") (term "2,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,0,0"))
         (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "2,1,0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet010_18" (formula "1") (term "1,0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet010_19" (formula "1") (term "1,0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet010_23" (formula "1") (term "0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet010_25" (formula "1") (term "0,0,1,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "6"))
         (rule "concrete_not_1" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "31") (term "1,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "commute_and_2" (formula "30"))
         (rule "commute_and" (formula "30") (term "0"))
         (rule "cut_direct" (formula "30") (term "0,1,0"))
         (branch "CUT: result_0 = -1 TRUE"
            (rule "concrete_not_1" (formula "31") (term "1,0"))
            (rule "concrete_and_4" (formula "31") (term "0"))
            (rule "concrete_and_2" (formula "31"))
            (rule "impLeft" (formula "24") (userinteraction))
            (branch "Case 1"
               (rule "false_right" (formula "31"))
               (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "1"))
               (rule "concrete_impl_4" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "equiv_left" (formula "19"))
               (branch
                  (rule "exLeft" (formula "19") (inst "sk=i_0"))
                  (rule "andLeft" (formula "19"))
                  (rule "andLeft" (formula "19"))
                  (rule "exLeft" (formula "22") (inst "sk=i_1"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "inEqSimp_commuteLeq" (formula "20"))
                  (rule "inEqSimp_commuteLeq" (formula "23"))
                  (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=arr_3"))
                  (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "17"))
                  (rule "elementOfFreshLocs" (formula "21") (term "1,0,0"))
                  (rule "equalUnique" (formula "21") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "21") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "21") (term "0,0,0"))
                  (rule "eqSymm" (formula "22"))
                  (rule "applyEqReverse" (formula "21") (term "1") (ifseqformula "22"))
                  (rule "hideAuxiliaryEq" (formula "22"))
                  (rule "replace_known_right" (formula "21") (term "0,0,1,0,0") (ifseqformula "33"))
                  (rule "concrete_not_2" (formula "21") (term "0,1,0,0"))
                  (rule "concrete_and_1" (formula "21") (term "1,0,0"))
                  (rule "replace_known_left" (formula "21") (term "0,1,0,0") (ifseqformula "6"))
                  (rule "concrete_not_1" (formula "21") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "21") (term "0,0"))
                  (rule "elementOfSingleton" (formula "21") (term "0,0"))
                  (rule "equalUnique" (formula "21") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "21") (term "0,0"))
                  (rule "ifthenelse_false" (formula "21") (term "0"))
                  (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_4"))
                  (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "17"))
                  (rule "elementOfFreshLocs" (formula "24") (term "1,0,0"))
                  (rule "equalUnique" (formula "24") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "24") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "24") (term "0,0,0"))
                  (rule "eqSymm" (formula "25"))
                  (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "25"))
                  (rule "hideAuxiliaryEq" (formula "25"))
                  (rule "replace_known_left" (formula "24") (term "0,1,1,0,0") (ifseqformula "6"))
                  (rule "concrete_not_1" (formula "24") (term "1,1,0,0"))
                  (rule "concrete_and_4" (formula "24") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "24") (term "0,0"))
                  (rule "elementOfSingleton" (formula "24") (term "0,0"))
                  (rule "equalUnique" (formula "24") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "24") (term "0,0"))
                  (rule "ifthenelse_false" (formula "24") (term "0"))
                  (rule "andRight" (formula "29"))
                  (branch
                     (rule "allRight" (formula "29") (inst "sk=j_0"))
                     (rule "allRight" (formula "29") (inst "sk=m_0"))
                     (rule "orRight" (formula "29"))
                     (rule "orRight" (formula "29"))
                     (rule "orRight" (formula "29"))
                     (rule "inEqSimp_leqRight" (formula "32"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_geqRight" (formula "31"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "32"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_5"))
                     (rule "simplifySelectOfCreate" (formula "4"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "22"))
                     (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                     (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                     (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "37"))
                     (rule "concrete_not_2" (formula "4") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "4") (term "1,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "11"))
                     (rule "concrete_not_1" (formula "4") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "4") (term "0,0"))
                     (rule "elementOfSingleton" (formula "4") (term "0,0"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "4"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_6"))
                     (rule "simplifySelectOfCreate" (formula "5"))
                     (rule "equalUnique" (formula "5") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "5") (term "0,0"))
                     (rule "ifthenelse_false" (formula "5") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "23"))
                     (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                     (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "5") (term "0,0,0"))
                     (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "38"))
                     (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "5") (term "1,0,0"))
                     (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "12"))
                     (rule "concrete_not_1" (formula "5") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "5") (term "0,0"))
                     (rule "elementOfSingleton" (formula "5") (term "0,0"))
                     (rule "equalUnique" (formula "5") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "5") (term "0,0"))
                     (rule "ifthenelse_false" (formula "5") (term "0"))
                     (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "cut_direct" (formula "9") (term "0"))
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "allLeft" (formula "30") (inst "t=j_0"))
                        (rule "replaceKnownSelect_taclet0000010_37" (formula "30") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000010_38" (formula "30") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "30") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "30") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "30") (term "0,0,0"))
                        (rule "allLeft" (formula "7") (inst "t=j_0"))
                        (rule "replaceKnownSelect_taclet0000010_36" (formula "7") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000010_38" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "7") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "7") (term "0,0,0"))
                        (rule "allLeft" (formula "31") (inst "t=m_0"))
                        (rule "replaceKnownSelect_taclet0000010_34" (formula "31") (term "0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000010_35" (formula "31") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "31") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "31") (term "0,0"))
                        (rule "concrete_or_2" (formula "31") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                        (rule "add_literals" (formula "31") (term "0,0,1"))
                        (rule "leq_literals" (formula "31") (term "0,1"))
                        (rule "concrete_and_2" (formula "31") (term "1"))
                        (rule "concrete_or_4" (formula "31"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "31"))
                        (rule "andLeft" (formula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0"))
                        (rule "add_literals" (formula "4") (term "0"))
                        (rule "leq_literals" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "9"))
                        (rule "allLeft" (formula "30") (inst "t=j_0"))
                        (rule "replaceKnownSelect_taclet0000010_37" (formula "30") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000010_38" (formula "30") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,1,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "30") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "30") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "30") (term "0,0,0"))
                        (rule "allLeft" (formula "7") (inst "t=j_0"))
                        (rule "replaceKnownSelect_taclet0000010_36" (formula "7") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000010_38" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "concrete_and_2" (formula "7") (term "1,0,0,0"))
                        (rule "concrete_or_4" (formula "7") (term "0,0,0"))
                        (rule "allLeft" (formula "31") (inst "t=m_0"))
                        (rule "replaceKnownSelect_taclet0000010_34" (formula "31") (term "0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000010_35" (formula "31") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "31") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "31") (term "0,0"))
                        (rule "concrete_or_2" (formula "31") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                        (rule "add_literals" (formula "31") (term "0,0,1"))
                        (rule "leq_literals" (formula "31") (term "0,1"))
                        (rule "concrete_and_2" (formula "31") (term "1"))
                        (rule "concrete_or_4" (formula "31"))
                        (rule "inEqSimp_contradInEq0" (formula "31") (ifseqformula "4"))
                        (rule "andLeft" (formula "31"))
                        (rule "inEqSimp_homoInEq1" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0"))
                        (rule "add_literals" (formula "31") (term "0"))
                        (rule "leq_literals" (formula "31"))
                        (rule "closeFalse" (formula "31"))
                     )
                  )
                  (branch
                     (rule "nnf_ex2all" (formula "29"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "allLeft" (formula "1") (inst "t=i_0"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "21"))
                     (rule "qeq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "concrete_or_2" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0"))
                     (rule "concrete_or_2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_5"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "replaceKnownSelect_taclet000010_29" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000010_30" (formula "1") (term "2,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                     (rule "eqClose" (formula "31"))
                     (rule "closeTrue" (formula "31"))
                  )
               )
               (branch
                  (rule "nnf_ex2all" (formula "24"))
                  (rule "nnf_ex2all" (formula "24"))
                  (rule "nnf_notAnd" (formula "2") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                  (rule "andRight" (formula "25"))
                  (branch
                     (rule "allRight" (formula "25") (inst "sk=j_0"))
                     (rule "allRight" (formula "25") (inst "sk=m_0"))
                     (rule "orRight" (formula "25"))
                     (rule "orRight" (formula "25"))
                     (rule "orRight" (formula "25"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_geqRight" (formula "27"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfCreate" (formula "4"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "24"))
                     (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                     (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "13"))
                     (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "4") (term "0,0"))
                     (rule "elementOfSingleton" (formula "4") (term "0,0"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "4"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "3"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_4"))
                     (rule "simplifySelectOfCreate" (formula "5"))
                     (rule "equalUnique" (formula "5") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "5") (term "0,0"))
                     (rule "ifthenelse_false" (formula "5") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "25"))
                     (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                     (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "5") (term "0,0,0"))
                     (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "34"))
                     (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "5") (term "1,0,0"))
                     (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "14"))
                     (rule "concrete_not_1" (formula "5") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "5") (term "0,0"))
                     (rule "elementOfSingleton" (formula "5") (term "0,0"))
                     (rule "equalUnique" (formula "5") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "5") (term "0,0"))
                     (rule "ifthenelse_false" (formula "5") (term "0"))
                     (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "cut_direct" (formula "11") (term "0"))
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "allLeft" (formula "7") (inst "t=q_0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "22"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "7") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "7") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "7") (term "1,0"))
                        (rule "concrete_or_4" (formula "7") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_2" (formula "7") (term "0"))
                        (rule "concrete_or_2" (formula "7"))
                        (rule "notLeft" (formula "7"))
                        (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "31"))
                        (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "14"))
                        (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "1") (term "0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "30"))
                        (rule "close" (formula "30") (ifseqformula "22"))
                     )
                     (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "11"))
                        (rule "allLeft" (formula "7") (inst "t=q_0"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "7") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "7") (term "0,0"))
                        (rule "concrete_or_2" (formula "7") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "22"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_2" (formula "7") (term "0"))
                        (rule "concrete_or_2" (formula "7"))
                        (rule "notLeft" (formula "7"))
                        (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "31"))
                        (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "14"))
                        (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "1") (term "0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "30"))
                        (rule "close" (formula "30") (ifseqformula "22"))
                     )
                  )
                  (branch
                     (rule "nnf_ex2all" (formula "25"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "allLeft" (formula "3") (inst "t=q_0"))
                     (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "17"))
                     (rule "qeq_literals" (formula "3") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "3") (term "0,0"))
                     (rule "concrete_or_2" (formula "3") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "leq_literals" (formula "3") (term "0,0"))
                     (rule "concrete_and_2" (formula "3") (term "0"))
                     (rule "concrete_or_2" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                     (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "27"))
                     (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "31"))
                     (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
                     (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "1") (term "0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSymm" (formula "26"))
                     (rule "close" (formula "26") (ifseqformula "18"))
                  )
               )
            )
            (branch "Case 2"
               (rule "andLeft" (formula "24") (userinteraction))
               (rule "notLeft" (formula "24") (userinteraction))
               (rule "close" (formula "26") (ifseqformula "1") (userinteraction))
            )
         )
         (branch "CUT: result_0 = -1 FALSE"
            (rule "concrete_not_2" (formula "31") (term "1,0"))
            (rule "concrete_and_3" (formula "31") (term "0"))
            (rule "cut_direct" (formula "31") (term "1"))
            (branch "CUT: {heap:=heapAfter_search}self.query = self.numbers[result_0] TRUE"
               (rule "applyOnRigidTerm" (formula "1") (term "0"))
               (rule "applyOnPV" (formula "1") (term "0,0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0"))
               (rule "simplifyUpdate1" (formula "1") (term "2,0"))
               (rule "replaceKnownSelect_taclet010_8" (formula "1") (term "0"))
               (rule "replaceKnownAuxiliaryConstant_taclet010_17" (formula "1") (term "0"))
               (rule "eqSymm" (formula "1"))
               (rule "andRight" (formula "32"))
               (branch
                  (rule "applyOnRigidFormula" (formula "32"))
                  (rule "simplifyUpdate1" (formula "32") (term "1"))
                  (rule "applyOnPV" (formula "32") (term "0"))
                  (rule "Class_invariant_axiom_for_BinarySearch" (formula "32") (ifseqformula "10"))
                  (rule "closeTrue" (formula "32"))
               )
               (branch
                  (rule "closeTrue" (formula "32"))
               )
            )
            (branch "CUT: {heap:=heapAfter_search}self.query = self.numbers[result_0] FALSE"
               (rule "concrete_and_4" (formula "32"))
               (rule "applyOnRigidTerm" (formula "31") (term "0"))
               (rule "simplifyUpdate1" (formula "31") (term "2,0"))
               (rule "simplifyUpdate1" (formula "31") (term "1,0"))
               (rule "applyOnPV" (formula "31") (term "0,0"))
               (rule "replaceKnownSelect_taclet010_8" (formula "31") (term "0"))
               (rule "replaceKnownAuxiliaryConstant_taclet010_17" (formula "31") (term "0"))
               (rule "eqSymm" (formula "31"))
               (rule "impLeft" (formula "24") (userinteraction))
               (branch "Case 1"
                  (rule "false_right" (formula "32"))
                  (rule "allRight" (formula "24") (inst "sk=i_0"))
                  (rule "orRight" (formula "24"))
                  (rule "notRight" (formula "25"))
                  (rule "orRight" (formula "25"))
                  (rule "replace_known_right" (formula "24") (term "0,0,1") (ifseqformula "32"))
                  (rule "concrete_not_2" (formula "24") (term "0,1"))
                  (rule "concrete_and_1" (formula "24") (term "1"))
                  (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "33"))
                  (rule "concrete_impl_3" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "26"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                  (rule "simplifySelectOfCreate" (formula "3"))
                  (rule "equalUnique" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
                  (rule "elementOfFreshLocs" (formula "3") (term "1,0,0"))
                  (rule "equalUnique" (formula "3") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "3") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "3") (term "0,0,0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "replace_known_right" (formula "3") (term "0,0,1,0,0") (ifseqformula "30"))
                  (rule "concrete_not_2" (formula "3") (term "0,1,0,0"))
                  (rule "concrete_and_1" (formula "3") (term "1,0,0"))
                  (rule "replace_known_left" (formula "3") (term "0,1,0,0") (ifseqformula "8"))
                  (rule "concrete_not_1" (formula "3") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "3") (term "0,0"))
                  (rule "elementOfSingleton" (formula "3") (term "0,0"))
                  (rule "equalUnique" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "equiv_left" (formula "21"))
                  (branch
                     (rule "exLeft" (formula "22") (inst "sk=i_1"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "exLeft" (formula "21") (inst "sk=i_2"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "inEqSimp_commuteLeq" (formula "25"))
                     (rule "inEqSimp_commuteLeq" (formula "22"))
                     (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=arr_4"))
                     (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "19"))
                     (rule "elementOfFreshLocs" (formula "26") (term "1,0,0"))
                     (rule "equalUnique" (formula "26") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "26") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "26") (term "0,0,0"))
                     (rule "eqSymm" (formula "27"))
                     (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "27"))
                     (rule "hideAuxiliaryEq" (formula "27"))
                     (rule "replace_known_right" (formula "26") (term "0,0,1,0,0") (ifseqformula "35"))
                     (rule "concrete_not_2" (formula "26") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "26") (term "1,0,0"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0,0") (ifseqformula "8"))
                     (rule "concrete_not_1" (formula "26") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "26") (term "0,0"))
                     (rule "elementOfSingleton" (formula "26") (term "0,0"))
                     (rule "equalUnique" (formula "26") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "26") (term "0,0"))
                     (rule "ifthenelse_false" (formula "26") (term "0"))
                     (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=arr_5"))
                     (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "19"))
                     (rule "elementOfFreshLocs" (formula "23") (term "1,0,0"))
                     (rule "equalUnique" (formula "23") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "23") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "23") (term "0,0,0"))
                     (rule "eqSymm" (formula "24"))
                     (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "24"))
                     (rule "hideAuxiliaryEq" (formula "24"))
                     (rule "replace_known_right" (formula "23") (term "0,0,1,0,0") (ifseqformula "35"))
                     (rule "concrete_not_2" (formula "23") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "23") (term "1,0,0"))
                     (rule "replace_known_left" (formula "23") (term "0,1,0,0") (ifseqformula "8"))
                     (rule "concrete_not_1" (formula "23") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "23") (term "0,0"))
                     (rule "elementOfSingleton" (formula "23") (term "0,0"))
                     (rule "equalUnique" (formula "23") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "23") (term "0,0"))
                     (rule "ifthenelse_false" (formula "23") (term "0"))
                     (rule "andRight" (formula "31"))
                     (branch
                        (rule "allRight" (formula "31") (inst "sk=j_0"))
                        (rule "allRight" (formula "31") (inst "sk=m_0"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "inEqSimp_leqRight" (formula "34"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "34"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "34"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_6"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "24"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                        (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "13"))
                        (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "4") (term "0,0"))
                        (rule "elementOfSingleton" (formula "4") (term "0,0"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_7"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "25"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "5") (term "0,0,0"))
                        (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "40"))
                        (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "1,0,0"))
                        (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "14"))
                        (rule "concrete_not_1" (formula "5") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "5") (term "0,0"))
                        (rule "elementOfSingleton" (formula "5") (term "0,0"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "cut_direct" (formula "11") (term "0"))
                        (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                           (rule "concrete_or_1" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "allLeft" (formula "32") (inst "t=j_0"))
                           (rule "replaceKnownSelect_taclet00011010_40" (formula "32") (term "0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00011010_41" (formula "32") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                           (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                           (rule "allLeft" (formula "9") (inst "t=j_0"))
                           (rule "replaceKnownSelect_taclet00011010_39" (formula "9") (term "0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00011010_41" (formula "9") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "9") (term "0,1,0,0,0"))
                           (rule "concrete_and_2" (formula "9") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "9") (term "0,0,0"))
                           (rule "allLeft" (formula "9") (inst "t=m_0"))
                           (rule "replaceKnownSelect_taclet00011010_36" (formula "9") (term "0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00011010_38" (formula "9") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "9") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "9") (term "0,0"))
                           (rule "concrete_or_2" (formula "9") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                           (rule "add_literals" (formula "9") (term "0,0,1"))
                           (rule "leq_literals" (formula "9") (term "0,1"))
                           (rule "concrete_and_2" (formula "9") (term "1"))
                           (rule "concrete_or_4" (formula "9"))
                           (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "4"))
                           (rule "andLeft" (formula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "9"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0"))
                           (rule "polySimp_addComm0" (formula "9") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                           (rule "add_literals" (formula "9") (term "1,1,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0"))
                           (rule "add_zero_right" (formula "9") (term "0"))
                           (rule "leq_literals" (formula "9"))
                           (rule "closeFalse" (formula "9"))
                        )
                        (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                           (rule "concrete_or_2" (formula "11"))
                           (rule "allLeft" (formula "32") (inst "t=j_0"))
                           (rule "replaceKnownSelect_taclet00011010_40" (formula "32") (term "0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00011010_41" (formula "32") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                           (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                           (rule "allLeft" (formula "9") (inst "t=j_0"))
                           (rule "replaceKnownSelect_taclet00011010_39" (formula "9") (term "0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00011010_41" (formula "9") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "9") (term "0,1,0,0,0"))
                           (rule "concrete_and_2" (formula "9") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "9") (term "0,0,0"))
                           (rule "allLeft" (formula "9") (inst "t=m_0"))
                           (rule "replaceKnownSelect_taclet00011010_36" (formula "9") (term "0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00011010_38" (formula "9") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "9") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "9") (term "0,0"))
                           (rule "concrete_or_2" (formula "9") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "9") (term "0,0,1"))
                           (rule "leq_literals" (formula "9") (term "0,1"))
                           (rule "concrete_and_2" (formula "9") (term "1"))
                           (rule "concrete_or_4" (formula "9"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "9"))
                           (rule "andLeft" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_literals" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "31"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "cut_direct" (formula "7") (term "0"))
                        (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                           (rule "concrete_or_1" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "allLeft" (formula "1") (inst "t=i_2"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "24"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "leq_literals" (formula "1") (term "0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_6"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "replaceKnownSelect_taclet0011010_34" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0011010_35" (formula "1") (term "2,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                           (rule "eqClose" (formula "33"))
                           (rule "closeTrue" (formula "33"))
                        )
                        (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                           (rule "concrete_or_2" (formula "7"))
                           (rule "allLeft" (formula "1") (inst "t=i_2"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "24"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "1") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "1") (term "1,0"))
                           (rule "concrete_or_4" (formula "1") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "1") (term "0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_6"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "replaceKnownSelect_taclet0011010_34" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0011010_35" (formula "1") (term "2,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                           (rule "eqClose" (formula "33"))
                           (rule "closeTrue" (formula "33"))
                        )
                     )
                  )
                  (branch
                     (rule "nnf_ex2all" (formula "26"))
                     (rule "nnf_ex2all" (formula "26"))
                     (rule "nnf_notAnd" (formula "2") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "andRight" (formula "27"))
                     (branch
                        (rule "allRight" (formula "27") (inst "sk=j_0"))
                        (rule "allRight" (formula "27") (inst "sk=m_0"))
                        (rule "orRight" (formula "27"))
                        (rule "orRight" (formula "27"))
                        (rule "orRight" (formula "27"))
                        (rule "inEqSimp_leqRight" (formula "30"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "30"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "30"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "26"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                        (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "15"))
                        (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "4") (term "0,0"))
                        (rule "elementOfSingleton" (formula "4") (term "0,0"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "27"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "5") (term "0,0,0"))
                        (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "36"))
                        (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "1,0,0"))
                        (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "16"))
                        (rule "concrete_not_1" (formula "5") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "5") (term "0,0"))
                        (rule "elementOfSingleton" (formula "5") (term "0,0"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "cut_direct" (formula "13") (term "0"))
                        (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                           (rule "concrete_or_1" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "allLeft" (formula "28") (inst "t=j_0"))
                           (rule "replaceKnownSelect_taclet01011010_36" (formula "28") (term "0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01011010_37" (formula "28") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                           (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                           (rule "allLeft" (formula "6") (inst "t=i_0"))
                           (rule "replaceKnownSelect_taclet011010_30" (formula "6") (term "0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011010_31" (formula "6") (term "0,0,1"))
                           (rule "eqClose" (formula "6") (term "0,1"))
                           (rule "concrete_not_1" (formula "6") (term "1"))
                           (rule "concrete_or_4" (formula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1"))
                           (rule "mul_literals" (formula "6") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                           (rule "add_literals" (formula "6") (term "0,0,1"))
                           (rule "leq_literals" (formula "6") (term "0,1"))
                           (rule "concrete_and_2" (formula "6") (term "1"))
                           (rule "concrete_or_4" (formula "6"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "6") (term "0"))
                           (rule "concrete_and_2" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                        (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                           (rule "concrete_or_2" (formula "13"))
                           (rule "allLeft" (formula "28") (inst "t=j_0"))
                           (rule "replaceKnownSelect_taclet01011010_36" (formula "28") (term "0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01011010_37" (formula "28") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                           (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                           (rule "allLeft" (formula "6") (inst "t=i_0"))
                           (rule "replaceKnownSelect_taclet011010_30" (formula "6") (term "0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011010_31" (formula "6") (term "0,0,1"))
                           (rule "eqClose" (formula "6") (term "0,1"))
                           (rule "concrete_not_1" (formula "6") (term "1"))
                           (rule "concrete_or_4" (formula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
                           (rule "mul_literals" (formula "6") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1"))
                           (rule "leq_literals" (formula "6") (term "0,1"))
                           (rule "concrete_and_2" (formula "6") (term "1"))
                           (rule "concrete_or_4" (formula "6"))
                           (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                           (rule "concrete_and_2" (formula "10"))
                           (rule "closeFalse" (formula "10"))
                        )
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "27"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "cut_direct" (formula "9") (term "0"))
                        (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "allLeft" (formula "3") (inst "t=q_0"))
                           (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
                           (rule "add_literals" (formula "3") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "3") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "3") (term "1,0"))
                           (rule "concrete_or_4" (formula "3") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "19"))
                           (rule "qeq_literals" (formula "3") (term "0,0"))
                           (rule "concrete_and_2" (formula "3") (term "0"))
                           (rule "concrete_or_2" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "33"))
                           (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "12"))
                           (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                           (rule "concrete_or_4" (formula "1") (term "0,0"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "28"))
                           (rule "close" (formula "28") (ifseqformula "20"))
                        )
                        (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                           (rule "concrete_or_2" (formula "9"))
                           (rule "allLeft" (formula "3") (inst "t=q_0"))
                           (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "19"))
                           (rule "qeq_literals" (formula "3") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "3") (term "0,0"))
                           (rule "concrete_or_2" (formula "3") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0"))
                           (rule "leq_literals" (formula "3") (term "0,0"))
                           (rule "concrete_and_2" (formula "3") (term "0"))
                           (rule "concrete_or_2" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "12"))
                           (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                           (rule "concrete_or_4" (formula "1") (term "0,0"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "28"))
                           (rule "close" (formula "28") (ifseqformula "20"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "close" (formula "30") (ifseqformula "24"))
               )
            )
         )
      )
      (branch "Exceptional Post (search)"
         (rule "instanceof_static_type" (formula "20") (term "0,0,0,1,1,0,0,1,1,1,1,1"))
         (rule "eqClose" (formula "20") (term "0,0,1,1,0,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,0,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,0,1,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,1,0,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,1,0,1,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,0,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,0,1,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,1,0,1,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,1,1,0,1,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,1,0,1,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,1,1,0,1,0,1,1,1,1,1"))
         (rule "inInt" (formula "20") (term "1,0,0,0,0,1,0,1,0,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "20") (term "0,0,0,0,1,0,1,0,1,1,1,1,1"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "eqSymm" (formula "20") (term "1,1,0,0,0,0,0,0,1,1,1,1,1"))
         (rule "sequentialToParallel2" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "concrete_impl_1" (formula "21") (term "0,1,1,0,0,1,1,1"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "simplifyUpdate3" (formula "20") (term "1,0"))
         (rule "parallelWithSkip2" (formula "20") (term "0"))
         (rule "applyOnElementary" (formula "21") (term "1,0"))
         (rule "applyOnPV" (formula "21") (term "0,1,0"))
         (rule "sequentialToParallel2" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "simplifyUpdate3" (formula "21") (term "1,0"))
         (rule "andLeft" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "andLeft" (formula "23"))
         (rule "notLeft" (formula "21"))
         (rule "applyOnRigidFormula" (formula "20"))
         (rule "simplifyUpdate1" (formula "20") (term "1"))
         (rule "applyOnRigidFormula" (formula "24"))
         (rule "simplifyUpdate2" (formula "24") (term "1"))
         (rule "simplifyUpdate2" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "21"))
         (rule "simplifyUpdate1" (formula "21") (term "1"))
         (rule "applyOnRigidFormula" (formula "23"))
         (rule "simplifyUpdate2" (formula "23") (term "1"))
         (rule "simplifyUpdate2" (formula "23") (term "0"))
         (rule "applyOnRigidFormula" (formula "22"))
         (rule "simplifyUpdate2" (formula "22") (term "0"))
         (rule "simplifyUpdate2" (formula "22") (term "1"))
         (rule "applyOnRigidTerm" (formula "20") (term "0"))
         (rule "simplifyUpdate1" (formula "20") (term "2,0"))
         (rule "simplifyUpdate1" (formula "20") (term "1,0"))
         (rule "applyOnPV" (formula "20") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1"))
         (rule "simplifyUpdate2" (formula "24") (term "1,1"))
         (rule "replace_known_right" (formula "24") (term "1,1") (ifseqformula "25"))
         (rule "concrete_and_4" (formula "24") (term "1"))
         (rule "concrete_impl_3" (formula "24"))
         (rule "notLeft" (formula "24"))
         (rule "applyOnRigidTerm" (formula "21") (term "0"))
         (rule "simplifyUpdate1" (formula "21") (term "2,0"))
         (rule "applyOnPV" (formula "21") (term "0,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (ifseqformula "20"))
         (rule "simplifyUpdate1" (formula "21") (term "1,0,0"))
         (rule "simplifyUpdate1" (formula "21") (term "1,0,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "1"))
         (rule "simplifyUpdate2" (formula "23") (term "1,1"))
         (rule "replace_known_right" (formula "23") (term "1,1") (ifseqformula "25"))
         (rule "concrete_and_4" (formula "23") (term "1"))
         (rule "concrete_impl_3" (formula "23"))
         (rule "notLeft" (formula "23"))
         (rule "applyOnRigidFormula" (formula "22") (term "0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "0,1"))
         (rule "replace_known_right" (formula "22") (term "0,0,1") (ifseqformula "25"))
         (rule "concrete_not_2" (formula "22") (term "0,1"))
         (rule "concrete_and_1" (formula "22") (term "1"))
         (rule "applyOnRigidFormula" (formula "24"))
         (rule "applyOnRigidFormula" (formula "23"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,1"))
         (rule "simplifyUpdate1" (formula "22") (term "1,0,1"))
         (rule "applyOnPV" (formula "22") (term "0,0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,1"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1"))
         (rule "applyOnPV" (formula "24") (term "0,1,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,1,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0"))
         (rule "applyOnPV" (formula "23") (term "0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0,0,0,0"))
         (rule "simplifyUpdate2" (formula "22") (term "0,0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0,0,1"))
         (rule "simplifyUpdate2" (formula "24") (term "0,0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0,0,0"))
         (rule "simplifyUpdate2" (formula "24") (term "0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "0,1,0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,1,0,0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "0,1,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "0,1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,1,1"))
         (rule "simplifyUpdate2" (formula "23") (term "0,0,0,0,1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,1"))
         (rule "simplifyUpdate2" (formula "23") (term "0,0,0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,0,1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,0,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "0,0,1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,0,0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,0,0,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "0,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,0,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,0,1,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,0,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,0,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,0,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,0,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,0,1,0,0,1"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,1,0,0,1"))
         (rule "applyOnRigidTerm" (formula "24") (term "0,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "2,0,0,1,0,0,1"))
         (rule "applyOnPV" (formula "24") (term "0,0,0,1,0,0,1"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,0,0,1"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,1,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0,0,1,1"))
         (rule "applyOnPV" (formula "23") (term "0,0,1,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,0,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0,0,1"))
         (rule "applyOnPV" (formula "23") (term "0,0,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,0,1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,0,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,0,0,1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0,0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,0,0,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,0,0,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,0,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,0,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,0,1,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "22") (term "1,1,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,1,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "2,1,1,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1,1,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,0,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,0,1,0,0,1"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,0,1,0,0,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,0,1,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,0,0,1,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,0,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,0,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,1,1,0,0,0,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,1,1,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,0,0,0,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,0,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,0,0,0,1"))
         (rule "inEqSimp_gtToGeq" (formula "22") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "22") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,0,0,1"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "22") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1"))
         (rule "pullOutSelect" (formula "21") (term "0,0") (inst "selectSK=java_lang_Object_created__0"))
         (rule "simplifySelectOfCreate" (formula "21"))
         (rule "equalUnique" (formula "21") (term "1,0,0"))
         (rule "concrete_and_3" (formula "21") (term "0,0"))
         (rule "castDel" (formula "21") (term "1,0"))
         (rule "replace_known_right" (formula "21") (term "0,1,0,0") (ifseqformula "31"))
         (rule "concrete_not_2" (formula "21") (term "1,0,0"))
         (rule "concrete_and_3" (formula "21") (term "0,0"))
         (rule "sortsDisjointModuloNull" (formula "21") (term "0,0"))
         (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "31"))
         (rule "concrete_and_2" (formula "21") (term "0,0"))
         (rule "ifthenelse_false" (formula "21") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "15"))
         (rule "elementOfFreshLocs" (formula "21") (term "1,0,0"))
         (rule "equalUnique" (formula "21") (term "0,1,0,0,0"))
         (rule "concrete_not_1" (formula "21") (term "1,0,0,0"))
         (rule "concrete_and_4" (formula "21") (term "0,0,0"))
         (rule "concrete_or_2" (formula "21") (term "0,0"))
         (rule "replace_known_right" (formula "21") (term "0,0,0,0") (ifseqformula "26"))
         (rule "concrete_not_2" (formula "21") (term "0,0,0"))
         (rule "concrete_and_1" (formula "21") (term "0,0"))
         (rule "ifthenelse_negated" (formula "21") (term "0"))
         (rule "pullOutSelect" (formula "24") (term "0,0,0") (inst "selectSK=BinarySearch_numbers_0"))
         (rule "applyEq" (formula "24") (term "1,1,1,0,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,1,1,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,1,1,1,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,0,1,0,0,1,1") (ifseqformula "1"))
         (rule "applyEq" (formula "24") (term "1,0,1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,0,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "24") (term "1,0,0,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "24") (term "1,1,1,1,0,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
         (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "8"))
         (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "1,0,0"))
         (rule "concrete_or_4" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (rule "eqClose" (formula "1") (term "0,0,0"))
         (rule "concrete_and_1" (formula "1") (term "0,0"))
         (rule "equalUnique" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "24") (term "1,0,1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,0,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "24") (term "1,1,1,0,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,1,1,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,0,1,0,0,1,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,1,1,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "24") (term "1,1,1,1,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "30"))
         (rule "concrete_not_2" (formula "24") (term "0"))
         (rule "concrete_and_1" (formula "24"))
         (rule "pullOutSelect" (formula "23") (term "1,1,0,0,0,0,0") (inst "selectSK=BinarySearch_size_1"))
         (rule "applyEq" (formula "25") (term "1,1,0,0,0,0") (ifseqformula "23"))
         (rule "applyEq" (formula "25") (term "1,1,0,0,0,1") (ifseqformula "23"))
         (rule "applyEq" (formula "26") (term "1,1,0,0,0,1") (ifseqformula "23"))
         (rule "applyEq" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "23"))
         (rule "simplifySelectOfCreate" (formula "23"))
         (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "2,0"))
         (rule "equalUnique" (formula "23") (term "1,0,0"))
         (rule "concrete_and_4" (formula "23") (term "0,0"))
         (rule "ifthenelse_false" (formula "23") (term "0"))
         (rule "applyEqReverse" (formula "25") (term "1,1,0,0,0,0") (ifseqformula "23"))
         (rule "applyEqReverse" (formula "24") (term "1,1,0,0,0,0,0") (ifseqformula "23"))
         (rule "applyEqReverse" (formula "25") (term "1,1,0,0,0,1") (ifseqformula "23"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,0,0,1") (ifseqformula "23"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "23"))
         (rule "hideAuxiliaryEq" (formula "23"))
         (rule "pullOutSelect" (formula "25") (term "1,0,1,0,0,1") (inst "selectSK=BinarySearch_query_1"))
         (rule "applyEq" (formula "25") (term "1,1,0,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "2,0"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "25") (term "1,1,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "inEqSimp_or_weaken0" (formula "23") (term "1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "1,0,1,0,0,0,0"))
         (rule "add_literals" (formula "23") (term "0,1,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "23") (term "1,0,1,0,0,0,0"))
         (rule "eqClose" (formula "23") (term "0,1,0,0,0,0"))
         (rule "ifthenelse_true_for" (formula "23") (term "1,0,0,0,0"))
         (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
         (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
         (rule "commute_and" (formula "23") (term "1"))
         (rule "nnf_imp2or" (formula "25") (term "0,0,1"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "25") (term "0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,1"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,1"))
         (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,1"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,1"))
         (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "23") (term "1,0") (ifseqformula "8"))
         (rule "concrete_and_3" (formula "23") (term "0"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "25") (term "1,1") (ifseqformula "8"))
         (rule "concrete_and_3" (formula "25") (term "1"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "24") (term "1,1") (ifseqformula "8"))
         (rule "concrete_and_3" (formula "24") (term "1"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "23") (term "1,1") (ifseqformula "8"))
         (rule "concrete_and_3" (formula "23") (term "1"))
         (rule "commute_and_2" (formula "23") (term "0,0,0,0"))
         (rule "equiv_left" (formula "17") (userinteraction))
         (branch "Case 1"
            (rule "exLeft" (formula "17") (inst "sk=i_0") (userinteraction))
            (rule "exLeft" (formula "18") (inst "sk=i_1") (userinteraction))
            (rule "andLeft" (formula "17") (userinteraction))
            (rule "andLeft" (formula "19") (userinteraction))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "20"))
            (rule "sequentialToParallel2" (formula "37"))
            (rule "simplifyUpdate2" (formula "37"))
            (rule "simplifyUpdate3" (formula "37") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
            (rule "inEqSimp_commuteLeq" (formula "21"))
            (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "15"))
            (rule "elementOfFreshLocs" (formula "19") (term "1,0,0"))
            (rule "equalUnique" (formula "19") (term "0,1,0,0,0"))
            (rule "concrete_not_2" (formula "19") (term "1,0,0,0"))
            (rule "concrete_and_3" (formula "19") (term "0,0,0"))
            (rule "eqSymm" (formula "20"))
            (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "20"))
            (rule "hideAuxiliaryEq" (formula "20"))
            (rule "replace_known_right" (formula "19") (term "0,0,1,0,0") (ifseqformula "35"))
            (rule "concrete_not_2" (formula "19") (term "0,1,0,0"))
            (rule "concrete_and_1" (formula "19") (term "1,0,0"))
            (rule "replace_known_left" (formula "19") (term "0,1,0,0") (ifseqformula "4"))
            (rule "concrete_not_1" (formula "19") (term "1,0,0"))
            (rule "concrete_or_4" (formula "19") (term "0,0"))
            (rule "elementOfSingleton" (formula "19") (term "0,0"))
            (rule "equalUnique" (formula "19") (term "1,0,0"))
            (rule "concrete_and_4" (formula "19") (term "0,0"))
            (rule "ifthenelse_false" (formula "19") (term "0"))
            (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=arr_1"))
            (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "15"))
            (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
            (rule "equalUnique" (formula "22") (term "0,1,0,0,0"))
            (rule "concrete_not_2" (formula "22") (term "1,0,0,0"))
            (rule "concrete_and_3" (formula "22") (term "0,0,0"))
            (rule "eqSymm" (formula "23"))
            (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "23"))
            (rule "hideAuxiliaryEq" (formula "23"))
            (rule "replace_known_right" (formula "22") (term "0,0,1,0,0") (ifseqformula "35"))
            (rule "concrete_not_2" (formula "22") (term "0,1,0,0"))
            (rule "concrete_and_1" (formula "22") (term "1,0,0"))
            (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "4"))
            (rule "concrete_not_1" (formula "22") (term "1,0,0"))
            (rule "concrete_or_4" (formula "22") (term "0,0"))
            (rule "elementOfSingleton" (formula "22") (term "0,0"))
            (rule "equalUnique" (formula "22") (term "1,0,0"))
            (rule "concrete_and_4" (formula "22") (term "0,0"))
            (rule "ifthenelse_false" (formula "22") (term "0"))
            (rule "methodCallParamThrow" (formula "37") (term "1"))
            (rule "tryCatchThrow" (formula "37") (term "1"))
            (rule "ifElseUnfold" (formula "37") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "37") (term "1") (newnames "x_1"))
            (rule "equality_comparison_simple" (formula "37") (term "1"))
            (rule "sequentialToParallel2" (formula "37"))
            (rule "simplifyUpdate3" (formula "37") (term "1,0"))
            (rule "replace_known_right" (formula "37") (term "0,0,1,0") (ifseqformula "31"))
            (rule "ifthenelse_false" (formula "37") (term "0,1,0"))
            (rule "ifElseSplit" (formula "37"))
            (branch "if x_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "38"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "38"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "29"))
               (rule "applyOnPV" (formula "29") (term "0"))
               (rule "simplifyUpdate1" (formula "29") (term "1"))
               (rule "boolean_not_equal_2" (formula "29"))
               (rule "false_right" (formula "29"))
               (rule "ifElseSplit" (formula "37"))
               (branch "if exc_1 instanceof java.lang.Throwable true"
                  (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                  (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                  (rule "concrete_or_4" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "variableDeclaration" (formula "37") (term "1") (newnames "e"))
                  (rule "delete_unnecessary_cast" (formula "37") (term "1"))
                  (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                  (rule "boolean_equal" (formula "1") (term "1,1"))
                  (rule "concrete_or_3" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "sequentialToParallel2" (formula "37"))
                  (rule "simplifyUpdate3" (formula "37") (term "1,0"))
                  (rule "assignment" (formula "37") (term "1"))
                  (rule "sequentialToParallel2" (formula "37"))
                  (rule "simplifyUpdate2" (formula "37"))
                  (rule "simplifyUpdate3" (formula "37") (term "1,0"))
                  (rule "applyOnElementary" (formula "37") (term "1,0"))
                  (rule "applyOnPV" (formula "37") (term "0,1,0"))
                  (rule "emptyModality" (formula "37") (term "1"))
                  (rule "applyOnRigidFormula" (formula "37"))
                  (rule "simplifyUpdate2" (formula "37") (term "1"))
                  (rule "simplifyUpdate2" (formula "37") (term "0"))
                  (rule "applyOnRigidFormula" (formula "37") (term "1"))
                  (rule "simplifyUpdate1" (formula "37") (term "1,1"))
                  (rule "applyOnPV" (formula "37") (term "0,1"))
                  (rule "replace_known_right" (formula "37") (term "1") (ifseqformula "31"))
                  (rule "concrete_and_4" (formula "37"))
                  (rule "false_right" (formula "37"))
                  (rule "andRight" (formula "30"))
                  (branch
                     (rule "allRight" (formula "30") (inst "sk=j_0"))
                     (rule "allRight" (formula "30") (inst "sk=i_2"))
                     (rule "orRight" (formula "30"))
                     (rule "orRight" (formula "30"))
                     (rule "orRight" (formula "30"))
                     (rule "inEqSimp_geqRight" (formula "33"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "33"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "32"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "33"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfCreate" (formula "4"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "20"))
                     (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                     (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                     (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "39"))
                     (rule "concrete_not_2" (formula "4") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "4") (term "1,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "9"))
                     (rule "concrete_not_1" (formula "4") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "4") (term "0,0"))
                     (rule "elementOfSingleton" (formula "4") (term "0,0"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_commuteLeq" (formula "4"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfCreate" (formula "4"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "20"))
                     (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                     (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                     (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "39"))
                     (rule "concrete_not_2" (formula "4") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "4") (term "1,0,0"))
                     (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "9"))
                     (rule "concrete_not_1" (formula "4") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "4") (term "0,0"))
                     (rule "elementOfSingleton" (formula "4") (term "0,0"))
                     (rule "equalUnique" (formula "4") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "4") (term "0,0"))
                     (rule "ifthenelse_false" (formula "4") (term "0"))
                     (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "4"))
                     (rule "andRight" (formula "33"))
                     (branch
                        (rule "allRight" (formula "33") (inst "sk=j_1"))
                        (rule "allRight" (formula "33") (inst "sk=m_0"))
                        (rule "orRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "inEqSimp_leqRight" (formula "36"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "36"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "36"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "24"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                        (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "13"))
                        (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "4") (term "0,0"))
                        (rule "elementOfSingleton" (formula "4") (term "0,0"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "mul_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "25"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "5") (term "0,0,0"))
                        (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "43"))
                        (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "1,0,0"))
                        (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "14"))
                        (rule "concrete_not_1" (formula "5") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "5") (term "0,0"))
                        (rule "elementOfSingleton" (formula "5") (term "0,0"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "ifthenelse_split" (formula "35") (term "0"))
                        (branch "exc_1.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "37") (term "0,0") (ifseqformula "36"))
                           (rule "hideAuxiliaryEq" (formula "36"))
                           (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "35"))
                           (rule "concrete_or_1" (formula "36"))
                           (rule "true_left" (formula "36"))
                           (rule "cut_direct" (formula "11") (term "0"))
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                              (rule "concrete_or_1" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "cut_direct" (formula "36") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "concrete_impl_4" (formula "37"))
                                 (rule "true_left" (formula "37"))
                                 (rule "allLeft" (formula "32") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "32") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_28" (formula "33") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                                 (rule "allLeft" (formula "32") (inst "t=i_2"))
                                 (rule "replaceKnownSelect_taclet0010110_22" (formula "32") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_23" (formula "32") (term "0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "32") (term "1"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0"))
                                 (rule "inEqSimp_contradInEq0" (formula "32") (term "1") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "32") (term "0,0,1"))
                                 (rule "leq_literals" (formula "32") (term "0,1"))
                                 (rule "concrete_and_2" (formula "32") (term "1"))
                                 (rule "concrete_or_4" (formula "32"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "32") (term "0"))
                                 (rule "concrete_and_2" (formula "32"))
                                 (rule "closeFalse" (formula "32"))
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (rule "concrete_impl_3" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "nnf_ex2all" (formula "36"))
                                 (rule "nnf_notEx" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "33") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                                 (rule "allLeft" (formula "34") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_28" (formula "34") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "34") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_27" (formula "1") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0,0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                                 (rule "allLeft" (formula "35") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet00010110_25" (formula "35") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_26" (formula "35") (term "0,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "35") (term "1,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "35") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "35") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "35") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "35") (term "1,0"))
                                 (rule "concrete_or_4" (formula "35") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "35") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "35") (term "0,0,1"))
                                 (rule "leq_literals" (formula "35") (term "0,1"))
                                 (rule "concrete_and_2" (formula "35") (term "1"))
                                 (rule "concrete_or_4" (formula "35"))
                                 (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "35") (term "0"))
                                 (rule "concrete_and_2" (formula "35"))
                                 (rule "closeFalse" (formula "35"))
                              )
                           )
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                              (rule "concrete_or_2" (formula "11"))
                              (rule "cut_direct" (formula "36") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "concrete_impl_4" (formula "37"))
                                 (rule "true_left" (formula "37"))
                                 (rule "allLeft" (formula "32") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "32") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_28" (formula "33") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                                 (rule "allLeft" (formula "32") (inst "t=i_2"))
                                 (rule "replaceKnownSelect_taclet0010110_22" (formula "32") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_23" (formula "32") (term "0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "32") (term "1"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "32") (term "1") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "32") (term "0,0,1"))
                                 (rule "leq_literals" (formula "32") (term "0,1"))
                                 (rule "concrete_and_2" (formula "32") (term "1"))
                                 (rule "concrete_or_4" (formula "32"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "32") (term "0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "0"))
                                 (rule "concrete_or_2" (formula "32"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "6"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "inEqSimp_homoInEq1" (formula "32"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0"))
                                 (rule "add_zero_right" (formula "32") (term "0"))
                                 (rule "leq_literals" (formula "32"))
                                 (rule "closeFalse" (formula "32"))
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (rule "concrete_impl_3" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "nnf_ex2all" (formula "36"))
                                 (rule "nnf_notEx" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "33") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                                 (rule "allLeft" (formula "34") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_28" (formula "34") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "34") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_18" (formula "1") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0,0") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                                 (rule "allLeft" (formula "35") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet00010110_25" (formula "35") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_26" (formula "35") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "35") (term "0,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "35") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "35") (term "0,0"))
                                 (rule "concrete_or_2" (formula "35") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "35") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                 (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "35") (term "0,0,1"))
                                 (rule "leq_literals" (formula "35") (term "0,1"))
                                 (rule "concrete_and_2" (formula "35") (term "1"))
                                 (rule "concrete_or_4" (formula "35"))
                                 (rule "inEqSimp_contradInEq0" (formula "35") (ifseqformula "5"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "inEqSimp_homoInEq1" (formula "35"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                 (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                 (rule "add_literals" (formula "35") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "35") (term "1,0"))
                                 (rule "add_literals" (formula "35") (term "0"))
                                 (rule "leq_literals" (formula "35"))
                                 (rule "closeFalse" (formula "35"))
                              )
                           )
                        )
                        (branch "exc_1.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "36") (term "0,0") (ifseqformula "35"))
                           (rule "hideAuxiliaryEq" (formula "35"))
                           (rule "cut_direct" (formula "11") (term "0"))
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                              (rule "concrete_or_1" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "cut_direct" (formula "36") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "concrete_impl_4" (formula "37"))
                                 (rule "true_left" (formula "37"))
                                 (rule "allLeft" (formula "32") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "32") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_28" (formula "33") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet00010110_25" (formula "33") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_26" (formula "33") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (rule "concrete_and_2" (formula "33") (term "1"))
                                 (rule "concrete_or_4" (formula "33"))
                                 (rule "inEqSimp_contradInEq0" (formula "33") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (rule "concrete_and_2" (formula "33") (term "1"))
                                 (rule "concrete_or_4" (formula "33"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "33") (term "0"))
                                 (rule "concrete_and_2" (formula "33"))
                                 (rule "closeFalse" (formula "33"))
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (rule "concrete_impl_3" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "nnf_ex2all" (formula "36"))
                                 (rule "nnf_notEx" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "33") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                                 (rule "allLeft" (formula "34") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_28" (formula "34") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "34") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_18" (formula "1") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0,0") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                                 (rule "allLeft" (formula "34") (inst "t=i_2"))
                                 (rule "replaceKnownSelect_taclet0010110_22" (formula "34") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_23" (formula "34") (term "0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "34") (term "1"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "34") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "34") (term "0,0"))
                                 (rule "concrete_or_2" (formula "34") (term "0"))
                                 (rule "inEqSimp_contradInEq0" (formula "34") (term "1") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                 (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "34") (term "0,0,1"))
                                 (rule "leq_literals" (formula "34") (term "0,1"))
                                 (rule "concrete_and_2" (formula "34") (term "1"))
                                 (rule "concrete_or_4" (formula "34"))
                                 (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "8"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "inEqSimp_homoInEq1" (formula "34"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0"))
                                 (rule "add_zero_right" (formula "34") (term "0"))
                                 (rule "leq_literals" (formula "34"))
                                 (rule "closeFalse" (formula "34"))
                              )
                           )
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                              (rule "concrete_or_2" (formula "11"))
                              (rule "cut_direct" (formula "36") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "concrete_impl_4" (formula "37"))
                                 (rule "true_left" (formula "37"))
                                 (rule "allLeft" (formula "32") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "32") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_28" (formula "33") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet00010110_25" (formula "33") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_26" (formula "33") (term "0,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (rule "concrete_and_2" (formula "33") (term "1"))
                                 (rule "concrete_or_4" (formula "33"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (rule "concrete_and_2" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (rule "concrete_impl_3" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "nnf_ex2all" (formula "36"))
                                 (rule "nnf_notEx" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "33") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0,0,0"))
                                 (rule "allLeft" (formula "34") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00010110_28" (formula "34") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00010110_29" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "34") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,1,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "34") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "34") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=i_2"))
                                 (rule "replaceKnownSelect_taclet0010110_22" (formula "33") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_23" (formula "33") (term "0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "33") (term "1"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "33") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "0,0"))
                                 (rule "concrete_or_2" (formula "33") (term "0"))
                                 (rule "inEqSimp_contradInEq0" (formula "33") (term "1") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (rule "concrete_and_2" (formula "33") (term "1"))
                                 (rule "concrete_or_4" (formula "33"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "7"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "inEqSimp_homoInEq1" (formula "33"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0"))
                                 (rule "add_literals" (formula "33") (term "0"))
                                 (rule "leq_literals" (formula "33"))
                                 (rule "closeFalse" (formula "33"))
                              )
                           )
                        )
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "33"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "ifthenelse_split" (formula "31") (term "0"))
                        (branch "exc_1.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "32"))
                           (rule "hideAuxiliaryEq" (formula "32"))
                           (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "31"))
                           (rule "concrete_or_1" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "cut_direct" (formula "7") (term "0"))
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                              (rule "concrete_or_1" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "cut_direct" (formula "32") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "concrete_impl_4" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "allLeft" (formula "28") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "28") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (rule "concrete_impl_3" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "nnf_ex2all" (formula "32"))
                                 (rule "nnf_notEx" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "allLeft" (formula "29") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "29") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "29") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "29") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "2") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "2") (term "1,0"))
                                 (rule "concrete_or_4" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                           )
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                              (rule "concrete_or_2" (formula "7"))
                              (rule "cut_direct" (formula "32") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "concrete_impl_4" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "allLeft" (formula "28") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "28") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (rule "concrete_impl_3" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "nnf_ex2all" (formula "32"))
                                 (rule "nnf_notEx" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "allLeft" (formula "29") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "29") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "29") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "29") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0,0"))
                                 (rule "concrete_or_2" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,0"))
                                 (rule "leq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                           )
                        )
                        (branch "exc_1.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "32") (term "0,0") (ifseqformula "31"))
                           (rule "hideAuxiliaryEq" (formula "31"))
                           (rule "cut_direct" (formula "32") (term "1"))
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                              (rule "concrete_impl_4" (formula "33"))
                              (rule "true_left" (formula "33"))
                              (rule "cut_direct" (formula "7") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "allLeft" (formula "28") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "28") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "7"))
                                 (rule "allLeft" (formula "28") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "28") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0"))
                                 (rule "concrete_or_2" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                           )
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                              (rule "concrete_impl_3" (formula "32"))
                              (rule "notLeft" (formula "32"))
                              (rule "nnf_ex2all" (formula "32"))
                              (rule "nnf_notEx" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                              (rule "cut_direct" (formula "8") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "allLeft" (formula "29") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "29") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "29") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "29") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0,0"))
                                 (rule "concrete_or_2" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                 (rule "leq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "8"))
                                 (rule "allLeft" (formula "29") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet0010110_19" (formula "29") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010110_20" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "29") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "29") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "2") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "2") (term "1,0"))
                                 (rule "concrete_or_4" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "35"))
                                 (rule "closeTrue" (formula "35"))
                              )
                           )
                        )
                     )
                  )
                  (branch
                     (rule "allRight" (formula "30") (inst "sk=i_2"))
                     (rule "orRight" (formula "30"))
                     (rule "orRight" (formula "30"))
                     (rule "notRight" (formula "32"))
                     (rule "inEqSimp_geqRight" (formula "32"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "32"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfCreate" (formula "3"))
                     (rule "equalUnique" (formula "3") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "3") (term "0,0"))
                     (rule "ifthenelse_false" (formula "3") (term "0"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "19"))
                     (rule "elementOfFreshLocs" (formula "3") (term "1,0,0"))
                     (rule "equalUnique" (formula "3") (term "0,1,0,0,0"))
                     (rule "concrete_not_2" (formula "3") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "3") (term "0,0,0"))
                     (rule "eqSymm" (formula "4"))
                     (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_right" (formula "3") (term "0,0,1,0,0") (ifseqformula "37"))
                     (rule "concrete_not_2" (formula "3") (term "0,1,0,0"))
                     (rule "concrete_and_1" (formula "3") (term "1,0,0"))
                     (rule "replace_known_left" (formula "3") (term "0,1,0,0") (ifseqformula "7"))
                     (rule "concrete_not_1" (formula "3") (term "1,0,0"))
                     (rule "concrete_or_4" (formula "3") (term "0,0"))
                     (rule "elementOfSingleton" (formula "3") (term "0,0"))
                     (rule "equalUnique" (formula "3") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "3") (term "0,0"))
                     (rule "ifthenelse_false" (formula "3") (term "0"))
                     (rule "andRight" (formula "32"))
                     (branch
                        (rule "allRight" (formula "32") (inst "sk=j_0"))
                        (rule "allRight" (formula "32") (inst "sk=m_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "35"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "23"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                        (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "41"))
                        (rule "concrete_not_2" (formula "4") (term "0,1,0,0"))
                        (rule "concrete_and_1" (formula "4") (term "1,0,0"))
                        (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "12"))
                        (rule "concrete_not_1" (formula "4") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "4") (term "0,0"))
                        (rule "elementOfSingleton" (formula "4") (term "0,0"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "mul_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "24"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "5") (term "0,0,0"))
                        (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "42"))
                        (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "1,0,0"))
                        (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "13"))
                        (rule "concrete_not_1" (formula "5") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "5") (term "0,0"))
                        (rule "elementOfSingleton" (formula "5") (term "0,0"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "ifthenelse_split" (formula "34") (term "0"))
                        (branch "exc_1.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "36") (term "0,0") (ifseqformula "35"))
                           (rule "hideAuxiliaryEq" (formula "35"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "34"))
                           (rule "concrete_or_1" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "cut_direct" (formula "35") (term "1"))
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                              (rule "concrete_impl_4" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "cut_direct" (formula "10") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "allLeft" (formula "31") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_25" (formula "31") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "31") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "31") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "31") (term "0,0,0"))
                                 (rule "allLeft" (formula "31") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet01010110_22" (formula "31") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_23" (formula "31") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "31") (term "0,0,1"))
                                 (rule "leq_literals" (formula "31") (term "0,1"))
                                 (rule "concrete_and_2" (formula "31") (term "1"))
                                 (rule "concrete_or_4" (formula "31"))
                                 (rule "inEqSimp_contradInEq0" (formula "31") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "31") (term "0,0,1"))
                                 (rule "leq_literals" (formula "31") (term "0,1"))
                                 (rule "concrete_and_2" (formula "31") (term "1"))
                                 (rule "concrete_or_4" (formula "31"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "31"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (rule "concrete_and_2" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "10"))
                                 (rule "allLeft" (formula "31") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_25" (formula "31") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "31") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "31") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "31") (term "0,0,0"))
                                 (rule "allLeft" (formula "31") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet01010110_22" (formula "31") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_23" (formula "31") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "31") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "31") (term "0,0"))
                                 (rule "concrete_or_2" (formula "31") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                 (rule "leq_literals" (formula "31") (term "0,1"))
                                 (rule "concrete_and_2" (formula "31") (term "1"))
                                 (rule "concrete_or_4" (formula "31"))
                                 (rule "inEqSimp_contradInEq0" (formula "31") (ifseqformula "3"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "inEqSimp_homoInEq1" (formula "31"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0"))
                                 (rule "add_zero_right" (formula "31") (term "0"))
                                 (rule "leq_literals" (formula "31"))
                                 (rule "closeFalse" (formula "31"))
                              )
                           )
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                              (rule "concrete_impl_3" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "nnf_ex2all" (formula "35"))
                              (rule "nnf_notEx" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                              (rule "cut_direct" (formula "11") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "allLeft" (formula "32") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_25" (formula "32") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_24" (formula "1") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0,0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet01010110_22" (formula "33") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_23" (formula "33") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "33") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "0,0"))
                                 (rule "concrete_or_2" (formula "33") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (rule "concrete_and_2" (formula "33") (term "1"))
                                 (rule "concrete_or_4" (formula "33"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "33"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0"))
                                 (rule "add_literals" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "allLeft" (formula "32") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_25" (formula "32") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_24" (formula "1") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0,0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet01010110_22" (formula "33") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_23" (formula "33") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "33") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "33") (term "0,0"))
                                 (rule "concrete_or_2" (formula "33") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (rule "concrete_and_2" (formula "33") (term "1"))
                                 (rule "concrete_or_4" (formula "33"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "33"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0"))
                                 (rule "add_literals" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                           )
                        )
                        (branch "exc_1.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "35") (term "0,0") (ifseqformula "34"))
                           (rule "hideAuxiliaryEq" (formula "34"))
                           (rule "cut_direct" (formula "35") (term "1"))
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                              (rule "concrete_impl_4" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "cut_direct" (formula "10") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "allLeft" (formula "31") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_25" (formula "31") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "31") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "31") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "31") (term "0,0,0"))
                                 (rule "allLeft" (formula "31") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet01010110_22" (formula "31") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_23" (formula "31") (term "0,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "31") (term "1,0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "31") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "31") (term "1,0"))
                                 (rule "concrete_or_4" (formula "31") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "31") (term "0,0,1"))
                                 (rule "leq_literals" (formula "31") (term "0,1"))
                                 (rule "concrete_and_2" (formula "31") (term "1"))
                                 (rule "concrete_or_4" (formula "31"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "31") (term "0"))
                                 (rule "concrete_and_2" (formula "31"))
                                 (rule "closeFalse" (formula "31"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "10"))
                                 (rule "allLeft" (formula "31") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_25" (formula "31") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "31") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "31") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "31") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "31") (term "0,0,0"))
                                 (rule "allLeft" (formula "31") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet01010110_22" (formula "31") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_23" (formula "31") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "31") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "31") (term "0,0"))
                                 (rule "concrete_or_2" (formula "31") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "31") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
                                 (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "31") (term "0,0,1"))
                                 (rule "leq_literals" (formula "31") (term "0,1"))
                                 (rule "concrete_and_2" (formula "31") (term "1"))
                                 (rule "concrete_or_4" (formula "31"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "31"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                 (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0"))
                                 (rule "add_literals" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                              (rule "concrete_impl_3" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "nnf_ex2all" (formula "35"))
                              (rule "nnf_notEx" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                              (rule "cut_direct" (formula "11") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "allLeft" (formula "32") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_25" (formula "32") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_24" (formula "1") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0,0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet01010110_22" (formula "33") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_23" (formula "33") (term "0,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (rule "concrete_and_2" (formula "33") (term "1"))
                                 (rule "concrete_or_4" (formula "33"))
                                 (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "33"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                 (rule "concrete_and_2" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "allLeft" (formula "32") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_25" (formula "32") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "32") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet01010110_24" (formula "1") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_26" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0,0,0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                                 (rule "allLeft" (formula "33") (inst "t=m_0"))
                                 (rule "replaceKnownSelect_taclet01010110_22" (formula "33") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01010110_23" (formula "33") (term "0,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "33") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "33") (term "1,0"))
                                 (rule "concrete_or_4" (formula "33") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                                 (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1"))
                                 (rule "leq_literals" (formula "33") (term "0,1"))
                                 (rule "concrete_and_2" (formula "33") (term "1"))
                                 (rule "concrete_or_4" (formula "33"))
                                 (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "33") (term "0"))
                                 (rule "concrete_and_2" (formula "33"))
                                 (rule "closeFalse" (formula "33"))
                              )
                           )
                        )
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "32"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "ifthenelse_split" (formula "30") (term "0"))
                        (branch "exc_1.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "32") (term "0,0") (ifseqformula "31"))
                           (rule "hideAuxiliaryEq" (formula "31"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
                           (rule "concrete_or_1" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "cut_direct" (formula "6") (term "0"))
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                              (rule "concrete_or_1" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "cut_direct" (formula "31") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "concrete_impl_4" (formula "32"))
                                 (rule "true_left" (formula "32"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (rule "concrete_impl_3" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "nnf_ex2all" (formula "31"))
                                 (rule "nnf_notEx" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "2") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "2") (term "1,0"))
                                 (rule "concrete_or_4" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                           )
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                              (rule "concrete_or_2" (formula "6"))
                              (rule "cut_direct" (formula "31") (term "1"))
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                                 (rule "concrete_impl_4" (formula "32"))
                                 (rule "true_left" (formula "32"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                              (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                                 (rule "concrete_impl_3" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "nnf_ex2all" (formula "31"))
                                 (rule "nnf_notEx" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0,0"))
                                 (rule "concrete_or_2" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,0"))
                                 (rule "leq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                           )
                        )
                        (branch "exc_1.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "31") (term "0,0") (ifseqformula "30"))
                           (rule "hideAuxiliaryEq" (formula "30"))
                           (rule "cut_direct" (formula "31") (term "1"))
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE TRUE"
                              (rule "concrete_impl_4" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "cut_direct" (formula "6") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "1") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "6"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0"))
                                 (rule "concrete_or_2" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                           )
                           (branch "CUT: java.lang.RuntimeException::instance(exc_1) = TRUE FALSE"
                              (rule "concrete_impl_3" (formula "31"))
                              (rule "notLeft" (formula "31"))
                              (rule "nnf_ex2all" (formula "31"))
                              (rule "nnf_notEx" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
                              (rule "cut_direct" (formula "7") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "2") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "2") (term "1,0"))
                                 (rule "concrete_or_4" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "7"))
                                 (rule "allLeft" (formula "2") (inst "t=i_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "2") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0,0"))
                                 (rule "concrete_or_2" (formula "2") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                 (rule "leq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0110_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0110_15" (formula "1") (term "2,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "33"))
                                 (rule "closeTrue" (formula "33"))
                              )
                           )
                        )
                     )
                  )
               )
               (branch "if exc_1 instanceof java.lang.Throwable false"
                  (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                  (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                  (rule "concrete_or_4" (formula "1") (term "0,1"))
                  (rule "double_not" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "typeEqDerived" (formula "29") (term "0,1") (ifseqformula "1"))
                  (rule "close" (formula "32") (ifseqformula "1"))
               )
            )
         )
         (branch "Case 2"
            (rule "impLeft" (formula "22") (userinteraction))
            (branch "Case 1"
               (rule "orLeft" (formula "21") (userinteraction))
               (branch "java_lang_Object_created__0<<selectSK>> = TRUE"
                  (rule "sequentialToParallel2" (formula "33"))
                  (rule "simplifyUpdate2" (formula "33"))
                  (rule "simplifyUpdate3" (formula "33") (term "1,0"))
                  (rule "applyEq" (formula "20") (term "1") (ifseqformula "21"))
                  (rule "ifEqualsTRUE" (formula "20"))
                  (rule "eq_and" (formula "20") (term "0"))
                  (rule "nnf_ex2all" (formula "22"))
                  (rule "nnf_ex2all" (formula "24"))
                  (rule "nnf_ex2all" (formula "24"))
                  (rule "hideAuxiliaryEqConcrete" (formula "24"))
                  (rule "nnf_notEx" (formula "3") (term "0"))
                  (rule "nnf_notAnd" (formula "2") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "23"))
                  (rule "neq_or" (formula "23") (term "0"))
                  (rule "concrete_and_1" (formula "23"))
                  (rule "commute_or" (formula "23"))
                  (rule "methodCallParamThrow" (formula "32") (term "1"))
                  (rule "tryCatchThrow" (formula "32") (term "1"))
                  (rule "ifElseUnfold" (formula "32") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_1"))
                  (rule "equality_comparison_simple" (formula "32") (term "1"))
                  (rule "sequentialToParallel2" (formula "32"))
                  (rule "simplifyUpdate3" (formula "32") (term "1,0"))
                  (rule "replace_known_right" (formula "32") (term "0,0,1,0") (ifseqformula "26"))
                  (rule "ifthenelse_false" (formula "32") (term "0,1,0"))
                  (rule "allLeft" (formula "2") (inst "t=q_0"))
                  (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "2") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "2") (term "0,1,0"))
                  (rule "concrete_and_2" (formula "2") (term "1,0"))
                  (rule "concrete_or_4" (formula "2") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "15"))
                  (rule "qeq_literals" (formula "2") (term "0,0"))
                  (rule "concrete_and_2" (formula "2") (term "0"))
                  (rule "concrete_or_2" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "25"))
                  (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "32"))
                  (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "8"))
                  (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "1") (term "0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (rule "equalUnique" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "24"))
                  (rule "close" (formula "24") (ifseqformula "16"))
               )
               (branch " exc_1.<created>@anon_heap_search<<anonHeapFunction>> = TRUE"
                  (rule "sequentialToParallel2" (formula "33"))
                  (rule "simplifyUpdate2" (formula "33"))
                  (rule "simplifyUpdate3" (formula "33") (term "1,0"))
                  (rule "nnf_ex2all" (formula "22"))
                  (rule "nnf_ex2all" (formula "23"))
                  (rule "nnf_ex2all" (formula "24"))
                  (rule "nnf_notEx" (formula "3") (term "0"))
                  (rule "nnf_notAnd" (formula "2") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0,0"))
                  (rule "methodCallParamThrow" (formula "33") (term "1"))
                  (rule "tryCatchThrow" (formula "33") (term "1"))
                  (rule "ifElseUnfold" (formula "33") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_1"))
                  (rule "equality_comparison_simple" (formula "33") (term "1"))
                  (rule "sequentialToParallel2" (formula "33"))
                  (rule "simplifyUpdate3" (formula "33") (term "1,0"))
                  (rule "replace_known_right" (formula "33") (term "0,0,1,0") (ifseqformula "27"))
                  (rule "ifthenelse_false" (formula "33") (term "0,1,0"))
                  (rule "allLeft" (formula "1") (inst "t=q_0"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "15"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "concrete_or_2" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "26"))
                  (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "8"))
                  (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "1") (term "0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                  (rule "equalUnique" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "25"))
                  (rule "close" (formula "25") (ifseqformula "16"))
               )
            )
            (branch "Case 2"
               (rule "sequentialToParallel2" (formula "33"))
               (rule "simplifyUpdate2" (formula "33"))
               (rule "simplifyUpdate3" (formula "33") (term "1,0"))
               (rule "methodCallParamThrow" (formula "33") (term "1"))
               (rule "tryCatchThrow" (formula "33") (term "1"))
               (rule "ifElseUnfold" (formula "33") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_1"))
               (rule "equality_comparison_simple" (formula "33") (term "1"))
               (rule "sequentialToParallel2" (formula "33"))
               (rule "simplifyUpdate3" (formula "33") (term "1,0"))
               (rule "replace_known_right" (formula "33") (term "0,0,1,0") (ifseqformula "27"))
               (rule "ifthenelse_false" (formula "33") (term "0,1,0"))
               (rule "ifElseSplit" (formula "33"))
               (branch "if x_1 true"
                  (rule "simplifyUpdate2" (formula "34"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_1 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "34"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "23"))
                  (rule "simplifyUpdate1" (formula "23") (term "1"))
                  (rule "applyOnPV" (formula "23") (term "0"))
                  (rule "boolean_not_equal_2" (formula "23"))
                  (rule "false_right" (formula "23"))
                  (rule "ifElseSplit" (formula "33"))
                  (branch "if exc_1 instanceof java.lang.Throwable true"
                     (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                     (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                     (rule "concrete_or_4" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "variableDeclaration" (formula "33") (term "1") (newnames "e"))
                     (rule "delete_unnecessary_cast" (formula "33") (term "1"))
                     (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                     (rule "boolean_equal" (formula "1") (term "1,1"))
                     (rule "concrete_or_3" (formula "1") (term "1"))
                     (rule "true_left" (formula "1"))
                     (rule "sequentialToParallel2" (formula "33"))
                     (rule "simplifyUpdate3" (formula "33") (term "1,0"))
                     (rule "assignment" (formula "33") (term "1"))
                     (rule "sequentialToParallel2" (formula "33"))
                     (rule "simplifyUpdate2" (formula "33"))
                     (rule "simplifyUpdate3" (formula "33") (term "1,0"))
                     (rule "applyOnElementary" (formula "33") (term "1,0"))
                     (rule "applyOnPV" (formula "33") (term "0,1,0"))
                     (rule "emptyModality" (formula "33") (term "1"))
                     (rule "applyOnRigidFormula" (formula "33"))
                     (rule "simplifyUpdate2" (formula "33") (term "1"))
                     (rule "simplifyUpdate2" (formula "33") (term "0"))
                     (rule "applyOnRigidFormula" (formula "33") (term "1"))
                     (rule "simplifyUpdate1" (formula "33") (term "1,1"))
                     (rule "applyOnPV" (formula "33") (term "0,1"))
                     (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "27"))
                     (rule "concrete_and_4" (formula "33"))
                     (rule "false_right" (formula "33"))
                     (rule "nnf_ex2all" (formula "24"))
                     (rule "nnf_ex2all" (formula "24"))
                     (rule "nnf_notAnd" (formula "2") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                     (rule "andRight" (formula "25"))
                     (branch
                        (rule "allRight" (formula "25") (inst "sk=j_0"))
                        (rule "allRight" (formula "25") (inst "sk=m_0"))
                        (rule "orRight" (formula "25"))
                        (rule "orRight" (formula "25"))
                        (rule "orRight" (formula "25"))
                        (rule "inEqSimp_leqRight" (formula "28"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "28"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "27"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "22"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                        (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "11"))
                        (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "4") (term "0,0"))
                        (rule "elementOfSingleton" (formula "4") (term "0,0"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfCreate" (formula "5"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "23"))
                        (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
                        (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "5") (term "0,0,0"))
                        (rule "replace_known_right" (formula "5") (term "0,0,1,0,0") (ifseqformula "36"))
                        (rule "concrete_not_2" (formula "5") (term "0,1,0,0"))
                        (rule "concrete_and_1" (formula "5") (term "1,0,0"))
                        (rule "replace_known_left" (formula "5") (term "0,1,0,0") (ifseqformula "12"))
                        (rule "concrete_not_1" (formula "5") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "5") (term "0,0"))
                        (rule "elementOfSingleton" (formula "5") (term "0,0"))
                        (rule "equalUnique" (formula "5") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "5") (term "0,0"))
                        (rule "ifthenelse_false" (formula "5") (term "0"))
                        (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "andRight" (formula "30"))
                        (branch
                           (rule "allRight" (formula "30") (inst "sk=j_1"))
                           (rule "allRight" (formula "30") (inst "sk=i_0"))
                           (rule "orRight" (formula "30"))
                           (rule "orRight" (formula "30"))
                           (rule "orRight" (formula "30"))
                           (rule "inEqSimp_geqRight" (formula "33"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "33"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "32"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfCreate" (formula "4"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "27"))
                           (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                           (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                           (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                           (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "16"))
                           (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "1,0,0"))
                           (rule "concrete_or_4" (formula "4") (term "0,0"))
                           (rule "elementOfSingleton" (formula "4") (term "0,0"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfCreate" (formula "4"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "27"))
                           (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                           (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                           (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                           (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "16"))
                           (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "1,0,0"))
                           (rule "concrete_or_4" (formula "4") (term "0,0"))
                           (rule "elementOfSingleton" (formula "4") (term "0,0"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "4"))
                           (rule "ifthenelse_split" (formula "31") (term "0"))
                           (branch "exc_1.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "32"))
                              (rule "hideAuxiliaryEq" (formula "32"))
                              (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "31"))
                              (rule "concrete_or_1" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "cut_direct" (formula "13") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "allLeft" (formula "28") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet000111110_21" (formula "28") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000111110_22" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                 (rule "allLeft" (formula "11") (inst "t=q_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "11") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "11") (term "1,0"))
                                 (rule "concrete_or_4" (formula "11") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "11") (term "0,0"))
                                 (rule "concrete_and_2" (formula "11") (term "0"))
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "35"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "40"))
                                 (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                                 (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "34"))
                                 (rule "close" (formula "34") (ifseqformula "24"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "13"))
                                 (rule "allLeft" (formula "28") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet000111110_21" (formula "28") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000111110_22" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                 (rule "allLeft" (formula "11") (inst "t=q_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "11") (term "0,0"))
                                 (rule "concrete_or_2" (formula "11") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0"))
                                 (rule "leq_literals" (formula "11") (term "0,0"))
                                 (rule "concrete_and_2" (formula "11") (term "0"))
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "35"))
                                 (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "16"))
                                 (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "35") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "34"))
                                 (rule "close" (formula "34") (ifseqformula "24"))
                              )
                           )
                           (branch "exc_1.<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "32") (term "0,0") (ifseqformula "31"))
                              (rule "hideAuxiliaryEq" (formula "31"))
                              (rule "cut_direct" (formula "13") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "allLeft" (formula "28") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet000111110_21" (formula "28") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000111110_22" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                 (rule "allLeft" (formula "29") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet00111110_18" (formula "29") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00111110_19" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "29") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "29") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                 (rule "allLeft" (formula "11") (inst "t=q_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "11") (term "0,0"))
                                 (rule "concrete_or_2" (formula "11") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0"))
                                 (rule "leq_literals" (formula "11") (term "0,0"))
                                 (rule "concrete_and_2" (formula "11") (term "0"))
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "36"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "42"))
                                 (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                                 (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "35"))
                                 (rule "close" (formula "35") (ifseqformula "24"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "13"))
                                 (rule "allLeft" (formula "28") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet000111110_21" (formula "28") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000111110_22" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0,0,0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "28") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "28") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "28") (term "0,0,0"))
                                 (rule "allLeft" (formula "29") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet00111110_18" (formula "29") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00111110_19" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0,0,0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "leq_literals" (formula "29") (term "0,1,0,0,0"))
                                 (rule "concrete_and_2" (formula "29") (term "1,0,0,0"))
                                 (rule "concrete_or_4" (formula "29") (term "0,0,0"))
                                 (rule "allLeft" (formula "11") (inst "t=q_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "11") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "11") (term "1,0"))
                                 (rule "concrete_or_4" (formula "11") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "23"))
                                 (rule "qeq_literals" (formula "11") (term "0,0"))
                                 (rule "concrete_and_2" (formula "11") (term "0"))
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "36"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "43"))
                                 (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                                 (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "35"))
                                 (rule "close" (formula "35") (ifseqformula "24"))
                              )
                           )
                        )
                        (branch
                           (rule "allRight" (formula "30") (inst "sk=i_0"))
                           (rule "orRight" (formula "30"))
                           (rule "notRight" (formula "31"))
                           (rule "orRight" (formula "31"))
                           (rule "inEqSimp_geqRight" (formula "32"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "32"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfCreate" (formula "3"))
                           (rule "equalUnique" (formula "3") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "3") (term "0,0"))
                           (rule "ifthenelse_false" (formula "3") (term "0"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "26"))
                           (rule "elementOfFreshLocs" (formula "3") (term "1,0,0"))
                           (rule "equalUnique" (formula "3") (term "0,1,0,0,0"))
                           (rule "concrete_not_2" (formula "3") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0"))
                           (rule "eqSymm" (formula "4"))
                           (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "0,1,1,0,0") (ifseqformula "14"))
                           (rule "concrete_not_1" (formula "3") (term "1,1,0,0"))
                           (rule "concrete_and_4" (formula "3") (term "1,0,0"))
                           (rule "concrete_or_4" (formula "3") (term "0,0"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0"))
                           (rule "equalUnique" (formula "3") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "3") (term "0,0"))
                           (rule "ifthenelse_false" (formula "3") (term "0"))
                           (rule "ifthenelse_split" (formula "30") (term "0"))
                           (branch "exc_1.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "32") (term "0,0") (ifseqformula "31"))
                              (rule "hideAuxiliaryEq" (formula "31"))
                              (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
                              (rule "concrete_or_1" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "cut_direct" (formula "12") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "allLeft" (formula "10") (inst "t=q_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "10") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "10") (term "0,0"))
                                 (rule "concrete_or_2" (formula "10") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0"))
                                 (rule "leq_literals" (formula "10") (term "0,0"))
                                 (rule "concrete_and_2" (formula "10") (term "0"))
                                 (rule "concrete_or_2" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "38"))
                                 (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "15"))
                                 (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "close" (formula "32") (ifseqformula "23"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "12"))
                                 (rule "allLeft" (formula "10") (inst "t=q_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "10") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "10") (term "1,0"))
                                 (rule "concrete_or_4" (formula "10") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "10") (term "0,0"))
                                 (rule "concrete_and_2" (formula "10") (term "0"))
                                 (rule "concrete_or_2" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "39"))
                                 (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "15"))
                                 (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "close" (formula "32") (ifseqformula "23"))
                              )
                           )
                           (branch "exc_1.<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "31") (term "0,0") (ifseqformula "30"))
                              (rule "hideAuxiliaryEq" (formula "30"))
                              (rule "cut_direct" (formula "12") (term "0"))
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                                 (rule "concrete_or_1" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "allLeft" (formula "10") (inst "t=q_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "10") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "10") (term "1,0"))
                                 (rule "concrete_or_4" (formula "10") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "10") (term "0,0"))
                                 (rule "concrete_and_2" (formula "10") (term "0"))
                                 (rule "concrete_or_2" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "15"))
                                 (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "close" (formula "32") (ifseqformula "23"))
                              )
                              (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                                 (rule "concrete_or_2" (formula "12"))
                                 (rule "allLeft" (formula "10") (inst "t=q_0"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "10") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "10") (term "0,0"))
                                 (rule "concrete_or_2" (formula "10") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,0"))
                                 (rule "leq_literals" (formula "10") (term "0,0"))
                                 (rule "concrete_and_2" (formula "10") (term "0"))
                                 (rule "concrete_or_2" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "15"))
                                 (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "close" (formula "32") (ifseqformula "23"))
                              )
                           )
                        )
                     )
                     (branch
                        (rule "nnf_ex2all" (formula "25"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "1"))
                        (rule "concrete_and_3" (formula "26"))
                        (rule "allRight" (formula "26") (inst "sk=j_0"))
                        (rule "allRight" (formula "26") (inst "sk=i_0"))
                        (rule "orRight" (formula "26"))
                        (rule "orRight" (formula "26"))
                        (rule "orRight" (formula "26"))
                        (rule "inEqSimp_geqRight" (formula "29"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "29"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "28"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "23"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                        (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "35"))
                        (rule "concrete_not_2" (formula "4") (term "0,1,0,0"))
                        (rule "concrete_and_1" (formula "4") (term "1,0,0"))
                        (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "12"))
                        (rule "concrete_not_1" (formula "4") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "4") (term "0,0"))
                        (rule "elementOfSingleton" (formula "4") (term "0,0"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "23"))
                        (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
                        (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
                        (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "4") (term "0,0,0"))
                        (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "12"))
                        (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "1,0,0"))
                        (rule "concrete_or_4" (formula "4") (term "0,0"))
                        (rule "elementOfSingleton" (formula "4") (term "0,0"))
                        (rule "equalUnique" (formula "4") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "4") (term "0,0"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "ifthenelse_split" (formula "27") (term "0"))
                        (branch "exc_1.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                           (rule "hideAuxiliaryEq" (formula "28"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                           (rule "concrete_or_1" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "cut_direct" (formula "9") (term "0"))
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                              (rule "concrete_or_1" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "allLeft" (formula "7") (inst "t=q_0"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "19"))
                              (rule "qeq_literals" (formula "7") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0,0"))
                              (rule "concrete_or_2" (formula "7") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0"))
                              (rule "leq_literals" (formula "7") (term "0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0"))
                              (rule "concrete_or_2" (formula "7"))
                              (rule "notLeft" (formula "7"))
                              (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "30"))
                              (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "35"))
                              (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                              (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "12"))
                              (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                              (rule "concrete_or_4" (formula "1") (term "0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "29"))
                              (rule "close" (formula "29") (ifseqformula "20"))
                           )
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                              (rule "concrete_or_2" (formula "9"))
                              (rule "allLeft" (formula "7") (inst "t=q_0"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "19"))
                              (rule "qeq_literals" (formula "7") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0,0"))
                              (rule "concrete_or_2" (formula "7") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,0"))
                              (rule "leq_literals" (formula "7") (term "0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0"))
                              (rule "concrete_or_2" (formula "7"))
                              (rule "notLeft" (formula "7"))
                              (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "30"))
                              (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "12"))
                              (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                              (rule "concrete_or_4" (formula "1") (term "0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "29"))
                              (rule "close" (formula "29") (ifseqformula "20"))
                           )
                        )
                        (branch "exc_1.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                           (rule "hideAuxiliaryEq" (formula "27"))
                           (rule "cut_direct" (formula "9") (term "0"))
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE TRUE"
                              (rule "concrete_or_1" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "allLeft" (formula "24") (inst "t=j_0"))
                              (rule "replaceKnownSelect_taclet10111110_15" (formula "24") (term "0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10111110_16" (formula "24") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0,0,0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "24") (term "1,1,0,0,1,0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,1,0,0,0"))
                              (rule "leq_literals" (formula "24") (term "0,1,0,0,0"))
                              (rule "concrete_and_2" (formula "24") (term "1,0,0,0"))
                              (rule "concrete_or_4" (formula "24") (term "0,0,0"))
                              (rule "allLeft" (formula "7") (inst "t=q_0"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "19"))
                              (rule "qeq_literals" (formula "7") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0,0"))
                              (rule "concrete_or_2" (formula "7") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0"))
                              (rule "leq_literals" (formula "7") (term "0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0"))
                              (rule "concrete_or_2" (formula "7"))
                              (rule "notLeft" (formula "7"))
                              (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "31"))
                              (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "12"))
                              (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                              (rule "concrete_or_4" (formula "1") (term "0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "30"))
                              (rule "close" (formula "30") (ifseqformula "20"))
                           )
                           (branch "CUT: strPool(\"Searching for \").<created> = TRUE FALSE"
                              (rule "concrete_or_2" (formula "9"))
                              (rule "allLeft" (formula "24") (inst "t=j_0"))
                              (rule "replaceKnownSelect_taclet10111110_15" (formula "24") (term "0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10111110_16" (formula "24") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0,0,0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "24") (term "1,1,0,0,1,0,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0,1,0,0,0"))
                              (rule "leq_literals" (formula "24") (term "0,1,0,0,0"))
                              (rule "concrete_and_2" (formula "24") (term "1,0,0,0"))
                              (rule "concrete_or_4" (formula "24") (term "0,0,0"))
                              (rule "allLeft" (formula "7") (inst "t=q_0"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "19"))
                              (rule "qeq_literals" (formula "7") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0,0"))
                              (rule "concrete_or_2" (formula "7") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0,0"))
                              (rule "leq_literals" (formula "7") (term "0,0"))
                              (rule "concrete_and_2" (formula "7") (term "0"))
                              (rule "concrete_or_2" (formula "7"))
                              (rule "notLeft" (formula "7"))
                              (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_2"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                              (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "31"))
                              (rule "replace_known_left" (formula "1") (term "0,1,1,0,0") (ifseqformula "12"))
                              (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "1,0,0"))
                              (rule "concrete_or_4" (formula "1") (term "0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "30"))
                              (rule "close" (formula "30") (ifseqformula "20"))
                           )
                        )
                     )
                  )
                  (branch "if exc_1 instanceof java.lang.Throwable false"
                     (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                     (rule "concrete_or_4" (formula "1") (term "0,1"))
                     (rule "double_not" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "replace_known_right" (formula "1") (ifseqformula "28"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
      )
      (branch "Pre (search)"
         (rule "inInt" (formula "24") (term "1,0,0,0,0,1,0,1,1"))
         (rule "concrete_and_3" (formula "24") (term "0,0,0,0,1,0,1,1"))
         (rule "inInt" (formula "24") (term "1,0,0,0,1,1,0,1,1"))
         (rule "concrete_and_3" (formula "24") (term "0,0,0,1,1,0,1,1"))
         (rule "inInt" (formula "24") (term "1,0,0,0,0,1,0,1,1"))
         (rule "concrete_and_3" (formula "24") (term "0,0,0,0,1,0,1,1"))
         (rule "inInt" (formula "24") (term "1,0,0,0,0,0,0,0,1,1"))
         (rule "concrete_and_3" (formula "24") (term "0,0,0,0,0,0,0,1,1"))
         (rule "inInt" (formula "24") (term "1,0,0,0,0,0,0,0,1,1"))
         (rule "concrete_and_3" (formula "24") (term "0,0,0,0,0,0,0,1,1"))
         (rule "inInt" (formula "24") (term "1,0,0,0,1,1,1,0,0,1,1"))
         (rule "inInt" (formula "24") (term "1,0,0,0,0,1,1,0,0,1,1"))
         (rule "concrete_and_3" (formula "24") (term "0,0,0,1,1,1,0,0,1,1"))
         (rule "concrete_and_3" (formula "24") (term "0,0,0,0,1,1,0,0,1,1"))
         (rule "inInt" (formula "24") (term "1,0,0,0,0,1,1,0,0,1,1"))
         (rule "concrete_and_3" (formula "24") (term "0,0,0,0,1,1,0,0,1,1"))
         (rule "simplifyUpdate2" (formula "24"))
         (rule "simplifyUpdate2" (formula "24") (term "1"))
         (rule "eqSymm" (formula "24") (term "1,1,0,0,0,0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "24"))
         (rule "applyOnRigidFormula" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1"))
         (rule "applyOnPV" (formula "24") (term "0,1"))
         (rule "wellFormedCreate" (formula "24") (term "1"))
         (rule "wellFormedAnonEQ" (formula "24") (term "1") (ifseqformula "15"))
         (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "14"))
         (rule "concrete_and_3" (formula "24") (term "1"))
         (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "6"))
         (rule "concrete_and_3" (formula "24"))
         (rule "orRight" (formula "24"))
         (rule "orRight" (formula "24"))
         (rule "applyOnRigidFormula" (formula "26"))
         (rule "applyOnRigidFormula" (formula "24"))
         (rule "applyOnRigidFormula" (formula "25"))
         (rule "applyOnRigidFormula" (formula "26") (term "0"))
         (rule "applyOnRigidFormula" (formula "26") (term "1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1"))
         (rule "applyOnPV" (formula "24") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "0"))
         (rule "applyOnRigidFormula" (formula "25") (term "1"))
         (rule "applyOnRigidFormula" (formula "26") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "26") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "26") (term "1,1"))
         (rule "applyOnPV" (formula "26") (term "0,1,1"))
         (rule "simplifyUpdate1" (formula "26") (term "1,1,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "25") (term "0,0"))
         (rule "simplifyUpdate1" (formula "25") (term "1,0,0"))
         (rule "applyOnRigidFormula" (formula "25") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "26") (term "0,0,0"))
         (rule "applyOnRigidFormula" (formula "26") (term "0,0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0,0"))
         (rule "applyOnRigidTerm" (formula "25") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "25") (term "2,0,0,0"))
         (rule "applyOnPV" (formula "25") (term "0,0,0,0"))
         (rule "simplifyUpdate1" (formula "25") (term "1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "25") (term "1,1,1"))
         (rule "applyOnPV" (formula "25") (term "0,1,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "1,1,1,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "0,1,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "0,0,1"))
         (rule "applyOnRigidFormula" (formula "26") (term "1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "26") (term "0,0,0,0"))
         (rule "simplifyUpdate2" (formula "26") (term "0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "26") (term "1,0,0,1"))
         (rule "applyOnRigidFormula" (formula "26") (term "0,0,0,1"))
         (rule "simplifyUpdate2" (formula "26") (term "0,0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0,0,0"))
         (rule "simplifyUpdate2" (formula "24") (term "0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "26") (term "0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0,0,0"))
         (rule "applyOnPV" (formula "26") (term "0,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "26") (term "1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "2,1,1,0,0,0"))
         (rule "applyOnPV" (formula "26") (term "0,1,1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "26") (term "1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "0,1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "26") (term "0,1,0,0,1"))
         (rule "applyOnRigidFormula" (formula "26") (term "1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "26") (term "0,1,0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "24") (term "1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "0,1,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,1,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,1,1"))
         (rule "simplifyUpdate2" (formula "25") (term "0,0,0,0,1,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,1"))
         (rule "simplifyUpdate2" (formula "25") (term "0,0,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "26") (term "1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "2,1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "1,1,0,1,0,0,0"))
         (rule "applyOnPV" (formula "26") (term "0,1,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "26") (term "1,1,1,0,0,0"))
         (rule "applyOnPV" (formula "26") (term "0,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "1,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "2,1,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "26") (term "1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "1,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "26") (term "0,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "26") (term "2,1,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "26") (term "1,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "26") (term "2,1,0,1,0,0,1"))
         (rule "applyOnPV" (formula "26") (term "0,1,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "26") (term "1,1,0,1,0,0,1"))
         (rule "applyOnRigidTerm" (formula "26") (term "0,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "26") (term "2,0,0,1,0,0,1"))
         (rule "applyOnPV" (formula "26") (term "0,0,0,1,0,0,1"))
         (rule "applyOnRigidTerm" (formula "26") (term "1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "26") (term "2,1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "26") (term "1,1,1,0,0,0,1"))
         (rule "applyOnPV" (formula "26") (term "0,1,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "0,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,0,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,0,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "0,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,0,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,0,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,1,1"))
         (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "25") (term "0,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0,0,1,1"))
         (rule "applyOnPV" (formula "25") (term "0,0,1,0,0,1,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "0,1,0,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "25") (term "0,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0,0,0,1"))
         (rule "applyOnPV" (formula "25") (term "0,0,1,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,0,1"))
         (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "0,1,0,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "26") (term "1,0,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "26") (term "2,1,0,0,1,0,0,1"))
         (rule "applyOnPV" (formula "26") (term "0,1,0,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "26") (term "1,1,0,0,1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,0,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,0,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,0,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,0,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,0,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,0,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "24") (term "1,1,1,1,0,0,0"))
         (rule "applyOnPV" (formula "24") (term "0,1,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "2,1,1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1,1,1,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,0,0,1,1"))
         (rule "applyOnPV" (formula "25") (term "0,1,0,1,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,0,1,1"))
         (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,0,1,1"))
         (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,0,0,0,1"))
         (rule "applyOnPV" (formula "25") (term "0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,1,1"))
         (rule "applyOnRigidTerm" (formula "25") (term "1,1,1,0,0,0,1"))
         (rule "applyOnPV" (formula "25") (term "0,1,1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "1,1,1,1,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,1,1,1,0,0,0,1"))
         (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,0,0,1"))
         (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,0,0,1"))
         (rule "inEqSimp_gtToGeq" (formula "24") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0,0,1"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "24") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,1"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,1"))
         (rule "pullOutSelect" (formula "25") (term "0,0,0") (inst "selectSK=BinarySearch_numbers_0"))
         (rule "applyEq" (formula "27") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,0,1,1,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,1,1,1,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,0,1,0,0,1,1") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,0,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,1,1,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "27") (term "1,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,0,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,1,1,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "27") (term "1,1,1,1,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
         (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "22"))
         (rule "concrete_not_2" (formula "1") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "1") (term "1,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "8"))
         (rule "concrete_not_1" (formula "1") (term "1,0,0"))
         (rule "concrete_or_4" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "25") (term "1,0,1,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "1,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,1,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,1,1,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,0,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,1,1,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,1,1,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "1,1,1,1,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "22"))
         (rule "concrete_not_2" (formula "25") (term "0"))
         (rule "concrete_and_1" (formula "25"))
         (rule "pullOutSelect" (formula "26") (term "1,1,0,0,0,0") (inst "selectSK=BinarySearch_size_1"))
         (rule "applyEq" (formula "27") (term "1,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "25") (term "1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,1,0,0,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "27") (term "1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "27") (term "1,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "25") (term "1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "26") (term "1,0,1,0,0,1") (inst "selectSK=BinarySearch_query_1"))
         (rule "applyEq" (formula "26") (term "1,1,0,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "2,0"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "27") (term "1,0,1,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "inEqSimp_or_weaken0" (formula "24") (term "1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "1,0,1,0,0,0"))
         (rule "add_literals" (formula "24") (term "0,1,0,1,0,0,0"))
         (rule "add_zero_left" (formula "24") (term "1,0,1,0,0,0"))
         (rule "eqClose" (formula "24") (term "0,1,0,0,0"))
         (rule "ifthenelse_true_for" (formula "24") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
         (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
         (rule "nnf_imp2or" (formula "26") (term "0,0,1"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,1"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,1"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,1"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,1"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "25") (term "0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "24") (term "1") (ifseqformula "8"))
         (rule "concrete_and_3" (formula "24"))
         (rule "nnf_ex2all" (formula "24"))
         (rule "nnf_notEx" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
         (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
         (rule "concrete_and_1" (formula "26"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "25") (term "1,1") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "25") (term "1"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "26") (term "1") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "26"))
         (rule "allRight" (formula "26") (inst "sk=i_0"))
         (rule "orRight" (formula "26"))
         (rule "notRight" (formula "27"))
         (rule "orRight" (formula "27"))
         (rule "inEqSimp_leqRight" (formula "27"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "28"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfCreate" (formula "3"))
         (rule "equalUnique" (formula "3") (term "1,0,0"))
         (rule "concrete_and_4" (formula "3") (term "0,0"))
         (rule "ifthenelse_false" (formula "3") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "20"))
         (rule "elementOfFreshLocs" (formula "3") (term "1,0,0"))
         (rule "equalUnique" (formula "3") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "3") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "3") (term "0,0,0"))
         (rule "eqSymm" (formula "4"))
         (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
         (rule "hideAuxiliaryEq" (formula "4"))
         (rule "replace_known_left" (formula "3") (term "0,1,1,0,0") (ifseqformula "8"))
         (rule "concrete_not_1" (formula "3") (term "1,1,0,0"))
         (rule "concrete_and_4" (formula "3") (term "1,0,0"))
         (rule "concrete_or_4" (formula "3") (term "0,0"))
         (rule "elementOfSingleton" (formula "3") (term "0,0"))
         (rule "equalUnique" (formula "3") (term "1,0,0"))
         (rule "concrete_and_4" (formula "3") (term "0,0"))
         (rule "ifthenelse_false" (formula "3") (term "0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0"))
         (rule "andRight" (formula "28"))
         (branch
            (rule "allRight" (formula "28") (inst "sk=j_0"))
            (rule "allRight" (formula "28") (inst "sk=m_0"))
            (rule "orRight" (formula "28"))
            (rule "orRight" (formula "28"))
            (rule "orRight" (formula "28"))
            (rule "inEqSimp_leqRight" (formula "31"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "31"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "30"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "31"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1"))
            (rule "polySimp_elimOne" (formula "4") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
            (rule "simplifySelectOfCreate" (formula "4"))
            (rule "equalUnique" (formula "4") (term "1,0,0"))
            (rule "concrete_and_4" (formula "4") (term "0,0"))
            (rule "ifthenelse_false" (formula "4") (term "0"))
            (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "24"))
            (rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
            (rule "equalUnique" (formula "4") (term "0,1,0,0,0"))
            (rule "concrete_not_2" (formula "4") (term "1,0,0,0"))
            (rule "concrete_and_3" (formula "4") (term "0,0,0"))
            (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "13"))
            (rule "concrete_not_1" (formula "4") (term "1,1,0,0"))
            (rule "concrete_and_4" (formula "4") (term "1,0,0"))
            (rule "concrete_or_4" (formula "4") (term "0,0"))
            (rule "elementOfSingleton" (formula "4") (term "0,0"))
            (rule "equalUnique" (formula "4") (term "1,0,0"))
            (rule "concrete_and_4" (formula "4") (term "0,0"))
            (rule "ifthenelse_false" (formula "4") (term "0"))
            (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "inEqSimp_commuteGeq" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
            (rule "times_zero_1" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_2"))
            (rule "simplifySelectOfCreate" (formula "5"))
            (rule "equalUnique" (formula "5") (term "1,0,0"))
            (rule "concrete_and_4" (formula "5") (term "0,0"))
            (rule "ifthenelse_false" (formula "5") (term "0"))
            (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "25"))
            (rule "elementOfFreshLocs" (formula "5") (term "1,0,0"))
            (rule "equalUnique" (formula "5") (term "0,1,0,0,0"))
            (rule "concrete_not_2" (formula "5") (term "1,0,0,0"))
            (rule "concrete_and_3" (formula "5") (term "0,0,0"))
            (rule "replace_known_left" (formula "5") (term "0,1,1,0,0") (ifseqformula "14"))
            (rule "concrete_not_1" (formula "5") (term "1,1,0,0"))
            (rule "concrete_and_4" (formula "5") (term "1,0,0"))
            (rule "concrete_or_4" (formula "5") (term "0,0"))
            (rule "elementOfSingleton" (formula "5") (term "0,0"))
            (rule "equalUnique" (formula "5") (term "1,0,0"))
            (rule "concrete_and_4" (formula "5") (term "0,0"))
            (rule "ifthenelse_false" (formula "5") (term "0"))
            (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "allLeft" (formula "9") (inst "t=j_0"))
            (rule "replaceKnownSelect_taclet0210_18" (formula "9") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0210_20" (formula "9") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0,0") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0"))
            (rule "leq_literals" (formula "9") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "9") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "9") (term "0,0,0"))
            (rule "allLeft" (formula "9") (inst "t=m_0"))
            (rule "replaceKnownSelect_taclet0210_15" (formula "9") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0210_17" (formula "9") (term "0,1"))
            (rule "inEqSimp_contradInEq0" (formula "9") (term "1,0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0"))
            (rule "leq_literals" (formula "9") (term "0,1,0"))
            (rule "concrete_and_2" (formula "9") (term "1,0"))
            (rule "concrete_or_4" (formula "9") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "5"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
            (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,1"))
            (rule "leq_literals" (formula "9") (term "0,1"))
            (rule "concrete_and_2" (formula "9") (term "1"))
            (rule "concrete_or_4" (formula "9"))
            (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "3"))
            (rule "qeq_literals" (formula "9") (term "0"))
            (rule "concrete_and_2" (formula "9"))
            (rule "closeFalse" (formula "9"))
         )
         (branch
            (rule "nnf_ex2all" (formula "28"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
            (rule "allLeft" (formula "1") (inst "t=i_0"))
            (rule "replaceKnownSelect_taclet210_12" (formula "1") (term "0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet210_14" (formula "1") (term "0,0,1"))
            (rule "eqClose" (formula "1") (term "0,1"))
            (rule "concrete_not_1" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
            (rule "mul_literals" (formula "1") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_literals" (formula "1") (term "0,0,1"))
            (rule "leq_literals" (formula "1") (term "0,1"))
            (rule "concrete_and_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
            (rule "qeq_literals" (formula "4") (term "0"))
            (rule "concrete_and_2" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
   )
)
(branch "Exceptional Post (eliminateDuplicates)"
   (rule "simplifyUpdate2" (formula "16"))
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "blockThrow" (formula "16") (term "1"))
   (rule "methodCallParamThrow" (formula "16") (term "1"))
   (rule "tryCatchThrow" (formula "16") (term "1"))
   (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "x"))
   (rule "equality_comparison_simple" (formula "16") (term "1"))
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "ifElseSplit" (formula "16"))
   (branch "if x true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "17"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "ifthenelse_concrete3" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "throwUnfold" (formula "17") (term "1") (inst "#v0=n"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "n"))
      (rule "instanceof_static_type" (formula "13") (term "0,0,1,0,1,1,0,1,1,1,1,1"))
      (rule "boolean_equal" (formula "13") (term "0,1,0,1,1,0,1,1,1,1,1"))
      (rule "concrete_impl_1" (formula "13") (term "1,0,1,1,0,1,1,1,1,1"))
      (rule "inInt" (formula "13") (term "0,0,0,0,1,1,1,1,1,1,1"))
      (rule "concrete_impl_1" (formula "13") (term "0,0,0,1,1,1,1,1,1,1"))
      (rule "inInt" (formula "13") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
      (rule "concrete_and_3" (formula "13") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
      (rule "inInt" (formula "13") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
      (rule "concrete_and_3" (formula "13") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
      (rule "inInt" (formula "13") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
      (rule "concrete_and_3" (formula "13") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
      (rule "inInt" (formula "13") (term "1,0,0,1,0,0,0,1,1,1,1,1,1,1"))
      (rule "concrete_and_3" (formula "13") (term "0,0,1,0,0,0,1,1,1,1,1,1,1"))
      (rule "inInt" (formula "13") (term "1,0,0,0,0,0,0,1,1,1,1,1,1,1"))
      (rule "concrete_and_3" (formula "13") (term "0,0,0,0,0,0,1,1,1,1,1,1,1"))
      (rule "inInt" (formula "13") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
      (rule "concrete_and_3" (formula "13") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "sequentialToParallel2" (formula "13"))
      (rule "simplifyUpdate3" (formula "13") (term "1,0"))
      (rule "andLeft" (formula "13"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "sequentialToParallel2" (formula "14"))
      (rule "simplifyUpdate3" (formula "14") (term "1,0"))
      (rule "andLeft" (formula "14"))
      (rule "simplifyUpdate2" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "14"))
      (rule "simplifyUpdate2" (formula "14"))
      (rule "notLeft" (formula "14"))
      (rule "close" (formula "17") (ifseqformula "1"))
   )
   (branch "if x false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "17"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "13"))
      (rule "simplifyUpdate1" (formula "13") (term "1"))
      (rule "applyOnPV" (formula "13") (term "0"))
      (rule "ifthenelse_concrete3" (formula "13"))
      (rule "boolean_not_equal_2" (formula "13") (term "1"))
      (rule "concrete_or_4" (formula "13"))
      (rule "ifElseSplit" (formula "17"))
      (branch "if exc_0 instanceof java.lang.Throwable true"
         (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
         (rule "ifthenelse_concrete4" (formula "1") (term "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
         (rule "concrete_or_4" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "e"))
         (rule "delete_unnecessary_cast" (formula "17") (term "1"))
         (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
         (rule "boolean_equal" (formula "1") (term "1,1"))
         (rule "concrete_or_3" (formula "1") (term "1"))
         (rule "true_left" (formula "1"))
         (rule "sequentialToParallel2" (formula "17"))
         (rule "simplifyUpdate3" (formula "17") (term "1,0"))
         (rule "assignment" (formula "17") (term "1"))
         (rule "sequentialToParallel2" (formula "17"))
         (rule "simplifyUpdate2" (formula "17"))
         (rule "simplifyUpdate3" (formula "17") (term "1,0"))
         (rule "applyOnElementary" (formula "17") (term "1,0"))
         (rule "applyOnPV" (formula "17") (term "0,1,0"))
         (rule "emptyModality" (formula "17") (term "1"))
         (rule "applyOnRigidFormula" (formula "17"))
         (rule "simplifyUpdate2" (formula "17") (term "1"))
         (rule "simplifyUpdate2" (formula "17") (term "0"))
         (rule "applyOnRigidFormula" (formula "17") (term "1"))
         (rule "simplifyUpdate1" (formula "17") (term "1,1"))
         (rule "applyOnPV" (formula "17") (term "0,1"))
         (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "13"))
         (rule "concrete_and_4" (formula "17"))
         (rule "false_right" (formula "17"))
         (rule "inInt" (formula "12") (term "0,0,0,0,1,1,1,1,1,1,1"))
         (rule "concrete_impl_1" (formula "12") (term "0,0,0,1,1,1,1,1,1,1"))
         (rule "inInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
         (rule "inInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1"))
         (rule "inInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
         (rule "inInt" (formula "12") (term "1,0,0,0,0,0,0,1,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "12") (term "0,0,0,0,0,0,1,1,1,1,1,1,1"))
         (rule "inInt" (formula "12") (term "1,0,0,1,0,0,0,1,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "12") (term "0,0,1,0,0,0,1,1,1,1,1,1,1"))
         (rule "inInt" (formula "12") (term "1,0,0,0,0,1,0,1,1,1,1,1,1,1"))
         (rule "concrete_and_3" (formula "12") (term "0,0,0,0,1,0,1,1,1,1,1,1,1"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "andLeft" (formula "12"))
         (rule "instanceof_static_type" (formula "13") (term "0,0,1,0,1,1,0,1,1,1"))
         (rule "boolean_equal" (formula "13") (term "0,1,0,1,1,0,1,1,1"))
         (rule "concrete_impl_1" (formula "13") (term "1,0,1,1,0,1,1,1"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "sequentialToParallel2" (formula "13"))
         (rule "simplifyUpdate3" (formula "13") (term "1,0"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "notLeft" (formula "13"))
         (rule "applyOnRigidFormula" (formula "15"))
         (rule "simplifyUpdate2" (formula "15") (term "0"))
         (rule "applyOnRigidFormula" (formula "14"))
         (rule "simplifyUpdate2" (formula "14") (term "1"))
         (rule "simplifyUpdate2" (formula "14") (term "0"))
         (rule "applyOnRigidFormula" (formula "13"))
         (rule "simplifyUpdate1" (formula "13") (term "1"))
         (rule "applyOnRigidFormula" (formula "15") (term "1"))
         (rule "simplifyUpdate2" (formula "15") (term "1,1"))
         (rule "replace_known_right" (formula "15") (term "1,1") (ifseqformula "16"))
         (rule "concrete_and_4" (formula "15") (term "1"))
         (rule "concrete_impl_3" (formula "15"))
         (rule "notLeft" (formula "15"))
         (rule "applyOnRigidFormula" (formula "14") (term "1"))
         (rule "simplifyUpdate2" (formula "14") (term "0,1"))
         (rule "replace_known_right" (formula "14") (term "0,0,1") (ifseqformula "16"))
         (rule "concrete_not_2" (formula "14") (term "0,1"))
         (rule "concrete_and_1" (formula "14") (term "1"))
         (rule "applyOnRigidFormula" (formula "14") (term "0"))
         (rule "simplifyUpdate2" (formula "14") (term "0,0"))
         (rule "applyOnRigidTerm" (formula "13") (term "0"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0"))
         (rule "applyOnPV" (formula "13") (term "0,0"))
         (rule "simplifyUpdate1" (formula "13") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (ifseqformula "12"))
         (rule "applyOnRigidFormula" (formula "15"))
         (rule "simplifyUpdate2" (formula "15") (term "0"))
         (rule "applyOnRigidFormula" (formula "14") (term "1"))
         (rule "simplifyUpdate2" (formula "14") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
         (rule "simplifyUpdate2" (formula "14") (term "0,1,0"))
         (rule "simplifyUpdate2" (formula "14") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "15") (term "1"))
         (rule "applyOnRigidFormula" (formula "15") (term "0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
         (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "14") (term "1,0,0"))
         (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
         (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
         (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
         (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
         (rule "applyOnPV" (formula "15") (term "0,0,0"))
         (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "19"))
         (rule "concrete_not_2" (formula "15") (term "0"))
         (rule "concrete_and_1" (formula "15"))
         (rule "applyOnRigidFormula" (formula "14") (term "1,0,1"))
         (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1"))
         (rule "applyOnPV" (formula "14") (term "0,1,0,1"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,0,1"))
         (rule "simplifyUpdate2" (formula "14") (term "0,0,0,1"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,1,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1,0"))
         (rule "applyOnPV" (formula "14") (term "0,0,1,1,0"))
         (rule "replace_known_right" (formula "14") (term "0,1,1,0") (ifseqformula "19"))
         (rule "concrete_not_2" (formula "14") (term "1,1,0"))
         (rule "concrete_and_3" (formula "14") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "14") (term "0,0,0,0"))
         (rule "applyOnPV" (formula "14") (term "0,0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,1,0,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0"))
         (rule "applyOnPV" (formula "14") (term "0,0,1,0,0"))
         (rule "replace_known_right" (formula "14") (term "0,1,0,0") (ifseqformula "19"))
         (rule "concrete_not_2" (formula "14") (term "1,0,0"))
         (rule "concrete_and_3" (formula "14") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
         (rule "simplifyUpdate1" (formula "15") (term "1,0,1"))
         (rule "applyOnPV" (formula "15") (term "0,0,1"))
         (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,1"))
         (rule "simplifyUpdate1" (formula "14") (term "1,1,0,0,1"))
         (rule "applyOnRigidFormula" (formula "15") (term "0,0,0"))
         (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
         (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
         (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
         (rule "replace_known_right" (formula "15") (term "0,1,1") (ifseqformula "19"))
         (rule "concrete_not_2" (formula "15") (term "1,1"))
         (rule "concrete_and_3" (formula "15") (term "1"))
         (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,1"))
         (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,1"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0,1"))
         (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,0"))
         (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,0,0"))
         (rule "applyOnPV" (formula "15") (term "0,0,1,0,0,0"))
         (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0,0"))
         (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0"))
         (rule "applyOnPV" (formula "15") (term "1,1,1,0,0,0"))
         (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,1,0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0,0,0"))
         (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0,0"))
         (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,0,0,0"))
         (rule "pullOutSelect" (formula "14") (term "0,1,0,0,1") (inst "selectSK=BinarySearch_size_0"))
         (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "12"))
         (rule "elementOfFreshLocs" (formula "14") (term "1,0,0"))
         (rule "equalUnique" (formula "14") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "14") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "14") (term "0,0,0"))
         (rule "replace_known_right" (formula "14") (term "0,0,1,0,0") (ifseqformula "19"))
         (rule "concrete_not_2" (formula "14") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "14") (term "1,0,0"))
         (rule "replace_known_left" (formula "14") (term "0,1,0,0") (ifseqformula "4"))
         (rule "concrete_not_1" (formula "14") (term "1,0,0"))
         (rule "concrete_or_4" (formula "14") (term "0,0"))
         (rule "elementOfSingleton" (formula "14") (term "0,0"))
         (rule "equalUnique" (formula "14") (term "1,0,0"))
         (rule "concrete_and_3" (formula "14") (term "0,0"))
         (rule "eqClose" (formula "14") (term "0,0"))
         (rule "ifthenelse_true" (formula "14") (term "0"))
         (rule "applyEqReverse" (formula "15") (term "0,1,0,0,1") (ifseqformula "14"))
         (rule "hideAuxiliaryEq" (formula "14"))
         (rule "nnf_imp2or" (formula "15") (term "0,0,0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0"))
         (rule "commute_and" (formula "14") (term "0"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "15") (term "1") (ifseqformula "5"))
         (rule "concrete_and_3" (formula "15"))
         (rule "allRight" (formula "15") (inst "sk=j_0"))
         (rule "allRight" (formula "15") (inst "sk=i_0"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "inEqSimp_geqRight" (formula "18"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_geqRight" (formula "18"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "17"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "18"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "18") (term "1,0,1") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "18") (term "0,1"))
         (rule "Class_invariant_axiom_for_BinarySearch" (formula "18") (term "0,0") (ifseqformula "9"))
         (rule "concrete_and_1" (formula "18") (term "0"))
         (rule "cut_direct" (formula "17") (term "0"))
         (branch "CUT: exc_0.<created> = TRUE TRUE"
            (rule "concrete_or_1" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "arrayLengthIsAShort" (formula "18") (term "0,0"))
            (rule "inShort" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "cut_direct" (formula "18") (term "0"))
            (branch "CUT: self.numbers.length = 0 TRUE"
               (rule "concrete_impl_1" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
               (rule "concrete_impl_1" (formula "19"))
               (rule "arrayLengthNotNegative" (formula "18") (term "0"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
               (rule "qeq_literals" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "allLeftHide" (formula "11") (inst "t=j_0") (userinteraction))
               (rule "allLeftHide" (formula "11") (inst "t=i_0") (userinteraction))
               (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
               (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_literals" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
               (rule "concrete_and_2" (formula "11") (term "1"))
               (rule "concrete_or_4" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "11") (term "0,1,0"))
               (rule "concrete_and_2" (formula "11") (term "1,0"))
               (rule "concrete_or_4" (formula "11") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_literals" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
               (rule "concrete_and_2" (formula "11") (term "1"))
               (rule "concrete_or_4" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "3"))
               (rule "andLeft" (formula "11"))
               (rule "inEqSimp_homoInEq1" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
               (rule "add_literals" (formula "11") (term "1,1,0"))
               (rule "times_zero_1" (formula "11") (term "1,0"))
               (rule "add_literals" (formula "11") (term "0"))
               (rule "leq_literals" (formula "11"))
               (rule "closeFalse" (formula "11"))
            )
            (branch "CUT: self.numbers.length = 0 FALSE"
               (rule "concrete_impl_2" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "arrayLengthNotNegative" (formula "18") (term "0"))
               (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "19"))
               (rule "add_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "1"))
               (rule "mul_literals" (formula "19") (term "1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0"))
               (rule "leq_literals" (formula "19") (term "0"))
               (rule "concrete_and_2" (formula "19"))
               (rule "false_right" (formula "19"))
               (rule "allLeftHide" (formula "12") (inst "t=j_0") (userinteraction))
               (rule "allLeftHide" (formula "12") (inst "t=i_0") (userinteraction))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
               (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
               (rule "leq_literals" (formula "12") (term "0,1,0"))
               (rule "concrete_and_2" (formula "12") (term "1,0"))
               (rule "concrete_or_4" (formula "12") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "12") (term "0,0,1"))
               (rule "leq_literals" (formula "12") (term "0,1"))
               (rule "concrete_and_2" (formula "12") (term "1"))
               (rule "concrete_or_4" (formula "12"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,0"))
               (rule "leq_literals" (formula "12") (term "0,0"))
               (rule "concrete_and_2" (formula "12") (term "0"))
               (rule "concrete_or_2" (formula "12"))
               (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "3"))
               (rule "qeq_literals" (formula "12") (term "0"))
               (rule "concrete_and_2" (formula "12"))
               (rule "closeFalse" (formula "12"))
            )
         )
         (branch "CUT: exc_0.<created> = TRUE FALSE"
            (rule "concrete_or_2" (formula "17"))
            (rule "arrayLengthIsAShort" (formula "18") (term "0,0"))
            (rule "inShort" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "cut_direct" (formula "18") (term "0"))
            (branch "CUT: self.numbers.length = 0 TRUE"
               (rule "concrete_impl_1" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
               (rule "concrete_impl_1" (formula "19"))
               (rule "arrayLengthNotNegative" (formula "18") (term "0"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
               (rule "qeq_literals" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "allLeftHide" (formula "11") (inst "t=j_0") (userinteraction))
               (rule "allLeftHide" (formula "11") (inst "t=i_0") (userinteraction))
               (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,0,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
               (rule "leq_literals" (formula "11") (term "0,0,0,0"))
               (rule "concrete_and_2" (formula "11") (term "0,0,0"))
               (rule "concrete_or_2" (formula "11") (term "0,0"))
               (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_literals" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
               (rule "concrete_and_2" (formula "11") (term "1"))
               (rule "concrete_or_4" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_literals" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
               (rule "concrete_and_2" (formula "11") (term "1"))
               (rule "concrete_or_4" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "2"))
               (rule "qeq_literals" (formula "11") (term "0"))
               (rule "concrete_and_2" (formula "11"))
               (rule "closeFalse" (formula "11"))
            )
            (branch "CUT: self.numbers.length = 0 FALSE"
               (rule "concrete_impl_2" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "arrayLengthNotNegative" (formula "18") (term "0"))
               (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "19"))
               (rule "add_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "1"))
               (rule "mul_literals" (formula "19") (term "1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0"))
               (rule "leq_literals" (formula "19") (term "0"))
               (rule "concrete_and_2" (formula "19"))
               (rule "false_right" (formula "19"))
               (rule "allLeftHide" (formula "12") (inst "t=j_0") (userinteraction))
               (rule "allLeftHide" (formula "12") (inst "t=i_0") (userinteraction))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
               (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
               (rule "leq_literals" (formula "12") (term "0,1,0"))
               (rule "concrete_and_2" (formula "12") (term "1,0"))
               (rule "concrete_or_4" (formula "12") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "12") (term "0,0,1"))
               (rule "leq_literals" (formula "12") (term "0,1"))
               (rule "concrete_and_2" (formula "12") (term "1"))
               (rule "concrete_or_4" (formula "12"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "3"))
               (rule "qeq_literals" (formula "12") (term "0,1"))
               (rule "concrete_and_2" (formula "12") (term "1"))
               (rule "concrete_or_4" (formula "12"))
               (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "12"))
               (rule "andLeft" (formula "4"))
               (rule "inEqSimp_homoInEq1" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,1,0"))
               (rule "times_zero_1" (formula "4") (term "1,0"))
               (rule "add_literals" (formula "4") (term "0"))
               (rule "leq_literals" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
         )
      )
      (branch "if exc_0 instanceof java.lang.Throwable false"
         (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
         (rule "concrete_or_4" (formula "1") (term "0,1"))
         (rule "double_not" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "close" (formula "14") (ifseqformula "1"))
      )
   )
)
(branch "Pre (eliminateDuplicates)"
   (rule "inInt" (formula "14") (term "1,0,0,0,0,1,1,0,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,0,0,1,1,0,1,1"))
   (rule "inInt" (formula "14") (term "1,0,0,0,0,1,1,0,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,0,0,1,1,0,1,1"))
   (rule "simplifyUpdate2" (formula "14"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1"))
   (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "3"))
   (rule "concrete_and_1" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1"))
   (rule "applyOnPV" (formula "14") (term "0,0,1"))
   (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "13"))
   (rule "concrete_or_2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0,1,1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,0,0,0,1,1,0"))
   (rule "nnf_imp2or" (formula "14") (term "0,0,0,1,1,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,1,1,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,0,1,1,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0,0,1,1,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0,0,1,1,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,0,1,1,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,0,0,1,1,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0,0,1,1,0"))
   (rule "polySimp_elimOneLeft0" (formula "14") (term "1,0,0,0,0,0,0,1,1,0"))
   (rule "Class_invariant_axiom_for_BinarySearch" (formula "14") (term "0,1,0,0") (ifseqformula "5"))
   (rule "concrete_and_1" (formula "14") (term "1,0,0"))
   (rule "eq_and_2" (formula "14") (term "0,0"))
   (rule "commute_and" (formula "14") (term "0,0"))
   (rule "cut_direct" (formula "14") (term "1"))
   (branch "CUT: {var_1:=self.numbers}var_1.<created> = TRUE TRUE"
      (rule "concrete_and_3" (formula "15"))
      (rule "applyOnPV" (formula "1") (term "1,0"))
      (rule "orRight" (formula "14"))
      (rule "applyOnPV" (formula "15") (term "0,0,0"))
      (rule "applyOnPV" (formula "14") (term "0,0,1"))
      (rule "applyOnPV" (formula "14") (term "0,0,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,0,0"))
      (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
      (rule "simplifyUpdate1" (formula "15") (term "0,1,1,0,0,0,1"))
      (rule "applyOnPV" (formula "15") (term "1,1,1,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0,0,0,1"))
      (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,1"))
      (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "13"))
      (rule "concrete_not_2" (formula "14") (term "0"))
      (rule "concrete_and_1" (formula "14"))
      (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "13"))
      (rule "concrete_not_2" (formula "15") (term "0"))
      (rule "concrete_and_1" (formula "15"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
      (rule "applyOnRigidFormula" (formula "15") (term "1"))
      (rule "simplifyUpdate2" (formula "15") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
      (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
      (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
      (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
      (rule "replace_known_right" (formula "15") (term "0,1,1") (ifseqformula "13"))
      (rule "concrete_not_2" (formula "15") (term "1,1"))
      (rule "concrete_and_3" (formula "15") (term "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0"))
      (rule "Class_invariant_axiom_for_BinarySearch" (formula "15") (term "1") (ifseqformula "5"))
      (rule "concrete_and_3" (formula "15"))
      (rule "allRight" (formula "15") (inst "sk=j_0"))
      (rule "allRight" (formula "15") (inst "sk=i_0"))
      (rule "orRight" (formula "15"))
      (rule "orRight" (formula "15"))
      (rule "orRight" (formula "15"))
      (rule "inEqSimp_geqRight" (formula "18"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_geqRight" (formula "18"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "18"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_leqRight" (formula "18"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "arrayLengthNotNegative" (formula "18") (term "0"))
      (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "19"))
      (rule "add_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "1"))
      (rule "mul_literals" (formula "19") (term "1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0"))
      (rule "leq_literals" (formula "19") (term "0"))
      (rule "concrete_and_2" (formula "19"))
      (rule "false_right" (formula "19"))
      (rule "arrayLengthIsAShort" (formula "1") (term "0"))
      (rule "inShort" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "allLeftHide" (formula "12") (inst "t=j_0") (userinteraction))
      (rule "allLeftHide" (formula "12") (inst "t=i_0") (userinteraction))
      (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
      (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
      (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
      (rule "leq_literals" (formula "12") (term "0,1,0"))
      (rule "concrete_and_2" (formula "12") (term "1,0"))
      (rule "concrete_or_4" (formula "12") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
      (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
      (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "12") (term "0,0,1"))
      (rule "leq_literals" (formula "12") (term "0,1"))
      (rule "concrete_and_2" (formula "12") (term "1"))
      (rule "concrete_or_4" (formula "12"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "12") (term "0,1"))
      (rule "concrete_and_2" (formula "12") (term "1"))
      (rule "concrete_or_4" (formula "12"))
      (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "4"))
      (rule "andLeft" (formula "12"))
      (rule "inEqSimp_homoInEq1" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
      (rule "add_literals" (formula "12") (term "1,1,0"))
      (rule "times_zero_1" (formula "12") (term "1,0"))
      (rule "add_zero_right" (formula "12") (term "0"))
      (rule "leq_literals" (formula "12"))
      (rule "closeFalse" (formula "12"))
   )
   (branch "CUT: {var_1:=self.numbers}var_1.<created> = TRUE FALSE"
      (rule "concrete_and_4" (formula "15"))
      (rule "false_right" (formula "15"))
      (rule "applyOnPV" (formula "14") (term "1,0"))
      (rule "close" (formula "14") (ifseqformula "1"))
   )
)
)
}
